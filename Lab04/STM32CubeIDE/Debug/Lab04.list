
Lab04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002d74  08002d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d9c  08002d9c  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002d9c  08002d9c  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d9c  08002d9c  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000044  08002de8  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08002de8  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4dd  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d78  00000000  00000000  0002b54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0002d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  0002df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001844  00000000  00000000  0002eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1b9  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084607  00000000  00000000  0003d52d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1b34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033cc  00000000  00000000  000c1b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000044 	.word	0x20000044
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d5c 	.word	0x08002d5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000048 	.word	0x20000048
 8000148:	08002d5c 	.word	0x08002d5c

0800014c <display7SEG_0>:
#include "main.h"
#include "led_processing.h"

static int value = 0 ;

void display7SEG_0 ( int num ){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	d87f      	bhi.n	800025a <display7SEG_0+0x10e>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <display7SEG_0+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000189 	.word	0x08000189
 8000164:	0800019f 	.word	0x0800019f
 8000168:	080001b5 	.word	0x080001b5
 800016c:	080001cb 	.word	0x080001cb
 8000170:	080001e1 	.word	0x080001e1
 8000174:	080001f7 	.word	0x080001f7
 8000178:	0800020d 	.word	0x0800020d
 800017c:	08000223 	.word	0x08000223
 8000180:	08000239 	.word	0x08000239
 8000184:	08000245 	.word	0x08000245
	switch ( num ){
		case 0:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin, RESET );
 8000188:	2200      	movs	r2, #0
 800018a:	217e      	movs	r1, #126	; 0x7e
 800018c:	4835      	ldr	r0, [pc, #212]	; (8000264 <display7SEG_0+0x118>)
 800018e:	f001 f8b1 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_6_Pin, SET );
 8000192:	2201      	movs	r2, #1
 8000194:	2180      	movs	r1, #128	; 0x80
 8000196:	4833      	ldr	r0, [pc, #204]	; (8000264 <display7SEG_0+0x118>)
 8000198:	f001 f8ac 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 800019c:	e05e      	b.n	800025c <display7SEG_0+0x110>
		case 1:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin | LED7_0_6_Pin, SET );
 800019e:	2201      	movs	r2, #1
 80001a0:	21f2      	movs	r1, #242	; 0xf2
 80001a2:	4830      	ldr	r0, [pc, #192]	; (8000264 <display7SEG_0+0x118>)
 80001a4:	f001 f8a6 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_1_Pin | LED7_0_2_Pin, RESET );
 80001a8:	2200      	movs	r2, #0
 80001aa:	210c      	movs	r1, #12
 80001ac:	482d      	ldr	r0, [pc, #180]	; (8000264 <display7SEG_0+0x118>)
 80001ae:	f001 f8a1 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 80001b2:	e053      	b.n	800025c <display7SEG_0+0x110>
		case 2:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_6_Pin, RESET );
 80001b4:	2200      	movs	r2, #0
 80001b6:	21b6      	movs	r1, #182	; 0xb6
 80001b8:	482a      	ldr	r0, [pc, #168]	; (8000264 <display7SEG_0+0x118>)
 80001ba:	f001 f89b 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_2_Pin | LED7_0_5_Pin, SET);
 80001be:	2201      	movs	r2, #1
 80001c0:	2148      	movs	r1, #72	; 0x48
 80001c2:	4828      	ldr	r0, [pc, #160]	; (8000264 <display7SEG_0+0x118>)
 80001c4:	f001 f896 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 80001c8:	e048      	b.n	800025c <display7SEG_0+0x110>
		case 3:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_6_Pin, RESET );
 80001ca:	2200      	movs	r2, #0
 80001cc:	219e      	movs	r1, #158	; 0x9e
 80001ce:	4825      	ldr	r0, [pc, #148]	; (8000264 <display7SEG_0+0x118>)
 80001d0:	f001 f890 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_4_Pin | LED7_0_5_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2160      	movs	r1, #96	; 0x60
 80001d8:	4822      	ldr	r0, [pc, #136]	; (8000264 <display7SEG_0+0x118>)
 80001da:	f001 f88b 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 80001de:	e03d      	b.n	800025c <display7SEG_0+0x110>
		case 4:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_3_Pin | LED7_0_4_Pin, SET );
 80001e0:	2201      	movs	r2, #1
 80001e2:	2132      	movs	r1, #50	; 0x32
 80001e4:	481f      	ldr	r0, [pc, #124]	; (8000264 <display7SEG_0+0x118>)
 80001e6:	f001 f885 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 80001ea:	2200      	movs	r2, #0
 80001ec:	21cc      	movs	r1, #204	; 0xcc
 80001ee:	481d      	ldr	r0, [pc, #116]	; (8000264 <display7SEG_0+0x118>)
 80001f0:	f001 f880 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 80001f4:	e032      	b.n	800025c <display7SEG_0+0x110>
		case 5:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 80001f6:	2200      	movs	r2, #0
 80001f8:	21da      	movs	r1, #218	; 0xda
 80001fa:	481a      	ldr	r0, [pc, #104]	; (8000264 <display7SEG_0+0x118>)
 80001fc:	f001 f87a 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_1_Pin | LED7_0_4_Pin, SET);
 8000200:	2201      	movs	r2, #1
 8000202:	2124      	movs	r1, #36	; 0x24
 8000204:	4817      	ldr	r0, [pc, #92]	; (8000264 <display7SEG_0+0x118>)
 8000206:	f001 f875 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 800020a:	e027      	b.n	800025c <display7SEG_0+0x110>
		case 6:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 800020c:	2200      	movs	r2, #0
 800020e:	21fa      	movs	r1, #250	; 0xfa
 8000210:	4814      	ldr	r0, [pc, #80]	; (8000264 <display7SEG_0+0x118>)
 8000212:	f001 f86f 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_1_Pin, SET );
 8000216:	2201      	movs	r2, #1
 8000218:	2104      	movs	r1, #4
 800021a:	4812      	ldr	r0, [pc, #72]	; (8000264 <display7SEG_0+0x118>)
 800021c:	f001 f86a 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 8000220:	e01c      	b.n	800025c <display7SEG_0+0x110>
		case 7:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin, RESET );
 8000222:	2200      	movs	r2, #0
 8000224:	210e      	movs	r1, #14
 8000226:	480f      	ldr	r0, [pc, #60]	; (8000264 <display7SEG_0+0x118>)
 8000228:	f001 f864 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin | LED7_0_6_Pin, SET );
 800022c:	2201      	movs	r2, #1
 800022e:	21f0      	movs	r1, #240	; 0xf0
 8000230:	480c      	ldr	r0, [pc, #48]	; (8000264 <display7SEG_0+0x118>)
 8000232:	f001 f85f 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 8000236:	e011      	b.n	800025c <display7SEG_0+0x110>
		case 8:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 8000238:	2200      	movs	r2, #0
 800023a:	21fe      	movs	r1, #254	; 0xfe
 800023c:	4809      	ldr	r0, [pc, #36]	; (8000264 <display7SEG_0+0x118>)
 800023e:	f001 f859 	bl	80012f4 <HAL_GPIO_WritePin>
		break;
 8000242:	e00b      	b.n	800025c <display7SEG_0+0x110>
		case 9:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 8000244:	2200      	movs	r2, #0
 8000246:	21de      	movs	r1, #222	; 0xde
 8000248:	4806      	ldr	r0, [pc, #24]	; (8000264 <display7SEG_0+0x118>)
 800024a:	f001 f853 	bl	80012f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_4_Pin, SET );
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4804      	ldr	r0, [pc, #16]	; (8000264 <display7SEG_0+0x118>)
 8000254:	f001 f84e 	bl	80012f4 <HAL_GPIO_WritePin>
			break;
 8000258:	e000      	b.n	800025c <display7SEG_0+0x110>
		default:
			break;
 800025a:	bf00      	nop
	}
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40010800 	.word	0x40010800

08000268 <increase7SegLED>:

void increase7SegLED () {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	display7SEG_0(value++);
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <increase7SegLED+0x28>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	4907      	ldr	r1, [pc, #28]	; (8000290 <increase7SegLED+0x28>)
 8000274:	600a      	str	r2, [r1, #0]
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff68 	bl	800014c <display7SEG_0>
	if (value >= 10) value = 0;
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <increase7SegLED+0x28>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b09      	cmp	r3, #9
 8000282:	dd02      	ble.n	800028a <increase7SegLED+0x22>
 8000284:	4b02      	ldr	r3, [pc, #8]	; (8000290 <increase7SegLED+0x28>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000060 	.word	0x20000060

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fc92 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f81c 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f8cc 	bl	800043c <MX_GPIO_Init>
  MX_TIM2_Init();
 80002a4:	f000 f854 	bl	8000350 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80002a8:	f000 f89e 	bl	80003e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80002ac:	4807      	ldr	r0, [pc, #28]	; (80002cc <main+0x38>)
 80002ae:	f001 fcbd 	bl	8001c2c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  System_Initialization();
 80002b2:	f000 fb53 	bl	800095c <System_Initialization>
  SCH_Init();
 80002b6:	f000 fb23 	bl	8000900 <SCH_Init>

  SCH_Add_Task (increase7SegLED, 100, 50);
 80002ba:	2232      	movs	r2, #50	; 0x32
 80002bc:	2164      	movs	r1, #100	; 0x64
 80002be:	4804      	ldr	r0, [pc, #16]	; (80002d0 <main+0x3c>)
 80002c0:	f000 fa02 	bl	80006c8 <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks(&huart1);
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <main+0x40>)
 80002c6:	f000 fa55 	bl	8000774 <SCH_Dispatch_Tasks>
 80002ca:	e7fb      	b.n	80002c4 <main+0x30>
 80002cc:	20000110 	.word	0x20000110
 80002d0:	08000269 	.word	0x08000269
 80002d4:	200000cc 	.word	0x200000cc

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b090      	sub	sp, #64	; 0x40
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	2228      	movs	r2, #40	; 0x28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fd30 	bl	8002d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fa:	2302      	movs	r3, #2
 80002fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fe:	2301      	movs	r3, #1
 8000300:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000302:	2310      	movs	r3, #16
 8000304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000306:	2300      	movs	r3, #0
 8000308:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	4618      	mov	r0, r3
 8000310:	f001 f822 	bl	8001358 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800031a:	f000 f907 	bl	800052c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000322:	2300      	movs	r3, #0
 8000324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fa8e 	bl	8001858 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000342:	f000 f8f3 	bl	800052c <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3740      	adds	r7, #64	; 0x40
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000356:	f107 0308 	add.w	r3, r7, #8
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <MX_TIM2_Init+0x94>)
 800036e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_TIM2_Init+0x94>)
 8000376:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800037a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037c:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <MX_TIM2_Init+0x94>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_TIM2_Init+0x94>)
 8000384:	2209      	movs	r2, #9
 8000386:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <MX_TIM2_Init+0x94>)
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_TIM2_Init+0x94>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000394:	4813      	ldr	r0, [pc, #76]	; (80003e4 <MX_TIM2_Init+0x94>)
 8000396:	f001 fbf9 	bl	8001b8c <HAL_TIM_Base_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003a0:	f000 f8c4 	bl	800052c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	4619      	mov	r1, r3
 80003b0:	480c      	ldr	r0, [pc, #48]	; (80003e4 <MX_TIM2_Init+0x94>)
 80003b2:	f001 fd8f 	bl	8001ed4 <HAL_TIM_ConfigClockSource>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003bc:	f000 f8b6 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c0:	2300      	movs	r3, #0
 80003c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003c8:	463b      	mov	r3, r7
 80003ca:	4619      	mov	r1, r3
 80003cc:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_TIM2_Init+0x94>)
 80003ce:	f001 ff57 	bl	8002280 <HAL_TIMEx_MasterConfigSynchronization>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003d8:	f000 f8a8 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000110 	.word	0x20000110

080003e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003ee:	4a12      	ldr	r2, [pc, #72]	; (8000438 <MX_USART1_UART_Init+0x50>)
 80003f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 800040e:	220c      	movs	r2, #12
 8000410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_USART1_UART_Init+0x4c>)
 8000420:	f001 ff98 	bl	8002354 <HAL_UART_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800042a:	f000 f87f 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000cc 	.word	0x200000cc
 8000438:	40013800 	.word	0x40013800

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <MX_GPIO_Init+0x9c>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a20      	ldr	r2, [pc, #128]	; (80004d8 <MX_GPIO_Init+0x9c>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <MX_GPIO_Init+0x9c>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_GPIO_Init+0x9c>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <MX_GPIO_Init+0x9c>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_GPIO_Init+0x9c>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	603b      	str	r3, [r7, #0]
 800047e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_0_0_Pin|LED7_0_1_Pin|LED7_0_2_Pin|LED7_0_3_Pin
 8000480:	2200      	movs	r2, #0
 8000482:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8000486:	4815      	ldr	r0, [pc, #84]	; (80004dc <MX_GPIO_Init+0xa0>)
 8000488:	f000 ff34 	bl	80012f4 <HAL_GPIO_WritePin>
                          |LED7_0_4_Pin|LED7_0_5_Pin|LED7_0_6_Pin|LED_BLINKING_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_0_Pin
 800048c:	2200      	movs	r2, #0
 800048e:	21ff      	movs	r1, #255	; 0xff
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <MX_GPIO_Init+0xa4>)
 8000492:	f000 ff2f 	bl	80012f4 <HAL_GPIO_WritePin>
                          |LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED7_0_0_Pin LED7_0_1_Pin LED7_0_2_Pin LED7_0_3_Pin
                           LED7_0_4_Pin LED7_0_5_Pin LED7_0_6_Pin LED_BLINKING_Pin */
  GPIO_InitStruct.Pin = LED7_0_0_Pin|LED7_0_1_Pin|LED7_0_2_Pin|LED7_0_3_Pin
 8000496:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800049a:	60bb      	str	r3, [r7, #8]
                          |LED7_0_4_Pin|LED7_0_5_Pin|LED7_0_6_Pin|LED_BLINKING_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2302      	movs	r3, #2
 80004a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0308 	add.w	r3, r7, #8
 80004ac:	4619      	mov	r1, r3
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <MX_GPIO_Init+0xa0>)
 80004b0:	f000 fda6 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin LED_0_Pin
                           LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_0_Pin
 80004b4:	23ff      	movs	r3, #255	; 0xff
 80004b6:	60bb      	str	r3, [r7, #8]
                          |LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2302      	movs	r3, #2
 80004c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	4619      	mov	r1, r3
 80004ca:	4805      	ldr	r0, [pc, #20]	; (80004e0 <MX_GPIO_Init+0xa4>)
 80004cc:	f000 fd98 	bl	8001000 <HAL_GPIO_Init>

}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800
 80004e0:	40010c00 	.word	0x40010c00

080004e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 50;
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if ( counter == 50 ) {
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b32      	cmp	r3, #50	; 0x32
 80004f2:	d104      	bne.n	80004fe <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin (GPIOA , LED_BLINKING_Pin);
 80004f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004fa:	f000 ff13 	bl	8001324 <HAL_GPIO_TogglePin>
	}
	counter--;
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	3b01      	subs	r3, #1
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000506:	6013      	str	r3, [r2, #0]
	if( counter <= 0 ) counter = 50;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	dc02      	bgt.n	8000516 <HAL_TIM_PeriodElapsedCallback+0x32>
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000512:	2232      	movs	r2, #50	; 0x32
 8000514:	601a      	str	r2, [r3, #0]

	SCH_Update();
 8000516:	f000 f869 	bl	80005ec <SCH_Update>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000
 8000528:	40010800 	.word	0x40010800

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <updateBuffer>:
#define PID_length 			3
#define tick_index 			26
#define tick_length 		12


void updateBuffer(int tid, int tick) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	for (int i=0;  i< PID_length;i++) {
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e01e      	b.n	8000586 <updateBuffer+0x4e>
		tBuffer[PID_length + PID_index - i] = tid%10+48;
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <updateBuffer+0xac>)
 800054c:	fb83 1302 	smull	r1, r3, r3, r2
 8000550:	1099      	asrs	r1, r3, #2
 8000552:	17d3      	asrs	r3, r2, #31
 8000554:	1ac9      	subs	r1, r1, r3
 8000556:	460b      	mov	r3, r1
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	440b      	add	r3, r1
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	1ad1      	subs	r1, r2, r3
 8000560:	b2ca      	uxtb	r2, r1
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f1c3 0311 	rsb	r3, r3, #17
 8000568:	3230      	adds	r2, #48	; 0x30
 800056a:	b2d1      	uxtb	r1, r2
 800056c:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <updateBuffer+0xb0>)
 800056e:	54d1      	strb	r1, [r2, r3]
		tid/=10;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <updateBuffer+0xac>)
 8000574:	fb82 1203 	smull	r1, r2, r2, r3
 8000578:	1092      	asrs	r2, r2, #2
 800057a:	17db      	asrs	r3, r3, #31
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	607b      	str	r3, [r7, #4]
	for (int i=0;  i< PID_length;i++) {
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3301      	adds	r3, #1
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b02      	cmp	r3, #2
 800058a:	dddd      	ble.n	8000548 <updateBuffer+0x10>
	}

	for (int i = 0; i < tick_length; i++) {
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	e01e      	b.n	80005d0 <updateBuffer+0x98>
		tBuffer[tick_length + tick_index - i] = tick%10+48;
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <updateBuffer+0xac>)
 8000596:	fb83 1302 	smull	r1, r3, r3, r2
 800059a:	1099      	asrs	r1, r3, #2
 800059c:	17d3      	asrs	r3, r2, #31
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	460b      	mov	r3, r1
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	440b      	add	r3, r1
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	1ad1      	subs	r1, r2, r3
 80005aa:	b2ca      	uxtb	r2, r1
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	f1c3 0326 	rsb	r3, r3, #38	; 0x26
 80005b2:	3230      	adds	r2, #48	; 0x30
 80005b4:	b2d1      	uxtb	r1, r2
 80005b6:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <updateBuffer+0xb0>)
 80005b8:	54d1      	strb	r1, [r2, r3]
		tick/=10;
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <updateBuffer+0xac>)
 80005be:	fb82 1203 	smull	r1, r2, r2, r3
 80005c2:	1092      	asrs	r2, r2, #2
 80005c4:	17db      	asrs	r3, r3, #31
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < tick_length; i++) {
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	2b0b      	cmp	r3, #11
 80005d4:	dddd      	ble.n	8000592 <updateBuffer+0x5a>
	}
}
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	66666667 	.word	0x66666667
 80005e8:	20000004 	.word	0x20000004

080005ec <SCH_Update>:

// --------------- Scheduler ------------------ //
void SCH_Update( void ) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
	// NOTE: calculations are in *TICKS* ( not milliseconds )
	for (unsigned char Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	e05b      	b.n	80006b0 <SCH_Update+0xc4>
		// Check if there is a task at this location
		if (SCH_tasks_G [Index].pTask) {
 80005f8:	79fa      	ldrb	r2, [r7, #7]
 80005fa:	4932      	ldr	r1, [pc, #200]	; (80006c4 <SCH_Update+0xd8>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d04e      	beq.n	80006aa <SCH_Update+0xbe>
			if ( SCH_tasks_G[Index].Delay == 0) {
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	492d      	ldr	r1, [pc, #180]	; (80006c4 <SCH_Update+0xd8>)
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	440b      	add	r3, r1
 800061a:	3304      	adds	r3, #4
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d131      	bne.n	8000686 <SCH_Update+0x9a>
				// The task is due to run
				// Inc . the ’RunMe ’ flag
				SCH_tasks_G[Index].RunMe++;
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	4927      	ldr	r1, [pc, #156]	; (80006c4 <SCH_Update+0xd8>)
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	330c      	adds	r3, #12
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	b2d8      	uxtb	r0, r3
 8000638:	4922      	ldr	r1, [pc, #136]	; (80006c4 <SCH_Update+0xd8>)
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	330c      	adds	r3, #12
 8000646:	4602      	mov	r2, r0
 8000648:	701a      	strb	r2, [r3, #0]
				if  ( SCH_tasks_G [Index].Period ) {
 800064a:	79fa      	ldrb	r2, [r7, #7]
 800064c:	491d      	ldr	r1, [pc, #116]	; (80006c4 <SCH_Update+0xd8>)
 800064e:	4613      	mov	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	3308      	adds	r3, #8
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d024      	beq.n	80006aa <SCH_Update+0xbe>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period ;
 8000660:	79f9      	ldrb	r1, [r7, #7]
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <SCH_Update+0xd8>)
 8000666:	460b      	mov	r3, r1
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4403      	add	r3, r0
 8000670:	3308      	adds	r3, #8
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <SCH_Update+0xd8>)
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	4403      	add	r3, r0
 8000680:	3304      	adds	r3, #4
 8000682:	6019      	str	r1, [r3, #0]
 8000684:	e011      	b.n	80006aa <SCH_Update+0xbe>
				}
			} else {
				// Not yet ready to run : just decrement the delay
				SCH_tasks_G[Index].Delay--;
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	490e      	ldr	r1, [pc, #56]	; (80006c4 <SCH_Update+0xd8>)
 800068a:	4613      	mov	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	440b      	add	r3, r1
 8000694:	3304      	adds	r3, #4
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	1e59      	subs	r1, r3, #1
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <SCH_Update+0xd8>)
 800069c:	4613      	mov	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4403      	add	r3, r0
 80006a6:	3304      	adds	r3, #4
 80006a8:	6019      	str	r1, [r3, #0]
	for (unsigned char Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	3301      	adds	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d9a0      	bls.n	80005f8 <SCH_Update+0xc>

			}
		}
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000064 	.word	0x20000064

080006c8 <SCH_Add_Task>:

uint32_t SCH_Add_Task (void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	75fb      	strb	r3, [r7, #23]
	while (( SCH_tasks_G[Index].pTask != 0) && ( Index < SCH_MAX_TASKS))
 80006d8:	e002      	b.n	80006e0 <SCH_Add_Task+0x18>
	{
		Index++;
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	3301      	adds	r3, #1
 80006de:	75fb      	strb	r3, [r7, #23]
	while (( SCH_tasks_G[Index].pTask != 0) && ( Index < SCH_MAX_TASKS))
 80006e0:	7dfa      	ldrb	r2, [r7, #23]
 80006e2:	4923      	ldr	r1, [pc, #140]	; (8000770 <SCH_Add_Task+0xa8>)
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	440b      	add	r3, r1
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <SCH_Add_Task+0x32>
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	d9ef      	bls.n	80006da <SCH_Add_Task+0x12>
	}
	if (Index == SCH_MAX_TASKS)
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	2b05      	cmp	r3, #5
 80006fe:	d101      	bne.n	8000704 <SCH_Add_Task+0x3c>
	{
		return SCH_MAX_TASKS;
 8000700:	2305      	movs	r3, #5
 8000702:	e02f      	b.n	8000764 <SCH_Add_Task+0x9c>
	}

	SCH_tasks_G[Index].pTask 	= pFunction ;
 8000704:	7dfa      	ldrb	r2, [r7, #23]
 8000706:	491a      	ldr	r1, [pc, #104]	; (8000770 <SCH_Add_Task+0xa8>)
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay 	= DELAY;
 8000716:	7dfa      	ldrb	r2, [r7, #23]
 8000718:	4915      	ldr	r1, [pc, #84]	; (8000770 <SCH_Add_Task+0xa8>)
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	3304      	adds	r3, #4
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period 	= PERIOD;
 800072a:	7dfa      	ldrb	r2, [r7, #23]
 800072c:	4910      	ldr	r1, [pc, #64]	; (8000770 <SCH_Add_Task+0xa8>)
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	440b      	add	r3, r1
 8000738:	3308      	adds	r3, #8
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe 	= 0 ;
 800073e:	7dfa      	ldrb	r2, [r7, #23]
 8000740:	490b      	ldr	r1, [pc, #44]	; (8000770 <SCH_Add_Task+0xa8>)
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	330c      	adds	r3, #12
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]

	return SCH_tasks_G[Index].TaskID;
 8000752:	7dfa      	ldrb	r2, [r7, #23]
 8000754:	4906      	ldr	r1, [pc, #24]	; (8000770 <SCH_Add_Task+0xa8>)
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	3310      	adds	r3, #16
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	371c      	adds	r7, #28
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000064 	.word	0x20000064

08000774 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(UART_HandleTypeDef *huart1 )
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	unsigned char Index ;

	for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e050      	b.n	8000824 <SCH_Dispatch_Tasks+0xb0>
		if (SCH_tasks_G[Index].RunMe > 0) {
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	492b      	ldr	r1, [pc, #172]	; (8000834 <SCH_Dispatch_Tasks+0xc0>)
 8000786:	4613      	mov	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	440b      	add	r3, r1
 8000790:	330c      	adds	r3, #12
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d042      	beq.n	800081e <SCH_Dispatch_Tasks+0xaa>
			(*SCH_tasks_G[Index].pTask)() ; // Run the task
 8000798:	7bfa      	ldrb	r2, [r7, #15]
 800079a:	4926      	ldr	r1, [pc, #152]	; (8000834 <SCH_Dispatch_Tasks+0xc0>)
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	440b      	add	r3, r1
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--; // Reset / reduce RunMe flag
 80007aa:	7bfa      	ldrb	r2, [r7, #15]
 80007ac:	4921      	ldr	r1, [pc, #132]	; (8000834 <SCH_Dispatch_Tasks+0xc0>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	330c      	adds	r3, #12
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	3b01      	subs	r3, #1
 80007be:	b2d8      	uxtb	r0, r3
 80007c0:	491c      	ldr	r1, [pc, #112]	; (8000834 <SCH_Dispatch_Tasks+0xc0>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	330c      	adds	r3, #12
 80007ce:	4602      	mov	r2, r0
 80007d0:	701a      	strb	r2, [r3, #0]

			updateBuffer(SCH_tasks_G[Index].TaskID, HAL_GetTick());
 80007d2:	7bfa      	ldrb	r2, [r7, #15]
 80007d4:	4917      	ldr	r1, [pc, #92]	; (8000834 <SCH_Dispatch_Tasks+0xc0>)
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	440b      	add	r3, r1
 80007e0:	3310      	adds	r3, #16
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	461c      	mov	r4, r3
 80007e6:	f000 fa43 	bl	8000c70 <HAL_GetTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4619      	mov	r1, r3
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff fea2 	bl	8000538 <updateBuffer>
			HAL_UART_Transmit(huart1, tBuffer, 50, 100);
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	2232      	movs	r2, #50	; 0x32
 80007f8:	490f      	ldr	r1, [pc, #60]	; (8000838 <SCH_Dispatch_Tasks+0xc4>)
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f001 fdf7 	bl	80023ee <HAL_UART_Transmit>


			if ( SCH_tasks_G[Index].Period == 0)
 8000800:	7bfa      	ldrb	r2, [r7, #15]
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <SCH_Dispatch_Tasks+0xc0>)
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	440b      	add	r3, r1
 800080e:	3308      	adds	r3, #8
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d103      	bne.n	800081e <SCH_Dispatch_Tasks+0xaa>
			{
				SCH_Delete_Task(Index);
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f80f 	bl	800083c <SCH_Delete_Task>
	for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	3301      	adds	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	2b04      	cmp	r3, #4
 8000828:	d9ab      	bls.n	8000782 <SCH_Dispatch_Tasks+0xe>
			}
		}
	}
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	20000064 	.word	0x20000064
 8000838:	20000004 	.word	0x20000004

0800083c <SCH_Delete_Task>:

/*−−−−−−−−−−−−−−−−−−Delete−−−−−−−−−−−−−−−−−−−−−*/
#define RETURN_NORMAL 	0
#define RETURN_ERROR  	1

uint32_t SCH_Delete_Task (uint32_t TaskID) {
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	unsigned char TASK_INDEX = -1;
 8000844:	23ff      	movs	r3, #255	; 0xff
 8000846:	73fb      	strb	r3, [r7, #15]

	for (unsigned char Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000848:	2300      	movs	r3, #0
 800084a:	73bb      	strb	r3, [r7, #14]
 800084c:	e011      	b.n	8000872 <SCH_Delete_Task+0x36>
		if (SCH_tasks_G[Index].TaskID == TaskID) {
 800084e:	7bba      	ldrb	r2, [r7, #14]
 8000850:	4929      	ldr	r1, [pc, #164]	; (80008f8 <SCH_Delete_Task+0xbc>)
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	3310      	adds	r3, #16
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	d102      	bne.n	800086c <SCH_Delete_Task+0x30>
			TASK_INDEX = Index;
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	73fb      	strb	r3, [r7, #15]
			break;
 800086a:	e005      	b.n	8000878 <SCH_Delete_Task+0x3c>
	for (unsigned char Index = 0; Index < SCH_MAX_TASKS; Index++){
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	3301      	adds	r3, #1
 8000870:	73bb      	strb	r3, [r7, #14]
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	2b04      	cmp	r3, #4
 8000876:	d9ea      	bls.n	800084e <SCH_Delete_Task+0x12>
		return RETURN_ERROR;
	}

	unsigned char Return_code;

	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8000878:	7bfa      	ldrb	r2, [r7, #15]
 800087a:	491f      	ldr	r1, [pc, #124]	; (80008f8 <SCH_Delete_Task+0xbc>)
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d105      	bne.n	8000898 <SCH_Delete_Task+0x5c>
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <SCH_Delete_Task+0xc0>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
		Return_code = RETURN_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	737b      	strb	r3, [r7, #13]
 8000896:	e001      	b.n	800089c <SCH_Delete_Task+0x60>
	} else {
		Return_code = RETURN_NORMAL;
 8000898:	2300      	movs	r3, #0
 800089a:	737b      	strb	r3, [r7, #13]
	}

	SCH_tasks_G[TASK_INDEX].pTask 	= 0x0000 ;
 800089c:	7bfa      	ldrb	r2, [r7, #15]
 800089e:	4916      	ldr	r1, [pc, #88]	; (80008f8 <SCH_Delete_Task+0xbc>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	440b      	add	r3, r1
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay 	= 0;
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	4911      	ldr	r1, [pc, #68]	; (80008f8 <SCH_Delete_Task+0xbc>)
 80008b2:	4613      	mov	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	440b      	add	r3, r1
 80008bc:	3304      	adds	r3, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period 	= 0;
 80008c2:	7bfa      	ldrb	r2, [r7, #15]
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <SCH_Delete_Task+0xbc>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe 	= 0;
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	4907      	ldr	r1, [pc, #28]	; (80008f8 <SCH_Delete_Task+0xbc>)
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	330c      	adds	r3, #12
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]

	return Return_code;
 80008ea:	7b7b      	ldrb	r3, [r7, #13]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000064 	.word	0x20000064
 80008fc:	200000c8 	.word	0x200000c8

08000900 <SCH_Init>:

// ---------------- Init-------------------//
void SCH_Init ( void ) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	for (unsigned char Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000906:	2300      	movs	r3, #0
 8000908:	71fb      	strb	r3, [r7, #7]
 800090a:	e00c      	b.n	8000926 <SCH_Init+0x26>
		SCH_tasks_G[Index].TaskID = Index;
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	79f9      	ldrb	r1, [r7, #7]
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <SCH_Init+0x54>)
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4403      	add	r3, r0
 800091c:	3310      	adds	r3, #16
 800091e:	6019      	str	r1, [r3, #0]
	for (unsigned char Index = 0; Index < SCH_MAX_TASKS; Index++){
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	3301      	adds	r3, #1
 8000924:	71fb      	strb	r3, [r7, #7]
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b04      	cmp	r3, #4
 800092a:	d9ef      	bls.n	800090c <SCH_Init+0xc>
	}

	unsigned char i ;
	for (i = 0 ; i < SCH_MAX_TASKS; i ++) {
 800092c:	2300      	movs	r3, #0
 800092e:	71bb      	strb	r3, [r7, #6]
 8000930:	e006      	b.n	8000940 <SCH_Init+0x40>
		SCH_Delete_Task(i);
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff81 	bl	800083c <SCH_Delete_Task>
	for (i = 0 ; i < SCH_MAX_TASKS; i ++) {
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	3301      	adds	r3, #1
 800093e:	71bb      	strb	r3, [r7, #6]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	2b04      	cmp	r3, #4
 8000944:	d9f5      	bls.n	8000932 <SCH_Init+0x32>
	}

	Error_code_G = 0;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SCH_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000064 	.word	0x20000064
 8000958:	200000c8 	.word	0x200000c8

0800095c <System_Initialization>:

void System_Initialization(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	// Init LED
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2108      	movs	r1, #8
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <System_Initialization+0x3c>)
 8000966:	f000 fcc5 	bl	80012f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2110      	movs	r1, #16
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <System_Initialization+0x3c>)
 8000970:	f000 fcc0 	bl	80012f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2120      	movs	r1, #32
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <System_Initialization+0x3c>)
 800097a:	f000 fcbb 	bl	80012f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <System_Initialization+0x3c>)
 8000984:	f000 fcb6 	bl	80012f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <System_Initialization+0x3c>)
 800098e:	f000 fcb1 	bl	80012f4 <HAL_GPIO_WritePin>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40010c00 	.word	0x40010c00

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_MspInit+0x5c>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <HAL_MspInit+0x5c>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_MspInit+0x5c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x5c>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_MspInit+0x5c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x5c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_MspInit+0x60>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_MspInit+0x60>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010000 	.word	0x40010000

08000a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a10:	d113      	bne.n	8000a3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_TIM_Base_MspInit+0x44>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <HAL_TIM_Base_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_TIM_Base_MspInit+0x44>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	201c      	movs	r0, #28
 8000a30:	f000 f9ff 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a34:	201c      	movs	r0, #28
 8000a36:	f000 fa18 	bl	8000e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <HAL_UART_MspInit+0x9c>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d139      	bne.n	8000adc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_UART_MspInit+0xa0>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480f      	ldr	r0, [pc, #60]	; (8000aec <HAL_UART_MspInit+0xa4>)
 8000aae:	f000 faa7 	bl	8001000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_UART_MspInit+0xa4>)
 8000ac8:	f000 fa9a 	bl	8001000 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2025      	movs	r0, #37	; 0x25
 8000ad2:	f000 f9ae 	bl	8000e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ad6:	2025      	movs	r0, #37	; 0x25
 8000ad8:	f000 f9c7 	bl	8000e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40013800 	.word	0x40013800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010800 	.word	0x40010800

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b36:	f000 f889 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <TIM2_IRQHandler+0x10>)
 8000b46:	f001 f8bd 	bl	8001cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000110 	.word	0x20000110

08000b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USART1_IRQHandler+0x10>)
 8000b5a:	f001 fcdb 	bl	8002514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000cc 	.word	0x200000cc

08000b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9a:	f7ff ffe5 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f002 f8b1 	bl	8002d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fb77 	bl	8000294 <main>
  bx lr
 8000ba6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000bb0:	08002da4 	.word	0x08002da4
  ldr r2, =_sbss
 8000bb4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000bb8:	2000015c 	.word	0x2000015c

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x28>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x28>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f923 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fede 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f93b 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f903 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000038 	.word	0x20000038
 8000c44:	20000040 	.word	0x20000040
 8000c48:	2000003c 	.word	0x2000003c

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	20000040 	.word	0x20000040
 8000c6c:	20000158 	.word	0x20000158

08000c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000158 	.word	0x20000158

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4906      	ldr	r1, [pc, #24]	; (8000d1c <__NVIC_EnableIRQ+0x34>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff90 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff2d 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff42 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff90 	bl	8000d74 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5f 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff35 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffa2 	bl	8000dd8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d008      	beq.n	8000ec6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e020      	b.n	8000f08 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020e 	bic.w	r2, r2, #14
 8000ed4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0201 	bic.w	r2, r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d005      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e051      	b.n	8000fda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 020e 	bic.w	r2, r2, #14
 8000f44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0201 	bic.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_DMA_Abort_IT+0xd0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d029      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0xa0>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <HAL_DMA_Abort_IT+0xd4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d022      	beq.n	8000fb0 <HAL_DMA_Abort_IT+0x9c>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <HAL_DMA_Abort_IT+0xd8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d01a      	beq.n	8000faa <HAL_DMA_Abort_IT+0x96>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <HAL_DMA_Abort_IT+0xdc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d012      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x90>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <HAL_DMA_Abort_IT+0xe0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d00a      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x8a>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <HAL_DMA_Abort_IT+0xe4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d102      	bne.n	8000f98 <HAL_DMA_Abort_IT+0x84>
 8000f92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f96:	e00e      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xa2>
 8000f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f9c:	e00b      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xa2>
 8000f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa2:	e008      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xa2>
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	e005      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xa2>
 8000faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fae:	e002      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xa2>
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	e000      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xa2>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_DMA_Abort_IT+0xe8>)
 8000fb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	4798      	blx	r3
    } 
  }
  return status;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020008 	.word	0x40020008
 8000fe8:	4002001c 	.word	0x4002001c
 8000fec:	40020030 	.word	0x40020030
 8000ff0:	40020044 	.word	0x40020044
 8000ff4:	40020058 	.word	0x40020058
 8000ff8:	4002006c 	.word	0x4002006c
 8000ffc:	40020000 	.word	0x40020000

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b08b      	sub	sp, #44	; 0x2c
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001012:	e148      	b.n	80012a6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001014:	2201      	movs	r2, #1
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	429a      	cmp	r2, r3
 800102e:	f040 8137 	bne.w	80012a0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	4aa3      	ldr	r2, [pc, #652]	; (80012c4 <HAL_GPIO_Init+0x2c4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d05e      	beq.n	80010fa <HAL_GPIO_Init+0xfa>
 800103c:	4aa1      	ldr	r2, [pc, #644]	; (80012c4 <HAL_GPIO_Init+0x2c4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d875      	bhi.n	800112e <HAL_GPIO_Init+0x12e>
 8001042:	4aa1      	ldr	r2, [pc, #644]	; (80012c8 <HAL_GPIO_Init+0x2c8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d058      	beq.n	80010fa <HAL_GPIO_Init+0xfa>
 8001048:	4a9f      	ldr	r2, [pc, #636]	; (80012c8 <HAL_GPIO_Init+0x2c8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d86f      	bhi.n	800112e <HAL_GPIO_Init+0x12e>
 800104e:	4a9f      	ldr	r2, [pc, #636]	; (80012cc <HAL_GPIO_Init+0x2cc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d052      	beq.n	80010fa <HAL_GPIO_Init+0xfa>
 8001054:	4a9d      	ldr	r2, [pc, #628]	; (80012cc <HAL_GPIO_Init+0x2cc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d869      	bhi.n	800112e <HAL_GPIO_Init+0x12e>
 800105a:	4a9d      	ldr	r2, [pc, #628]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d04c      	beq.n	80010fa <HAL_GPIO_Init+0xfa>
 8001060:	4a9b      	ldr	r2, [pc, #620]	; (80012d0 <HAL_GPIO_Init+0x2d0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d863      	bhi.n	800112e <HAL_GPIO_Init+0x12e>
 8001066:	4a9b      	ldr	r2, [pc, #620]	; (80012d4 <HAL_GPIO_Init+0x2d4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d046      	beq.n	80010fa <HAL_GPIO_Init+0xfa>
 800106c:	4a99      	ldr	r2, [pc, #612]	; (80012d4 <HAL_GPIO_Init+0x2d4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d85d      	bhi.n	800112e <HAL_GPIO_Init+0x12e>
 8001072:	2b12      	cmp	r3, #18
 8001074:	d82a      	bhi.n	80010cc <HAL_GPIO_Init+0xcc>
 8001076:	2b12      	cmp	r3, #18
 8001078:	d859      	bhi.n	800112e <HAL_GPIO_Init+0x12e>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <HAL_GPIO_Init+0x80>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	080010fb 	.word	0x080010fb
 8001084:	080010d5 	.word	0x080010d5
 8001088:	080010e7 	.word	0x080010e7
 800108c:	08001129 	.word	0x08001129
 8001090:	0800112f 	.word	0x0800112f
 8001094:	0800112f 	.word	0x0800112f
 8001098:	0800112f 	.word	0x0800112f
 800109c:	0800112f 	.word	0x0800112f
 80010a0:	0800112f 	.word	0x0800112f
 80010a4:	0800112f 	.word	0x0800112f
 80010a8:	0800112f 	.word	0x0800112f
 80010ac:	0800112f 	.word	0x0800112f
 80010b0:	0800112f 	.word	0x0800112f
 80010b4:	0800112f 	.word	0x0800112f
 80010b8:	0800112f 	.word	0x0800112f
 80010bc:	0800112f 	.word	0x0800112f
 80010c0:	0800112f 	.word	0x0800112f
 80010c4:	080010dd 	.word	0x080010dd
 80010c8:	080010f1 	.word	0x080010f1
 80010cc:	4a82      	ldr	r2, [pc, #520]	; (80012d8 <HAL_GPIO_Init+0x2d8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010d2:	e02c      	b.n	800112e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	623b      	str	r3, [r7, #32]
          break;
 80010da:	e029      	b.n	8001130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	3304      	adds	r3, #4
 80010e2:	623b      	str	r3, [r7, #32]
          break;
 80010e4:	e024      	b.n	8001130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	3308      	adds	r3, #8
 80010ec:	623b      	str	r3, [r7, #32]
          break;
 80010ee:	e01f      	b.n	8001130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	330c      	adds	r3, #12
 80010f6:	623b      	str	r3, [r7, #32]
          break;
 80010f8:	e01a      	b.n	8001130 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001102:	2304      	movs	r3, #4
 8001104:	623b      	str	r3, [r7, #32]
          break;
 8001106:	e013      	b.n	8001130 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d105      	bne.n	800111c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001110:	2308      	movs	r3, #8
 8001112:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	611a      	str	r2, [r3, #16]
          break;
 800111a:	e009      	b.n	8001130 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800111c:	2308      	movs	r3, #8
 800111e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	615a      	str	r2, [r3, #20]
          break;
 8001126:	e003      	b.n	8001130 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x130>
          break;
 800112e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2bff      	cmp	r3, #255	; 0xff
 8001134:	d801      	bhi.n	800113a <HAL_GPIO_Init+0x13a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	e001      	b.n	800113e <HAL_GPIO_Init+0x13e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3304      	adds	r3, #4
 800113e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2bff      	cmp	r3, #255	; 0xff
 8001144:	d802      	bhi.n	800114c <HAL_GPIO_Init+0x14c>
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_Init+0x152>
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	3b08      	subs	r3, #8
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	210f      	movs	r1, #15
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	401a      	ands	r2, r3
 8001164:	6a39      	ldr	r1, [r7, #32]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	431a      	orrs	r2, r3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8090 	beq.w	80012a0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001180:	4b56      	ldr	r3, [pc, #344]	; (80012dc <HAL_GPIO_Init+0x2dc>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a55      	ldr	r2, [pc, #340]	; (80012dc <HAL_GPIO_Init+0x2dc>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_GPIO_Init+0x2dc>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_GPIO_Init+0x2e0>)
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a49      	ldr	r2, [pc, #292]	; (80012e4 <HAL_GPIO_Init+0x2e4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d00d      	beq.n	80011e0 <HAL_GPIO_Init+0x1e0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a48      	ldr	r2, [pc, #288]	; (80012e8 <HAL_GPIO_Init+0x2e8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x1dc>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a47      	ldr	r2, [pc, #284]	; (80012ec <HAL_GPIO_Init+0x2ec>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d101      	bne.n	80011d8 <HAL_GPIO_Init+0x1d8>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x1e2>
 80011d8:	2303      	movs	r3, #3
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x1e2>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x1e2>
 80011e0:	2300      	movs	r3, #0
 80011e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f2:	493b      	ldr	r1, [pc, #236]	; (80012e0 <HAL_GPIO_Init+0x2e0>)
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4937      	ldr	r1, [pc, #220]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	43db      	mvns	r3, r3
 8001222:	4933      	ldr	r1, [pc, #204]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 8001224:	4013      	ands	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	492d      	ldr	r1, [pc, #180]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
 8001240:	e006      	b.n	8001250 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	43db      	mvns	r3, r3
 800124a:	4929      	ldr	r1, [pc, #164]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 800124c:	4013      	ands	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4923      	ldr	r1, [pc, #140]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	491f      	ldr	r1, [pc, #124]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 8001274:	4013      	ands	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4919      	ldr	r1, [pc, #100]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	43db      	mvns	r3, r3
 800129a:	4915      	ldr	r1, [pc, #84]	; (80012f0 <HAL_GPIO_Init+0x2f0>)
 800129c:	4013      	ands	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	3301      	adds	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f aeaf 	bne.w	8001014 <HAL_GPIO_Init+0x14>
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	372c      	adds	r7, #44	; 0x2c
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	10320000 	.word	0x10320000
 80012c8:	10310000 	.word	0x10310000
 80012cc:	10220000 	.word	0x10220000
 80012d0:	10210000 	.word	0x10210000
 80012d4:	10120000 	.word	0x10120000
 80012d8:	10110000 	.word	0x10110000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	611a      	str	r2, [r3, #16]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43d9      	mvns	r1, r3
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	400b      	ands	r3, r1
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	611a      	str	r2, [r3, #16]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
	...

08001358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e26c      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8087 	beq.w	8001486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001378:	4b92      	ldr	r3, [pc, #584]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b04      	cmp	r3, #4
 8001382:	d00c      	beq.n	800139e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001384:	4b8f      	ldr	r3, [pc, #572]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d112      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
 8001390:	4b8c      	ldr	r3, [pc, #560]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d10b      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139e:	4b89      	ldr	r3, [pc, #548]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <HAL_RCC_OscConfig+0x12c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d168      	bne.n	8001484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e246      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x76>
 80013c0:	4b80      	ldr	r3, [pc, #512]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a7f      	ldr	r2, [pc, #508]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e02e      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b7b      	ldr	r3, [pc, #492]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7a      	ldr	r2, [pc, #488]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b78      	ldr	r3, [pc, #480]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a77      	ldr	r2, [pc, #476]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0xbc>
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a71      	ldr	r2, [pc, #452]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b6f      	ldr	r3, [pc, #444]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a6e      	ldr	r2, [pc, #440]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xd4>
 8001414:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a6a      	ldr	r2, [pc, #424]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b68      	ldr	r3, [pc, #416]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a67      	ldr	r2, [pc, #412]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fc1c 	bl	8000c70 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc18 	bl	8000c70 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1fa      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xe4>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fc08 	bl	8000c70 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc04 	bl	8000c70 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1e6      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x10c>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d063      	beq.n	800155a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001492:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800149e:	4b49      	ldr	r3, [pc, #292]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x18c>
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d116      	bne.n	80014e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x176>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e1ba      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4939      	ldr	r1, [pc, #228]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	e03a      	b.n	800155a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_RCC_OscConfig+0x270>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fbbd 	bl	8000c70 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fbb9 	bl	8000c70 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e19b      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4927      	ldr	r1, [pc, #156]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_RCC_OscConfig+0x270>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fb9c 	bl	8000c70 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fb98 	bl	8000c70 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e17a      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03a      	beq.n	80015dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d019      	beq.n	80015a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_RCC_OscConfig+0x274>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fb7c 	bl	8000c70 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fb78 	bl	8000c70 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e15a      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_RCC_OscConfig+0x26c>)
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800159a:	2001      	movs	r0, #1
 800159c:	f000 fad8 	bl	8001b50 <RCC_Delay>
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_RCC_OscConfig+0x274>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fb62 	bl	8000c70 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ae:	e00f      	b.n	80015d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fb5e 	bl	8000c70 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d908      	bls.n	80015d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e140      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	42420000 	.word	0x42420000
 80015cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	4b9e      	ldr	r3, [pc, #632]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e9      	bne.n	80015b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a6 	beq.w	8001736 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b97      	ldr	r3, [pc, #604]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b94      	ldr	r3, [pc, #592]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a93      	ldr	r2, [pc, #588]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b91      	ldr	r3, [pc, #580]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001612:	2301      	movs	r3, #1
 8001614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001616:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <HAL_RCC_OscConfig+0x4f8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d118      	bne.n	8001654 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4b8b      	ldr	r3, [pc, #556]	; (8001850 <HAL_RCC_OscConfig+0x4f8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a8a      	ldr	r2, [pc, #552]	; (8001850 <HAL_RCC_OscConfig+0x4f8>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162e:	f7ff fb1f 	bl	8000c70 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001636:	f7ff fb1b 	bl	8000c70 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e0fd      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x4f8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x312>
 800165c:	4b7b      	ldr	r3, [pc, #492]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a7a      	ldr	r2, [pc, #488]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e02d      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x334>
 8001672:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a75      	ldr	r2, [pc, #468]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a72      	ldr	r2, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	e01c      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x356>
 8001694:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a6c      	ldr	r2, [pc, #432]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a69      	ldr	r2, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e00b      	b.n	80016c6 <HAL_RCC_OscConfig+0x36e>
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a66      	ldr	r2, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a63      	ldr	r2, [pc, #396]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d015      	beq.n	80016fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff facf 	bl	8000c70 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d4:	e00a      	b.n	80016ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff facb 	bl	8000c70 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0ab      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	4b57      	ldr	r3, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ee      	beq.n	80016d6 <HAL_RCC_OscConfig+0x37e>
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fab9 	bl	8000c70 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fab5 	bl	8000c70 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e095      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ee      	bne.n	8001702 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a47      	ldr	r2, [pc, #284]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001734:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8081 	beq.w	8001842 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d061      	beq.n	8001810 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d146      	bne.n	80017e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_OscConfig+0x4fc>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fa89 	bl	8000c70 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001762:	f7ff fa85 	bl	8000c70 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e067      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d108      	bne.n	800179c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800178a:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	492d      	ldr	r1, [pc, #180]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a19      	ldr	r1, [r3, #32]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	430b      	orrs	r3, r1
 80017ae:	4927      	ldr	r1, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_RCC_OscConfig+0x4fc>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fa59 	bl	8000c70 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fa55 	bl	8000c70 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e037      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x46a>
 80017e0:	e02f      	b.n	8001842 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_RCC_OscConfig+0x4fc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa42 	bl	8000c70 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fa3e 	bl	8000c70 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e020      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x498>
 800180e:	e018      	b.n	8001842 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e013      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x4f4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	429a      	cmp	r2, r3
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	42420060 	.word	0x42420060

08001858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0d0      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d910      	bls.n	800189c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 0207 	bic.w	r2, r3, #7
 8001882:	4965      	ldr	r1, [pc, #404]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b8      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	494d      	ldr	r1, [pc, #308]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d040      	beq.n	8001978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e07f      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e073      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06b      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f023 0203 	bic.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4936      	ldr	r1, [pc, #216]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001948:	f7ff f992 	bl	8000c70 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff f98e 	bl	8000c70 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e053      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 020c 	and.w	r2, r3, #12
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1eb      	bne.n	8001950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d210      	bcs.n	80019a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	4922      	ldr	r1, [pc, #136]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e032      	b.n	8001a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4916      	ldr	r1, [pc, #88]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	490e      	ldr	r1, [pc, #56]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e6:	f000 f821 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	490a      	ldr	r1, [pc, #40]	; (8001a20 <HAL_RCC_ClockConfig+0x1c8>)
 80019f8:	5ccb      	ldrb	r3, [r1, r3]
 80019fa:	fa22 f303 	lsr.w	r3, r2, r3
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1cc>)
 8001a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1d0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f8f0 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	08002d84 	.word	0x08002d84
 8001a24:	20000038 	.word	0x20000038
 8001a28:	2000003c 	.word	0x2000003c

08001a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	b490      	push	{r4, r7}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a34:	1d3c      	adds	r4, r7, #4
 8001a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a3c:	f240 2301 	movw	r3, #513	; 0x201
 8001a40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x40>
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x46>
 8001a6a:	e02d      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6e:	623b      	str	r3, [r7, #32]
      break;
 8001a70:	e02d      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a7e:	4413      	add	r3, r2
 8001a80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0c5b      	lsrs	r3, r3, #17
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001aa4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aaa:	fb02 f203 	mul.w	r2, r2, r3
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab6:	e004      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	623b      	str	r3, [r7, #32]
      break;
 8001ac6:	e002      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aca:	623b      	str	r3, [r7, #32]
      break;
 8001acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ace:	6a3b      	ldr	r3, [r7, #32]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc90      	pop	{r4, r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	08002d74 	.word	0x08002d74
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	007a1200 	.word	0x007a1200
 8001ae8:	003d0900 	.word	0x003d0900

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <HAL_RCC_GetHCLKFreq+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000038 	.word	0x20000038

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b04:	f7ff fff2 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08002d94 	.word	0x08002d94

08001b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0adb      	lsrs	r3, r3, #11
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08002d94 	.word	0x08002d94

08001b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <RCC_Delay+0x34>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <RCC_Delay+0x38>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0a5b      	lsrs	r3, r3, #9
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b6c:	bf00      	nop
  }
  while (Delay --);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	60fa      	str	r2, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f9      	bne.n	8001b6c <RCC_Delay+0x1c>
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000038 	.word	0x20000038
 8001b88:	10624dd3 	.word	0x10624dd3

08001b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e041      	b.n	8001c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe ff24 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f000 fa6a 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d001      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e035      	b.n	8001cb0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <HAL_TIM_Base_Start_IT+0x90>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d009      	beq.n	8001c7a <HAL_TIM_Base_Start_IT+0x4e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6e:	d004      	beq.n	8001c7a <HAL_TIM_Base_Start_IT+0x4e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_Base_Start_IT+0x94>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d111      	bne.n	8001c9e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b06      	cmp	r3, #6
 8001c8a:	d010      	beq.n	8001cae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9c:	e007      	b.n	8001cae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40000400 	.word	0x40000400

08001cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d122      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d11b      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f9b1 	bl	800206e <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f9a4 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f9b3 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0204 	mvn.w	r2, #4
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f987 	bl	800206e <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f97a 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f989 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0208 	mvn.w	r2, #8
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f95d 	bl	800206e <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f950 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f95f 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d122      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d11b      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0210 	mvn.w	r2, #16
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2208      	movs	r2, #8
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f933 	bl	800206e <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f926 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f935 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0201 	mvn.w	r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fb4e 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d107      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fa67 	bl	8002342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8f9 	bl	8002092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0220 	mvn.w	r2, #32
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fa32 	bl	8002330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_TIM_ConfigClockSource+0x18>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e0b3      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x180>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f24:	d03e      	beq.n	8001fa4 <HAL_TIM_ConfigClockSource+0xd0>
 8001f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2a:	f200 8087 	bhi.w	800203c <HAL_TIM_ConfigClockSource+0x168>
 8001f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f32:	f000 8085 	beq.w	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3a:	d87f      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x168>
 8001f3c:	2b70      	cmp	r3, #112	; 0x70
 8001f3e:	d01a      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0xa2>
 8001f40:	2b70      	cmp	r3, #112	; 0x70
 8001f42:	d87b      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x168>
 8001f44:	2b60      	cmp	r3, #96	; 0x60
 8001f46:	d050      	beq.n	8001fea <HAL_TIM_ConfigClockSource+0x116>
 8001f48:	2b60      	cmp	r3, #96	; 0x60
 8001f4a:	d877      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x168>
 8001f4c:	2b50      	cmp	r3, #80	; 0x50
 8001f4e:	d03c      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0xf6>
 8001f50:	2b50      	cmp	r3, #80	; 0x50
 8001f52:	d873      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x168>
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d058      	beq.n	800200a <HAL_TIM_ConfigClockSource+0x136>
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d86f      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x168>
 8001f5c:	2b30      	cmp	r3, #48	; 0x30
 8001f5e:	d064      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x156>
 8001f60:	2b30      	cmp	r3, #48	; 0x30
 8001f62:	d86b      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x168>
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d060      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x156>
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d867      	bhi.n	800203c <HAL_TIM_ConfigClockSource+0x168>
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d05c      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x156>
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	d05a      	beq.n	800202a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f74:	e062      	b.n	800203c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f000 f95c 	bl	8002242 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	609a      	str	r2, [r3, #8]
      break;
 8001fa2:	e04e      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f000 f945 	bl	8002242 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fc6:	609a      	str	r2, [r3, #8]
      break;
 8001fc8:	e03b      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f000 f8bc 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2150      	movs	r1, #80	; 0x50
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f913 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 8001fe8:	e02b      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f000 f8da 	bl	80021b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2160      	movs	r1, #96	; 0x60
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f903 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 8002008:	e01b      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	461a      	mov	r2, r3
 8002018:	f000 f89c 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f8f3 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 8002028:	e00b      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f000 f8ea 	bl	800220e <TIM_ITRx_SetConfig>
        break;
 800203a:	e002      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800203c:	bf00      	nop
 800203e:	e000      	b.n	8002042 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002040:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a25      	ldr	r2, [pc, #148]	; (800214c <TIM_Base_SetConfig+0xa8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d007      	beq.n	80020cc <TIM_Base_SetConfig+0x28>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0x28>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a22      	ldr	r2, [pc, #136]	; (8002150 <TIM_Base_SetConfig+0xac>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d108      	bne.n	80020de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1a      	ldr	r2, [pc, #104]	; (800214c <TIM_Base_SetConfig+0xa8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <TIM_Base_SetConfig+0x52>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d003      	beq.n	80020f6 <TIM_Base_SetConfig+0x52>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a17      	ldr	r2, [pc, #92]	; (8002150 <TIM_Base_SetConfig+0xac>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d108      	bne.n	8002108 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <TIM_Base_SetConfig+0xa8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d103      	bne.n	800213c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	615a      	str	r2, [r3, #20]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40012c00 	.word	0x40012c00
 8002150:	40000400 	.word	0x40000400

08002154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f023 0201 	bic.w	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 030a 	bic.w	r3, r3, #10
 8002190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f023 0210 	bic.w	r2, r3, #16
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	031b      	lsls	r3, r3, #12
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	621a      	str	r2, [r3, #32]
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	f043 0307 	orr.w	r3, r3, #7
 8002230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002242:	b480      	push	{r7}
 8002244:	b087      	sub	sp, #28
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	021a      	lsls	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	431a      	orrs	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4313      	orrs	r3, r2
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	609a      	str	r2, [r3, #8]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002294:	2302      	movs	r3, #2
 8002296:	e041      	b.n	800231c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d009      	beq.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e4:	d004      	beq.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d10c      	bne.n	800230a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40012c00 	.word	0x40012c00
 800232c:	40000400 	.word	0x40000400

08002330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e03f      	b.n	80023e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fb64 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fc25 	bl	8002be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08a      	sub	sp, #40	; 0x28
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d17c      	bne.n	8002508 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UART_Transmit+0x2c>
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e075      	b.n	800250a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_UART_Transmit+0x3e>
 8002428:	2302      	movs	r3, #2
 800242a:	e06e      	b.n	800250a <HAL_UART_Transmit+0x11c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002442:	f7fe fc15 	bl	8000c70 <HAL_GetTick>
 8002446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245c:	d108      	bne.n	8002470 <HAL_UART_Transmit+0x82>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e003      	b.n	8002478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002480:	e02a      	b.n	80024d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fa11 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e036      	b.n	800250a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3302      	adds	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	e007      	b.n	80024ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	3301      	adds	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1cf      	bne.n	8002482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f9e1 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e006      	b.n	800250a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3720      	adds	r7, #32
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10d      	bne.n	8002566 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_UART_IRQHandler+0x52>
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa99 	bl	8002a96 <UART_Receive_IT>
      return;
 8002564:	e17b      	b.n	800285e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80b1 	beq.w	80026d0 <HAL_UART_IRQHandler+0x1bc>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_UART_IRQHandler+0x70>
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80a6 	beq.w	80026d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_UART_IRQHandler+0x90>
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_UART_IRQHandler+0xb0>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f043 0202 	orr.w	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_UART_IRQHandler+0xd0>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f043 0204 	orr.w	r2, r3, #4
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00f      	beq.n	800260e <HAL_UART_IRQHandler+0xfa>
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <HAL_UART_IRQHandler+0xee>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f043 0208 	orr.w	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 811e 	beq.w	8002854 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_UART_IRQHandler+0x11e>
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fa32 	bl	8002a96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <HAL_UART_IRQHandler+0x146>
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d031      	beq.n	80026be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f974 	bl	8002948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d023      	beq.n	80026b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	2b00      	cmp	r3, #0
 8002684:	d013      	beq.n	80026ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	4a76      	ldr	r2, [pc, #472]	; (8002864 <HAL_UART_IRQHandler+0x350>)
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fc3e 	bl	8000f14 <HAL_DMA_Abort_IT>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026a8:	4610      	mov	r0, r2
 80026aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ac:	e00e      	b.n	80026cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8ec 	bl	800288c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b4:	e00a      	b.n	80026cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8e8 	bl	800288c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026bc:	e006      	b.n	80026cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8e4 	bl	800288c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026ca:	e0c3      	b.n	8002854 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	bf00      	nop
    return;
 80026ce:	e0c1      	b.n	8002854 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f040 80a1 	bne.w	800281c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 809b 	beq.w	800281c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8095 	beq.w	800281c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d04e      	beq.n	80027b4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002720:	8a3b      	ldrh	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8098 	beq.w	8002858 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800272c:	8a3a      	ldrh	r2, [r7, #16]
 800272e:	429a      	cmp	r2, r3
 8002730:	f080 8092 	bcs.w	8002858 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8a3a      	ldrh	r2, [r7, #16]
 8002738:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b20      	cmp	r3, #32
 8002742:	d02b      	beq.n	800279c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002752:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002772:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0210 	bic.w	r2, r2, #16
 8002790:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fb81 	bl	8000e9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f876 	bl	800289e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80027b2:	e051      	b.n	8002858 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d047      	beq.n	800285c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80027cc:	8a7b      	ldrh	r3, [r7, #18]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d044      	beq.n	800285c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027e0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0210 	bic.w	r2, r2, #16
 800280e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002810:	8a7b      	ldrh	r3, [r7, #18]
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f842 	bl	800289e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800281a:	e01f      	b.n	800285c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_UART_IRQHandler+0x324>
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8c9 	bl	80029c8 <UART_Transmit_IT>
    return;
 8002836:	e012      	b.n	800285e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <HAL_UART_IRQHandler+0x34a>
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f90a 	bl	8002a66 <UART_EndTransmit_IT>
    return;
 8002852:	e004      	b.n	800285e <HAL_UART_IRQHandler+0x34a>
    return;
 8002854:	bf00      	nop
 8002856:	e002      	b.n	800285e <HAL_UART_IRQHandler+0x34a>
      return;
 8002858:	bf00      	nop
 800285a:	e000      	b.n	800285e <HAL_UART_IRQHandler+0x34a>
      return;
 800285c:	bf00      	nop
  }
}
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	080029a1 	.word	0x080029a1

08002868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c4:	e02c      	b.n	8002920 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d028      	beq.n	8002920 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028d4:	f7fe f9cc 	bl	8000c70 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d21d      	bcs.n	8002920 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e00f      	b.n	8002940 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	429a      	cmp	r2, r3
 800293c:	d0c3      	beq.n	80028c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800295e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0210 	bic.w	r2, r2, #16
 8002986:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff ff66 	bl	800288c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b21      	cmp	r3, #33	; 0x21
 80029da:	d13e      	bne.n	8002a5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e4:	d114      	bne.n	8002a10 <UART_Transmit_IT+0x48>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d110      	bne.n	8002a10 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	1c9a      	adds	r2, r3, #2
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	621a      	str	r2, [r3, #32]
 8002a0e:	e008      	b.n	8002a22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	1c59      	adds	r1, r3, #1
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6211      	str	r1, [r2, #32]
 8002a1a:	781a      	ldrb	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
  }
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff feee 	bl	8002868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b22      	cmp	r3, #34	; 0x22
 8002aa8:	f040 8099 	bne.w	8002bde <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab4:	d117      	bne.n	8002ae6 <UART_Receive_IT+0x50>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d113      	bne.n	8002ae6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	1c9a      	adds	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae4:	e026      	b.n	8002b34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af8:	d007      	beq.n	8002b0a <UART_Receive_IT+0x74>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <UART_Receive_IT+0x82>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e008      	b.n	8002b2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4619      	mov	r1, r3
 8002b42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d148      	bne.n	8002bda <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0220 	bic.w	r2, r2, #32
 8002b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d123      	bne.n	8002bd0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0210 	bic.w	r2, r2, #16
 8002b9c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d10a      	bne.n	8002bc2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff fe68 	bl	800289e <HAL_UARTEx_RxEventCallback>
 8002bce:	e002      	b.n	8002bd6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fe52 	bl	800287a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e002      	b.n	8002be0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002bde:	2302      	movs	r3, #2
  }
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c22:	f023 030c 	bic.w	r3, r3, #12
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2c      	ldr	r2, [pc, #176]	; (8002cfc <UART_SetConfig+0x114>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d103      	bne.n	8002c58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c50:	f7fe ff6a 	bl	8001b28 <HAL_RCC_GetPCLK2Freq>
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	e002      	b.n	8002c5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c58:	f7fe ff52 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009a      	lsls	r2, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <UART_SetConfig+0x118>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	0119      	lsls	r1, r3, #4
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009a      	lsls	r2, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <UART_SetConfig+0x118>)
 8002c96:	fba3 0302 	umull	r0, r3, r3, r2
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2064      	movs	r0, #100	; 0x64
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	3332      	adds	r3, #50	; 0x32
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <UART_SetConfig+0x118>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb4:	4419      	add	r1, r3
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <UART_SetConfig+0x118>)
 8002cce:	fba3 0302 	umull	r0, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2064      	movs	r0, #100	; 0x64
 8002cd6:	fb00 f303 	mul.w	r3, r0, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	3332      	adds	r3, #50	; 0x32
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <UART_SetConfig+0x118>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	f003 020f 	and.w	r2, r3, #15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	51eb851f 	.word	0x51eb851f

08002d04 <__libc_init_array>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	2600      	movs	r6, #0
 8002d08:	4d0c      	ldr	r5, [pc, #48]	; (8002d3c <__libc_init_array+0x38>)
 8002d0a:	4c0d      	ldr	r4, [pc, #52]	; (8002d40 <__libc_init_array+0x3c>)
 8002d0c:	1b64      	subs	r4, r4, r5
 8002d0e:	10a4      	asrs	r4, r4, #2
 8002d10:	42a6      	cmp	r6, r4
 8002d12:	d109      	bne.n	8002d28 <__libc_init_array+0x24>
 8002d14:	f000 f822 	bl	8002d5c <_init>
 8002d18:	2600      	movs	r6, #0
 8002d1a:	4d0a      	ldr	r5, [pc, #40]	; (8002d44 <__libc_init_array+0x40>)
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	; (8002d48 <__libc_init_array+0x44>)
 8002d1e:	1b64      	subs	r4, r4, r5
 8002d20:	10a4      	asrs	r4, r4, #2
 8002d22:	42a6      	cmp	r6, r4
 8002d24:	d105      	bne.n	8002d32 <__libc_init_array+0x2e>
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2c:	4798      	blx	r3
 8002d2e:	3601      	adds	r6, #1
 8002d30:	e7ee      	b.n	8002d10 <__libc_init_array+0xc>
 8002d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d36:	4798      	blx	r3
 8002d38:	3601      	adds	r6, #1
 8002d3a:	e7f2      	b.n	8002d22 <__libc_init_array+0x1e>
 8002d3c:	08002d9c 	.word	0x08002d9c
 8002d40:	08002d9c 	.word	0x08002d9c
 8002d44:	08002d9c 	.word	0x08002d9c
 8002d48:	08002da0 	.word	0x08002da0

08002d4c <memset>:
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4402      	add	r2, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d100      	bne.n	8002d56 <memset+0xa>
 8002d54:	4770      	bx	lr
 8002d56:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5a:	e7f9      	b.n	8002d50 <memset+0x4>

08002d5c <_init>:
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	bf00      	nop
 8002d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d62:	bc08      	pop	{r3}
 8002d64:	469e      	mov	lr, r3
 8002d66:	4770      	bx	lr

08002d68 <_fini>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	bf00      	nop
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr
