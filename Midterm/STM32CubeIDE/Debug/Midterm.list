
Midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002110  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800221c  0800221c  0001221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800223c  0800223c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800223c  0800223c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800223c  0800223c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000010  08002254  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002254  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009582  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b72  00000000  00000000  000295bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016cfe  00000000  00000000  0002bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c346  00000000  00000000  0004285e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000820df  00000000  00000000  0004eba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000d0c83  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000920  00000000  00000000  000d0cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002808  00000000  00000000  000d15f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002204 	.word	0x08002204

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002204 	.word	0x08002204

0800014c <fsm_for_input_processing>:
#include "global.h"

enum ButtonState { BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND };
enum ButtonState buttonState[NO_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};

void fsm_for_input_processing ( void ){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e09e      	b.n	8000296 <fsm_for_input_processing+0x14a>
		switch ( buttonState[i]){
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a53      	ldr	r2, [pc, #332]	; (80002a8 <fsm_for_input_processing+0x15c>)
 800015c:	5cd3      	ldrb	r3, [r2, r3]
 800015e:	2b02      	cmp	r3, #2
 8000160:	d06d      	beq.n	800023e <fsm_for_input_processing+0xf2>
 8000162:	2b02      	cmp	r3, #2
 8000164:	f300 8091 	bgt.w	800028a <fsm_for_input_processing+0x13e>
 8000168:	2b00      	cmp	r3, #0
 800016a:	d002      	beq.n	8000172 <fsm_for_input_processing+0x26>
 800016c:	2b01      	cmp	r3, #1
 800016e:	d048      	beq.n	8000202 <fsm_for_input_processing+0xb6>
				//pressed3sec = 0;
				break;
			}
			break;
		default:
			break;
 8000170:	e08b      	b.n	800028a <fsm_for_input_processing+0x13e>
			if( is_button_pressed(i)){
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	4618      	mov	r0, r3
 8000176:	f000 f937 	bl	80003e8 <is_button_pressed>
 800017a:	4603      	mov	r3, r0
 800017c:	2b00      	cmp	r3, #0
 800017e:	d03c      	beq.n	80001fa <fsm_for_input_processing+0xae>
				buttonState [i] = BUTTON_PRESSED;
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	4a49      	ldr	r2, [pc, #292]	; (80002a8 <fsm_for_input_processing+0x15c>)
 8000184:	2101      	movs	r1, #1
 8000186:	54d1      	strb	r1, [r2, r3]
				switch (i){
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	2b02      	cmp	r3, #2
 800018c:	d021      	beq.n	80001d2 <fsm_for_input_processing+0x86>
 800018e:	2b02      	cmp	r3, #2
 8000190:	dc35      	bgt.n	80001fe <fsm_for_input_processing+0xb2>
 8000192:	2b00      	cmp	r3, #0
 8000194:	d002      	beq.n	800019c <fsm_for_input_processing+0x50>
 8000196:	2b01      	cmp	r3, #1
 8000198:	d007      	beq.n	80001aa <fsm_for_input_processing+0x5e>
					break;
 800019a:	e030      	b.n	80001fe <fsm_for_input_processing+0xb2>
					initState = 0;
 800019c:	4b43      	ldr	r3, [pc, #268]	; (80002ac <fsm_for_input_processing+0x160>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
					counter = 0;
 80001a2:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
					break;
 80001a8:	e02a      	b.n	8000200 <fsm_for_input_processing+0xb4>
					buttonpressed = 1;
 80001aa:	4b42      	ldr	r3, [pc, #264]	; (80002b4 <fsm_for_input_processing+0x168>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	601a      	str	r2, [r3, #0]
					initState = 1;
 80001b0:	4b3e      	ldr	r3, [pc, #248]	; (80002ac <fsm_for_input_processing+0x160>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	601a      	str	r2, [r3, #0]
					if (counter >= 9) counter = 0;
 80001b6:	4b3e      	ldr	r3, [pc, #248]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b08      	cmp	r3, #8
 80001bc:	dd03      	ble.n	80001c6 <fsm_for_input_processing+0x7a>
 80001be:	4b3c      	ldr	r3, [pc, #240]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
					break;
 80001c4:	e01c      	b.n	8000200 <fsm_for_input_processing+0xb4>
					else counter++;
 80001c6:	4b3a      	ldr	r3, [pc, #232]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	3301      	adds	r3, #1
 80001cc:	4a38      	ldr	r2, [pc, #224]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001ce:	6013      	str	r3, [r2, #0]
					break;
 80001d0:	e016      	b.n	8000200 <fsm_for_input_processing+0xb4>
					buttonpressed = 1;
 80001d2:	4b38      	ldr	r3, [pc, #224]	; (80002b4 <fsm_for_input_processing+0x168>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	601a      	str	r2, [r3, #0]
					initState = 1;
 80001d8:	4b34      	ldr	r3, [pc, #208]	; (80002ac <fsm_for_input_processing+0x160>)
 80001da:	2201      	movs	r2, #1
 80001dc:	601a      	str	r2, [r3, #0]
					if (counter <= 0) counter = 9;
 80001de:	4b34      	ldr	r3, [pc, #208]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	dc03      	bgt.n	80001ee <fsm_for_input_processing+0xa2>
 80001e6:	4b32      	ldr	r3, [pc, #200]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001e8:	2209      	movs	r2, #9
 80001ea:	601a      	str	r2, [r3, #0]
					break;
 80001ec:	e008      	b.n	8000200 <fsm_for_input_processing+0xb4>
					else counter--;
 80001ee:	4b30      	ldr	r3, [pc, #192]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	4a2e      	ldr	r2, [pc, #184]	; (80002b0 <fsm_for_input_processing+0x164>)
 80001f6:	6013      	str	r3, [r2, #0]
					break;
 80001f8:	e002      	b.n	8000200 <fsm_for_input_processing+0xb4>
			}
 80001fa:	bf00      	nop
 80001fc:	e048      	b.n	8000290 <fsm_for_input_processing+0x144>
					break;
 80001fe:	bf00      	nop
			break ;
 8000200:	e046      	b.n	8000290 <fsm_for_input_processing+0x144>
			if (!is_button_pressed(i)){
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f8ef 	bl	80003e8 <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d10a      	bne.n	8000226 <fsm_for_input_processing+0xda>
				buttonState[i] = BUTTON_RELEASED;
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <fsm_for_input_processing+0x15c>)
 8000214:	2100      	movs	r1, #0
 8000216:	54d1      	strb	r1, [r2, r3]
				buttonpressed = 0;
 8000218:	4b26      	ldr	r3, [pc, #152]	; (80002b4 <fsm_for_input_processing+0x168>)
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
				pressed3sec = 0;
 800021e:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <fsm_for_input_processing+0x16c>)
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
			break;
 8000224:	e033      	b.n	800028e <fsm_for_input_processing+0x142>
				if( is_button_pressed_1s (i)){
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f8f7 	bl	800041c <is_button_pressed_1s>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d02c      	beq.n	800028e <fsm_for_input_processing+0x142>
					buttonState [i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	4a1c      	ldr	r2, [pc, #112]	; (80002a8 <fsm_for_input_processing+0x15c>)
 8000238:	2102      	movs	r1, #2
 800023a:	54d1      	strb	r1, [r2, r3]
			break;
 800023c:	e027      	b.n	800028e <fsm_for_input_processing+0x142>
			if (!is_button_pressed(i)){
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f8d1 	bl	80003e8 <is_button_pressed>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d109      	bne.n	8000260 <fsm_for_input_processing+0x114>
				buttonState [i] = BUTTON_RELEASED;
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <fsm_for_input_processing+0x15c>)
 8000250:	2100      	movs	r1, #0
 8000252:	54d1      	strb	r1, [r2, r3]
				buttonpressed = 0;
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <fsm_for_input_processing+0x168>)
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
				pressed3sec = 0;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <fsm_for_input_processing+0x16c>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
			switch (i){
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d009      	beq.n	800027a <fsm_for_input_processing+0x12e>
 8000266:	2b02      	cmp	r3, #2
 8000268:	dc0b      	bgt.n	8000282 <fsm_for_input_processing+0x136>
 800026a:	2b00      	cmp	r3, #0
 800026c:	d00b      	beq.n	8000286 <fsm_for_input_processing+0x13a>
 800026e:	2b01      	cmp	r3, #1
 8000270:	d107      	bne.n	8000282 <fsm_for_input_processing+0x136>
				pressed3sec = 1;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <fsm_for_input_processing+0x16c>)
 8000274:	2201      	movs	r2, #1
 8000276:	601a      	str	r2, [r3, #0]
				break;
 8000278:	e006      	b.n	8000288 <fsm_for_input_processing+0x13c>
				pressed3sec = 2;
 800027a:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <fsm_for_input_processing+0x16c>)
 800027c:	2202      	movs	r2, #2
 800027e:	601a      	str	r2, [r3, #0]
				break;
 8000280:	e002      	b.n	8000288 <fsm_for_input_processing+0x13c>
				break;
 8000282:	bf00      	nop
 8000284:	e004      	b.n	8000290 <fsm_for_input_processing+0x144>
				break;
 8000286:	bf00      	nop
			break;
 8000288:	e002      	b.n	8000290 <fsm_for_input_processing+0x144>
			break;
 800028a:	bf00      	nop
 800028c:	e000      	b.n	8000290 <fsm_for_input_processing+0x144>
			break;
 800028e:	bf00      	nop
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	3301      	adds	r3, #1
 8000294:	71fb      	strb	r3, [r7, #7]
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b02      	cmp	r3, #2
 800029a:	f67f af5d 	bls.w	8000158 <fsm_for_input_processing+0xc>
		}
	}
}
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000003c 	.word	0x2000003c
 80002ac:	20000030 	.word	0x20000030
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	20000038 	.word	0x20000038
 80002b8:	20000034 	.word	0x20000034

080002bc <button_reading>:
static uint8_t flagForButtonPress1s [ NO_OF_BUTTONS ];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s [ NO_OF_BUTTONS ];

void button_reading ( void ){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
	// Repeat for 3 buttons
	for ( unsigned int i = 0; i < NO_OF_BUTTONS ; i++){
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e07b      	b.n	80003c0 <button_reading+0x104>
		// Begin debouncing
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 80002c8:	4a41      	ldr	r2, [pc, #260]	; (80003d0 <button_reading+0x114>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	7819      	ldrb	r1, [r3, #0]
 80002d0:	4a40      	ldr	r2, [pc, #256]	; (80003d4 <button_reading+0x118>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	460a      	mov	r2, r1
 80002d8:	701a      	strb	r2, [r3, #0]
		// According to i, I will read from appropriated pin .
		switch (i){
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b02      	cmp	r3, #2
 80002de:	d023      	beq.n	8000328 <button_reading+0x6c>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	d82d      	bhi.n	8000342 <button_reading+0x86>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d003      	beq.n	80002f4 <button_reading+0x38>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d00d      	beq.n	800030e <button_reading+0x52>
			break ;
		case 2:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_2_GPIO_Port , BUTTON_2_Pin );
			break ;
		default :
			break ;
 80002f2:	e026      	b.n	8000342 <button_reading+0x86>
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin ( BUTTON_0_GPIO_Port , BUTTON_0_Pin );
 80002f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f8:	4837      	ldr	r0, [pc, #220]	; (80003d8 <button_reading+0x11c>)
 80002fa:	f000 ff43 	bl	8001184 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	4619      	mov	r1, r3
 8000302:	4a33      	ldr	r2, [pc, #204]	; (80003d0 <button_reading+0x114>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4413      	add	r3, r2
 8000308:	460a      	mov	r2, r1
 800030a:	701a      	strb	r2, [r3, #0]
			break ;
 800030c:	e01a      	b.n	8000344 <button_reading+0x88>
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_1_GPIO_Port , BUTTON_1_Pin );
 800030e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000312:	4831      	ldr	r0, [pc, #196]	; (80003d8 <button_reading+0x11c>)
 8000314:	f000 ff36 	bl	8001184 <HAL_GPIO_ReadPin>
 8000318:	4603      	mov	r3, r0
 800031a:	4619      	mov	r1, r3
 800031c:	4a2c      	ldr	r2, [pc, #176]	; (80003d0 <button_reading+0x114>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	460a      	mov	r2, r1
 8000324:	701a      	strb	r2, [r3, #0]
			break ;
 8000326:	e00d      	b.n	8000344 <button_reading+0x88>
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_2_GPIO_Port , BUTTON_2_Pin );
 8000328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800032c:	482a      	ldr	r0, [pc, #168]	; (80003d8 <button_reading+0x11c>)
 800032e:	f000 ff29 	bl	8001184 <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	4619      	mov	r1, r3
 8000336:	4a26      	ldr	r2, [pc, #152]	; (80003d0 <button_reading+0x114>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4413      	add	r3, r2
 800033c:	460a      	mov	r2, r1
 800033e:	701a      	strb	r2, [r3, #0]
			break ;
 8000340:	e000      	b.n	8000344 <button_reading+0x88>
			break ;
 8000342:	bf00      	nop
		}
		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i]){
 8000344:	4a22      	ldr	r2, [pc, #136]	; (80003d0 <button_reading+0x114>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4921      	ldr	r1, [pc, #132]	; (80003d4 <button_reading+0x118>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	440b      	add	r3, r1
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	429a      	cmp	r2, r3
 8000356:	d130      	bne.n	80003ba <button_reading+0xfe>
			buttonBuffer [i] = debounceButtonBuffer1 [i];
 8000358:	4a1d      	ldr	r2, [pc, #116]	; (80003d0 <button_reading+0x114>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	7819      	ldrb	r1, [r3, #0]
 8000360:	4a1e      	ldr	r2, [pc, #120]	; (80003dc <button_reading+0x120>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4413      	add	r3, r2
 8000366:	460a      	mov	r2, r1
 8000368:	701a      	strb	r2, [r3, #0]
			// This section using for pressed more than 1s, but in this exercise it is ignored
			if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 800036a:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <button_reading+0x120>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4413      	add	r3, r2
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d117      	bne.n	80003a6 <button_reading+0xea>
				if( counterForButtonPress1s [i] < DURATION_FOR_AUTO_INCREASING ){
 8000376:	4a1a      	ldr	r2, [pc, #104]	; (80003e0 <button_reading+0x124>)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800037e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000382:	d20a      	bcs.n	800039a <button_reading+0xde>
					counterForButtonPress1s [i]++;
 8000384:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <button_reading+0x124>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800038c:	3301      	adds	r3, #1
 800038e:	b299      	uxth	r1, r3
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <button_reading+0x124>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000398:	e00f      	b.n	80003ba <button_reading+0xfe>
				}
				else {
					flagForButtonPress1s [i] = 1;
 800039a:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <button_reading+0x128>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	2201      	movs	r2, #1
 80003a2:	701a      	strb	r2, [r3, #0]
 80003a4:	e009      	b.n	80003ba <button_reading+0xfe>
				}
			}
			else {
				counterForButtonPress1s [i] = 0;
 80003a6:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <button_reading+0x124>)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2100      	movs	r1, #0
 80003ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s [i] = 0;
 80003b0:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <button_reading+0x128>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4413      	add	r3, r2
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
	for ( unsigned int i = 0; i < NO_OF_BUTTONS ; i++){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3301      	adds	r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	d980      	bls.n	80002c8 <button_reading+0xc>
			}
		}
	}
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000044 	.word	0x20000044
 80003d4:	20000048 	.word	0x20000048
 80003d8:	40010c00 	.word	0x40010c00
 80003dc:	20000040 	.word	0x20000040
 80003e0:	20000050 	.word	0x20000050
 80003e4:	2000004c 	.word	0x2000004c

080003e8 <is_button_pressed>:

unsigned char is_button_pressed ( uint8_t index ){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0;
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d901      	bls.n	80003fc <is_button_pressed+0x14>
 80003f8:	2300      	movs	r3, #0
 80003fa:	e007      	b.n	800040c <is_button_pressed+0x24>
	return (buttonBuffer [index] == BUTTON_IS_PRESSED);
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4a06      	ldr	r2, [pc, #24]	; (8000418 <is_button_pressed+0x30>)
 8000400:	5cd3      	ldrb	r3, [r2, r3]
 8000402:	2b00      	cmp	r3, #0
 8000404:	bf0c      	ite	eq
 8000406:	2301      	moveq	r3, #1
 8000408:	2300      	movne	r3, #0
 800040a:	b2db      	uxtb	r3, r3
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000040 	.word	0x20000040

0800041c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s ( unsigned char index ){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0xff;
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d901      	bls.n	8000430 <is_button_pressed_1s+0x14>
 800042c:	23ff      	movs	r3, #255	; 0xff
 800042e:	e007      	b.n	8000440 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s [index] == 1);
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	4a06      	ldr	r2, [pc, #24]	; (800044c <is_button_pressed_1s+0x30>)
 8000434:	5cd3      	ldrb	r3, [r2, r3]
 8000436:	2b01      	cmp	r3, #1
 8000438:	bf0c      	ite	eq
 800043a:	2301      	moveq	r3, #1
 800043c:	2300      	movne	r3, #0
 800043e:	b2db      	uxtb	r3, r3
}
 8000440:	4618      	mov	r0, r3
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	2000004c 	.word	0x2000004c

08000450 <display7SEG_1>:
		default:
			break;
	}
}*/

void display7SEG_1 ( int num ){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b09      	cmp	r3, #9
 800045c:	f200 8094 	bhi.w	8000588 <display7SEG_1+0x138>
 8000460:	a201      	add	r2, pc, #4	; (adr r2, 8000468 <display7SEG_1+0x18>)
 8000462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000466:	bf00      	nop
 8000468:	08000491 	.word	0x08000491
 800046c:	080004ab 	.word	0x080004ab
 8000470:	080004c5 	.word	0x080004c5
 8000474:	080004df 	.word	0x080004df
 8000478:	080004f9 	.word	0x080004f9
 800047c:	08000513 	.word	0x08000513
 8000480:	0800052d 	.word	0x0800052d
 8000484:	08000547 	.word	0x08000547
 8000488:	08000561 	.word	0x08000561
 800048c:	0800056f 	.word	0x0800056f
	switch ( num ){
		case 0:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin, RESET );
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000496:	483f      	ldr	r0, [pc, #252]	; (8000594 <display7SEG_1+0x144>)
 8000498:	f000 fe8b 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_6_Pin, SET );
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004a2:	483c      	ldr	r0, [pc, #240]	; (8000594 <display7SEG_1+0x144>)
 80004a4:	f000 fe85 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 80004a8:	e06f      	b.n	800058a <display7SEG_1+0x13a>
		case 1:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin | LED7_1_6_Pin, SET );
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 41f2 	mov.w	r1, #30976	; 0x7900
 80004b0:	4838      	ldr	r0, [pc, #224]	; (8000594 <display7SEG_1+0x144>)
 80004b2:	f000 fe7e 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_1_Pin | LED7_1_2_Pin, RESET );
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80004bc:	4835      	ldr	r0, [pc, #212]	; (8000594 <display7SEG_1+0x144>)
 80004be:	f000 fe78 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 80004c2:	e062      	b.n	800058a <display7SEG_1+0x13a>
		case 2:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_6_Pin, RESET );
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80004ca:	4832      	ldr	r0, [pc, #200]	; (8000594 <display7SEG_1+0x144>)
 80004cc:	f000 fe71 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_2_Pin | LED7_1_5_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80004d6:	482f      	ldr	r0, [pc, #188]	; (8000594 <display7SEG_1+0x144>)
 80004d8:	f000 fe6b 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 80004dc:	e055      	b.n	800058a <display7SEG_1+0x13a>
		case 3:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_6_Pin, RESET );
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 419e 	mov.w	r1, #20224	; 0x4f00
 80004e4:	482b      	ldr	r0, [pc, #172]	; (8000594 <display7SEG_1+0x144>)
 80004e6:	f000 fe64 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_4_Pin | LED7_1_5_Pin, SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80004f0:	4828      	ldr	r0, [pc, #160]	; (8000594 <display7SEG_1+0x144>)
 80004f2:	f000 fe5e 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 80004f6:	e048      	b.n	800058a <display7SEG_1+0x13a>
		case 4:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_3_Pin | LED7_1_4_Pin, SET );
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80004fe:	4825      	ldr	r0, [pc, #148]	; (8000594 <display7SEG_1+0x144>)
 8000500:	f000 fe57 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
 800050a:	4822      	ldr	r0, [pc, #136]	; (8000594 <display7SEG_1+0x144>)
 800050c:	f000 fe51 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 8000510:	e03b      	b.n	800058a <display7SEG_1+0x13a>
		case 5:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 41da 	mov.w	r1, #27904	; 0x6d00
 8000518:	481e      	ldr	r0, [pc, #120]	; (8000594 <display7SEG_1+0x144>)
 800051a:	f000 fe4a 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_1_Pin | LED7_1_4_Pin, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000524:	481b      	ldr	r0, [pc, #108]	; (8000594 <display7SEG_1+0x144>)
 8000526:	f000 fe44 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 800052a:	e02e      	b.n	800058a <display7SEG_1+0x13a>
		case 6:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8000532:	4818      	ldr	r0, [pc, #96]	; (8000594 <display7SEG_1+0x144>)
 8000534:	f000 fe3d 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_1_Pin, SET );
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053e:	4815      	ldr	r0, [pc, #84]	; (8000594 <display7SEG_1+0x144>)
 8000540:	f000 fe37 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 8000544:	e021      	b.n	800058a <display7SEG_1+0x13a>
		case 7:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin, RESET );
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800054c:	4811      	ldr	r0, [pc, #68]	; (8000594 <display7SEG_1+0x144>)
 800054e:	f000 fe30 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin | LED7_1_6_Pin, SET );
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8000558:	480e      	ldr	r0, [pc, #56]	; (8000594 <display7SEG_1+0x144>)
 800055a:	f000 fe2a 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 800055e:	e014      	b.n	800058a <display7SEG_1+0x13a>
		case 8:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <display7SEG_1+0x144>)
 8000568:	f000 fe23 	bl	80011b2 <HAL_GPIO_WritePin>
		break;
 800056c:	e00d      	b.n	800058a <display7SEG_1+0x13a>
		case 9:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <display7SEG_1+0x144>)
 8000576:	f000 fe1c 	bl	80011b2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_4_Pin, SET );
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <display7SEG_1+0x144>)
 8000582:	f000 fe16 	bl	80011b2 <HAL_GPIO_WritePin>
			break;
 8000586:	e000      	b.n	800058a <display7SEG_1+0x13a>
		default:
			break;
 8000588:	bf00      	nop
	}
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010800 	.word	0x40010800

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fb08 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f82a 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8b0 	bl	8000708 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005a8:	f000 f862 	bl	8000670 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x54>)
 80005ae:	f001 fa69 	bl	8001a84 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setTimer2(100);
  setTimerBlinking(1000);
 80005b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b6:	f000 f9fd 	bl	80009b4 <setTimerBlinking>
  while (1)
  {
	  if (getTimerBlinkingFlag() == 1){
 80005ba:	f000 fa49 	bl	8000a50 <getTimerBlinkingFlag>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d107      	bne.n	80005d4 <main+0x3c>
		  HAL_GPIO_TogglePin(GPIOA, LED_BLINKING_Pin);
 80005c4:	2120      	movs	r1, #32
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <main+0x58>)
 80005c8:	f000 fe0b 	bl	80011e2 <HAL_GPIO_TogglePin>
		  setTimerBlinking(1000);
 80005cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d0:	f000 f9f0 	bl	80009b4 <setTimerBlinking>
		  update7SEG(index7SEG, counter0, counter1);
		  index7SEG++;
		  if( index7SEG >= 2) index7SEG = 0;
		  setTimer2(100);
	  }*/
	  display7SEG_1(counter);
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <main+0x5c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff39 	bl	8000450 <display7SEG_1>
	  fsm_for_input_processing();
 80005de:	f7ff fdb5 	bl	800014c <fsm_for_input_processing>
	  mode_processing();
 80005e2:	f000 f8e5 	bl	80007b0 <mode_processing>
	  pressed3sec_processing();
 80005e6:	f000 f911 	bl	800080c <pressed3sec_processing>
	  if (getTimerBlinkingFlag() == 1){
 80005ea:	e7e6      	b.n	80005ba <main+0x22>
 80005ec:	20000070 	.word	0x20000070
 80005f0:	40010800 	.word	0x40010800
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b090      	sub	sp, #64	; 0x40
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2228      	movs	r2, #40	; 0x28
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fdf4 	bl	80021f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061a:	2302      	movs	r3, #2
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000626:	2300      	movs	r3, #0
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fdf0 	bl	8001214 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800063a:	f000 f8b3 	bl	80007a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f85c 	bl	8001714 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000662:	f000 f89f 	bl	80007a4 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3740      	adds	r7, #64	; 0x40
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_TIM2_Init+0x94>)
 800068e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000692:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_TIM2_Init+0x94>)
 8000696:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800069a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_TIM2_Init+0x94>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_TIM2_Init+0x94>)
 80006a4:	2209      	movs	r2, #9
 80006a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_TIM2_Init+0x94>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_TIM2_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <MX_TIM2_Init+0x94>)
 80006b6:	f001 f995 	bl	80019e4 <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006c0:	f000 f870 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	4619      	mov	r1, r3
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_TIM2_Init+0x94>)
 80006d2:	f001 fb2b 	bl	8001d2c <HAL_TIM_ConfigClockSource>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006dc:	f000 f862 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_TIM2_Init+0x94>)
 80006ee:	f001 fcf3 	bl	80020d8 <HAL_TIMEx_MasterConfigSynchronization>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006f8:	f000 f854 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000070 	.word	0x20000070

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_GPIO_Init+0x90>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <MX_GPIO_Init+0x90>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_GPIO_Init+0x90>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_GPIO_Init+0x90>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_GPIO_Init+0x90>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_GPIO_Init+0x90>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0308 	and.w	r3, r3, #8
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLINKING_Pin|LED7_1_0_Pin|LED7_1_1_Pin|LED7_1_2_Pin
 800074c:	2200      	movs	r2, #0
 800074e:	f647 7120 	movw	r1, #32544	; 0x7f20
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <MX_GPIO_Init+0x94>)
 8000754:	f000 fd2d 	bl	80011b2 <HAL_GPIO_WritePin>
                          |LED7_1_3_Pin|LED7_1_4_Pin|LED7_1_5_Pin|LED7_1_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_BLINKING_Pin LED7_1_0_Pin LED7_1_1_Pin LED7_1_2_Pin
                           LED7_1_3_Pin LED7_1_4_Pin LED7_1_5_Pin LED7_1_6_Pin */
  GPIO_InitStruct.Pin = LED_BLINKING_Pin|LED7_1_0_Pin|LED7_1_1_Pin|LED7_1_2_Pin
 8000758:	f647 7320 	movw	r3, #32544	; 0x7f20
 800075c:	60bb      	str	r3, [r7, #8]
                          |LED7_1_3_Pin|LED7_1_4_Pin|LED7_1_5_Pin|LED7_1_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4619      	mov	r1, r3
 8000770:	480a      	ldr	r0, [pc, #40]	; (800079c <MX_GPIO_Init+0x94>)
 8000772:	f000 fb8d 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000776:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800077a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_GPIO_Init+0x98>)
 800078c:	f000 fb80 	bl	8000e90 <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	40010800 	.word	0x40010800
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <mode_processing>:
#include "global.h"
#include "mode_processing.h"
#include "timer.h"
#include "input_reading.h"

void mode_processing(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	if (buttonpressed == 0){
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <mode_processing+0x50>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d11e      	bne.n	80007fa <mode_processing+0x4a>
		if (initState == 0){
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <mode_processing+0x54>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <mode_processing+0x1e>
			setTimer1(1000);
 80007c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c8:	f000 f90e 	bl	80009e8 <setTimer1>
				else counter--;
				setTimer1(1000);
			}
		}
	}
}
 80007cc:	e015      	b.n	80007fa <mode_processing+0x4a>
			if (getTimer1Flag() == 1){
 80007ce:	f000 f951 	bl	8000a74 <getTimer1Flag>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d110      	bne.n	80007fa <mode_processing+0x4a>
				if (counter <= 0) initState = 0;
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <mode_processing+0x58>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dc03      	bgt.n	80007e8 <mode_processing+0x38>
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <mode_processing+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	e004      	b.n	80007f2 <mode_processing+0x42>
				else counter--;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <mode_processing+0x58>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <mode_processing+0x58>)
 80007f0:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 80007f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f6:	f000 f8f7 	bl	80009e8 <setTimer1>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000038 	.word	0x20000038
 8000804:	20000030 	.word	0x20000030
 8000808:	2000002c 	.word	0x2000002c

0800080c <pressed3sec_processing>:

void pressed3sec_processing(){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	if (is_button_pressed_1s(1) == 0 && is_button_pressed_1s(2) == 0){
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff fe03 	bl	800041c <is_button_pressed_1s>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10a      	bne.n	8000832 <pressed3sec_processing+0x26>
 800081c:	2002      	movs	r0, #2
 800081e:	f7ff fdfd 	bl	800041c <is_button_pressed_1s>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d104      	bne.n	8000832 <pressed3sec_processing+0x26>
		setTimer2(1000);
 8000828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082c:	f000 f8f6 	bl	8000a1c <setTimer2>
				else counter--;
			}
			setTimer2(1000);
		}
	}
}
 8000830:	e02b      	b.n	800088a <pressed3sec_processing+0x7e>
		if (getTimer2Flag() == 1){
 8000832:	f000 f931 	bl	8000a98 <getTimer2Flag>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d126      	bne.n	800088a <pressed3sec_processing+0x7e>
			if (pressed3sec == 1){
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <pressed3sec_processing+0x84>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10d      	bne.n	8000860 <pressed3sec_processing+0x54>
				if (counter >= 9) counter = 0;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <pressed3sec_processing+0x88>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b08      	cmp	r3, #8
 800084a:	dd03      	ble.n	8000854 <pressed3sec_processing+0x48>
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <pressed3sec_processing+0x88>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e016      	b.n	8000882 <pressed3sec_processing+0x76>
				else counter++;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <pressed3sec_processing+0x88>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <pressed3sec_processing+0x88>)
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	e010      	b.n	8000882 <pressed3sec_processing+0x76>
			else if (pressed3sec == 2){
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <pressed3sec_processing+0x84>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b02      	cmp	r3, #2
 8000866:	d10c      	bne.n	8000882 <pressed3sec_processing+0x76>
				if (counter <= 0) counter = 9;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <pressed3sec_processing+0x88>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dc03      	bgt.n	8000878 <pressed3sec_processing+0x6c>
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <pressed3sec_processing+0x88>)
 8000872:	2209      	movs	r2, #9
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	e004      	b.n	8000882 <pressed3sec_processing+0x76>
				else counter--;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <pressed3sec_processing+0x88>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3b01      	subs	r3, #1
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <pressed3sec_processing+0x88>)
 8000880:	6013      	str	r3, [r2, #0]
			setTimer2(1000);
 8000882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000886:	f000 f8c9 	bl	8000a1c <setTimer2>
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000034 	.word	0x20000034
 8000894:	2000002c 	.word	0x2000002c

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x5c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	61d3      	str	r3, [r2, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x60>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_MspInit+0x60>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800090c:	d113      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_TIM_Base_MspInit+0x44>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <HAL_TIM_Base_MspInit+0x44>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_TIM_Base_MspInit+0x44>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	201c      	movs	r0, #28
 800092c:	f000 fa79 	bl	8000e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000930:	201c      	movs	r0, #28
 8000932:	f000 fa92 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 f957 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <TIM2_IRQHandler+0x10>)
 800099a:	f001 f8bf 	bl	8001b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000070 	.word	0x20000070

080009a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <setTimerBlinking>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimerBlinking(int duration){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	timerBlinking_counter = duration / TIME_CYCLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <setTimerBlinking+0x28>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80009c6:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <setTimerBlinking+0x2c>)
 80009c8:	6013      	str	r3, [r2, #0]
	timerBlinking_flag = 0;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <setTimerBlinking+0x30>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000004 	.word	0x20000004
 80009e0:	20000058 	.word	0x20000058
 80009e4:	2000005c 	.word	0x2000005c

080009e8 <setTimer1>:

void setTimer1(int duration){
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIME_CYCLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <setTimer1+0x28>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80009fa:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <setTimer1+0x2c>)
 80009fc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <setTimer1+0x30>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000004 	.word	0x20000004
 8000a14:	20000060 	.word	0x20000060
 8000a18:	20000064 	.word	0x20000064

08000a1c <setTimer2>:

void setTimer2(int duration){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIME_CYCLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <setTimer2+0x28>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <setTimer2+0x2c>)
 8000a30:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <setTimer2+0x30>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000004 	.word	0x20000004
 8000a48:	20000068 	.word	0x20000068
 8000a4c:	2000006c 	.word	0x2000006c

08000a50 <getTimerBlinkingFlag>:

int getTimerBlinkingFlag(){
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	if (timerBlinking_flag == 1){
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <getTimerBlinkingFlag+0x20>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d104      	bne.n	8000a66 <getTimerBlinkingFlag+0x16>
		timerBlinking_flag = 0;
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <getTimerBlinkingFlag+0x20>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		return 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <getTimerBlinkingFlag+0x18>
	}
	return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	2000005c 	.word	0x2000005c

08000a74 <getTimer1Flag>:

int getTimer1Flag(){
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	if (timer1_flag == 1){
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <getTimer1Flag+0x20>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <getTimer1Flag+0x16>
		timer1_flag = 0;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <getTimer1Flag+0x20>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
		return 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <getTimer1Flag+0x18>
	}
	return 0;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000064 	.word	0x20000064

08000a98 <getTimer2Flag>:

int getTimer2Flag(){
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <getTimer2Flag+0x20>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d104      	bne.n	8000aae <getTimer2Flag+0x16>
		timer2_flag = 0;
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <getTimer2Flag+0x20>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
		return 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <getTimer2Flag+0x18>
	}
	return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	2000006c 	.word	0x2000006c

08000abc <timerRun>:

void timerRun(){
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	if (timerBlinking_counter > 0){
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <timerRun+0x6c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dd0b      	ble.n	8000ae0 <timerRun+0x24>
		timerBlinking_counter--;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <timerRun+0x6c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <timerRun+0x6c>)
 8000ad0:	6013      	str	r3, [r2, #0]
		if (timerBlinking_counter <= 0){
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <timerRun+0x6c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	dc02      	bgt.n	8000ae0 <timerRun+0x24>
			timerBlinking_flag = 1;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <timerRun+0x70>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer1_counter > 0){
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <timerRun+0x74>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	dd0b      	ble.n	8000b00 <timerRun+0x44>
		timer1_counter--;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <timerRun+0x74>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <timerRun+0x74>)
 8000af0:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <timerRun+0x74>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dc02      	bgt.n	8000b00 <timerRun+0x44>
			timer1_flag = 1;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <timerRun+0x78>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <timerRun+0x7c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dd0b      	ble.n	8000b20 <timerRun+0x64>
		timer2_counter--;
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <timerRun+0x7c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <timerRun+0x7c>)
 8000b10:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <timerRun+0x7c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	dc02      	bgt.n	8000b20 <timerRun+0x64>
			timer2_flag = 1;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <timerRun+0x80>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	20000058 	.word	0x20000058
 8000b2c:	2000005c 	.word	0x2000005c
 8000b30:	20000060 	.word	0x20000060
 8000b34:	20000064 	.word	0x20000064
 8000b38:	20000068 	.word	0x20000068
 8000b3c:	2000006c 	.word	0x2000006c

08000b40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 ){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b50:	d103      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000b52:	f7ff fbb3 	bl	80002bc <button_reading>
		timerRun();
 8000b56:	f7ff ffb1 	bl	8000abc <timerRun>
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ff0d 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f001 fb0d 	bl	80021ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b92:	f7ff fd01 	bl	8000598 <main>
  bx lr
 8000b96:	4770      	bx	lr
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba0:	08002244 	.word	0x08002244
  ldr r2, =_sbss
 8000ba4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ba8:	200000bc 	.word	0x200000bc

08000bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_2_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_Init+0x28>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_Init+0x28>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f923 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f000 f808 	bl	8000bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff fe64 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x54>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x58>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f93b 	bl	8000e76 <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00e      	b.n	8000c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d80a      	bhi.n	8000c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f903 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_InitTick+0x5c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000000 	.word	0x20000000
 8000c34:	2000000c 	.word	0x2000000c
 8000c38:	20000008 	.word	0x20000008

08000c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x1c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x20>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_IncTick+0x20>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	2000000c 	.word	0x2000000c
 8000c5c:	200000b8 	.word	0x200000b8

08000c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <HAL_GetTick+0x10>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	200000b8 	.word	0x200000b8

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4906      	ldr	r1, [pc, #24]	; (8000d0c <__NVIC_EnableIRQ+0x34>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff90 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff2d 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff42 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff35 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e148      	b.n	8001136 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8137 	bne.w	8001130 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4aa3      	ldr	r2, [pc, #652]	; (8001154 <HAL_GPIO_Init+0x2c4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d05e      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ecc:	4aa1      	ldr	r2, [pc, #644]	; (8001154 <HAL_GPIO_Init+0x2c4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d875      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ed2:	4aa1      	ldr	r2, [pc, #644]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d058      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ed8:	4a9f      	ldr	r2, [pc, #636]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d86f      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ede:	4a9f      	ldr	r2, [pc, #636]	; (800115c <HAL_GPIO_Init+0x2cc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d052      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ee4:	4a9d      	ldr	r2, [pc, #628]	; (800115c <HAL_GPIO_Init+0x2cc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d869      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000eea:	4a9d      	ldr	r2, [pc, #628]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d04c      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ef0:	4a9b      	ldr	r2, [pc, #620]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d863      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ef6:	4a9b      	ldr	r2, [pc, #620]	; (8001164 <HAL_GPIO_Init+0x2d4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d046      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000efc:	4a99      	ldr	r2, [pc, #612]	; (8001164 <HAL_GPIO_Init+0x2d4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d85d      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d82a      	bhi.n	8000f5c <HAL_GPIO_Init+0xcc>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d859      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <HAL_GPIO_Init+0x80>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f8b 	.word	0x08000f8b
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000f77 	.word	0x08000f77
 8000f1c:	08000fb9 	.word	0x08000fb9
 8000f20:	08000fbf 	.word	0x08000fbf
 8000f24:	08000fbf 	.word	0x08000fbf
 8000f28:	08000fbf 	.word	0x08000fbf
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000fbf 	.word	0x08000fbf
 8000f34:	08000fbf 	.word	0x08000fbf
 8000f38:	08000fbf 	.word	0x08000fbf
 8000f3c:	08000fbf 	.word	0x08000fbf
 8000f40:	08000fbf 	.word	0x08000fbf
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000fbf 	.word	0x08000fbf
 8000f4c:	08000fbf 	.word	0x08000fbf
 8000f50:	08000fbf 	.word	0x08000fbf
 8000f54:	08000f6d 	.word	0x08000f6d
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	4a82      	ldr	r2, [pc, #520]	; (8001168 <HAL_GPIO_Init+0x2d8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f62:	e02c      	b.n	8000fbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e029      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	3304      	adds	r3, #4
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e024      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e01f      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	330c      	adds	r3, #12
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e01a      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f92:	2304      	movs	r3, #4
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e013      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	611a      	str	r2, [r3, #16]
          break;
 8000faa:	e009      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fac:	2308      	movs	r3, #8
 8000fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	615a      	str	r2, [r3, #20]
          break;
 8000fb6:	e003      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          break;
 8000fbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d801      	bhi.n	8000fca <HAL_GPIO_Init+0x13a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_Init+0x13e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	; 0xff
 8000fd4:	d802      	bhi.n	8000fdc <HAL_GPIO_Init+0x14c>
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x152>
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	210f      	movs	r1, #15
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	6a39      	ldr	r1, [r7, #32]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8090 	beq.w	8001130 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001010:	4b56      	ldr	r3, [pc, #344]	; (800116c <HAL_GPIO_Init+0x2dc>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a55      	ldr	r2, [pc, #340]	; (800116c <HAL_GPIO_Init+0x2dc>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <HAL_GPIO_Init+0x2dc>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001028:	4a51      	ldr	r2, [pc, #324]	; (8001170 <HAL_GPIO_Init+0x2e0>)
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x2e4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1e0>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2e8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1dc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_GPIO_Init+0x2ec>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1d8>
 8001064:	2302      	movs	r3, #2
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001068:	2303      	movs	r3, #3
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001070:	2300      	movs	r3, #0
 8001072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001082:	493b      	ldr	r1, [pc, #236]	; (8001170 <HAL_GPIO_Init+0x2e0>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4937      	ldr	r1, [pc, #220]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4933      	ldr	r1, [pc, #204]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	492d      	ldr	r1, [pc, #180]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010d2:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	4929      	ldr	r1, [pc, #164]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010dc:	4013      	ands	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	4923      	ldr	r1, [pc, #140]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	491f      	ldr	r1, [pc, #124]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 8001104:	4013      	ands	r3, r2
 8001106:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	4919      	ldr	r1, [pc, #100]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	60cb      	str	r3, [r1, #12]
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	4915      	ldr	r1, [pc, #84]	; (8001180 <HAL_GPIO_Init+0x2f0>)
 800112c:	4013      	ands	r3, r2
 800112e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	3301      	adds	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	fa22 f303 	lsr.w	r3, r2, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	f47f aeaf 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
  }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	372c      	adds	r7, #44	; 0x2c
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	10320000 	.word	0x10320000
 8001158:	10310000 	.word	0x10310000
 800115c:	10220000 	.word	0x10220000
 8001160:	10210000 	.word	0x10210000
 8001164:	10120000 	.word	0x10120000
 8001168:	10110000 	.word	0x10110000
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	40010800 	.word	0x40010800
 8001178:	40010c00 	.word	0x40010c00
 800117c:	40011000 	.word	0x40011000
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
 80011be:	4613      	mov	r3, r2
 80011c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c2:	787b      	ldrb	r3, [r7, #1]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c8:	887a      	ldrh	r2, [r7, #2]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011ce:	e003      	b.n	80011d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	041a      	lsls	r2, r3, #16
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	611a      	str	r2, [r3, #16]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f4:	887a      	ldrh	r2, [r7, #2]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	041a      	lsls	r2, r3, #16
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43d9      	mvns	r1, r3
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	400b      	ands	r3, r1
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	611a      	str	r2, [r3, #16]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e26c      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8087 	beq.w	8001342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b04      	cmp	r3, #4
 800123e:	d00c      	beq.n	800125a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001240:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	d112      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
 800124c:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4b89      	ldr	r3, [pc, #548]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d06c      	beq.n	8001340 <HAL_RCC_OscConfig+0x12c>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d168      	bne.n	8001340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e246      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x76>
 800127c:	4b80      	ldr	r3, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a7f      	ldr	r2, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e02e      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x98>
 8001292:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a77      	ldr	r2, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0xbc>
 80012b6:	4b72      	ldr	r3, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a71      	ldr	r2, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012d0:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6a      	ldr	r2, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a67      	ldr	r2, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fcb6 	bl	8000c60 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fcb2 	bl	8000c60 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1fa      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe4>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fca2 	bl	8000c60 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc9e 	bl	8000c60 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1e6      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x10c>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134e:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1ba      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4939      	ldr	r1, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc57 	bl	8000c60 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc53 	bl	8000c60 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e19b      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc36 	bl	8000c60 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc32 	bl	8000c60 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e17a      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d03a      	beq.n	8001498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d019      	beq.n	800145e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fc16 	bl	8000c60 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fc12 	bl	8000c60 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e15a      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001456:	2001      	movs	r0, #1
 8001458:	f000 faa6 	bl	80019a8 <RCC_Delay>
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fbfc 	bl	8000c60 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146a:	e00f      	b.n	800148c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fbf8 	bl	8000c60 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d908      	bls.n	800148c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e140      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	42420000 	.word	0x42420000
 8001488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b9e      	ldr	r3, [pc, #632]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e9      	bne.n	800146c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a6 	beq.w	80015f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b97      	ldr	r3, [pc, #604]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b94      	ldr	r3, [pc, #592]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a93      	ldr	r2, [pc, #588]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b91      	ldr	r3, [pc, #580]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b8e      	ldr	r3, [pc, #568]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a8a      	ldr	r2, [pc, #552]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fbb9 	bl	8000c60 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fbb5 	bl	8000c60 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0fd      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x4f8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 8001518:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e02d      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x334>
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a75      	ldr	r2, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a72      	ldr	r2, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	e01c      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x356>
 8001550:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a6c      	ldr	r2, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a69      	ldr	r2, [pc, #420]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6213      	str	r3, [r2, #32]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 800156a:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a66      	ldr	r2, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a63      	ldr	r2, [pc, #396]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d015      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb69 	bl	8000c60 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fb65 	bl	8000c60 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0ab      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ee      	beq.n	8001592 <HAL_RCC_OscConfig+0x37e>
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb53 	bl	8000c60 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fb4f 	bl	8000c60 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e095      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d105      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	4b48      	ldr	r3, [pc, #288]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8081 	beq.w	80016fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d061      	beq.n	80016cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d146      	bne.n	800169e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fb23 	bl	8000c60 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fb1f 	bl	8000c60 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e067      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	492d      	ldr	r1, [pc, #180]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a19      	ldr	r1, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	430b      	orrs	r3, r1
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff faf3 	bl	8000c60 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff faef 	bl	8000c60 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e037      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x46a>
 800169c:	e02f      	b.n	80016fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_RCC_OscConfig+0x4fc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fadc 	bl	8000c60 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fad8 	bl	8000c60 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e020      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x498>
 80016ca:	e018      	b.n	80016fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e013      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40007000 	.word	0x40007000
 8001710:	42420060 	.word	0x42420060

08001714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0d0      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d910      	bls.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 0207 	bic.w	r2, r3, #7
 800173e:	4965      	ldr	r1, [pc, #404]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b8      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800177a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d040      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d115      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e07f      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e073      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06b      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4936      	ldr	r1, [pc, #216]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff fa2c 	bl	8000c60 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff fa28 	bl	8000c60 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e053      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d210      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 0207 	bic.w	r2, r3, #7
 800184a:	4922      	ldr	r1, [pc, #136]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e032      	b.n	80018ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a2:	f000 f821 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	5ccb      	ldrb	r3, [r1, r3]
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1cc>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1d0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f98a 	bl	8000bdc <HAL_InitTick>

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	0800222c 	.word	0x0800222c
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000008 	.word	0x20000008

080018e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	b490      	push	{r4, r7}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018f0:	1d3c      	adds	r4, r7, #4
 80018f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018f8:	f240 2301 	movw	r3, #513	; 0x201
 80018fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x40>
 8001922:	2b08      	cmp	r3, #8
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x46>
 8001926:	e02d      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800192a:	623b      	str	r3, [r7, #32]
      break;
 800192c:	e02d      	b.n	800198a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	0c9b      	lsrs	r3, r3, #18
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800193a:	4413      	add	r3, r2
 800193c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001940:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_GetSysClockFreq+0xb4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c5b      	lsrs	r3, r3, #17
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800195a:	4413      	add	r3, r2
 800195c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001966:	fb02 f203 	mul.w	r2, r2, r3
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e004      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	623b      	str	r3, [r7, #32]
      break;
 8001982:	e002      	b.n	800198a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001986:	623b      	str	r3, [r7, #32]
      break;
 8001988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198a:	6a3b      	ldr	r3, [r7, #32]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bc90      	pop	{r4, r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	0800221c 	.word	0x0800221c
 800199c:	40021000 	.word	0x40021000
 80019a0:	007a1200 	.word	0x007a1200
 80019a4:	003d0900 	.word	0x003d0900

080019a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <RCC_Delay+0x34>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <RCC_Delay+0x38>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0a5b      	lsrs	r3, r3, #9
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019c4:	bf00      	nop
  }
  while (Delay --);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1e5a      	subs	r2, r3, #1
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f9      	bne.n	80019c4 <RCC_Delay+0x1c>
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000000 	.word	0x20000000
 80019e0:	10624dd3 	.word	0x10624dd3

080019e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e041      	b.n	8001a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe ff76 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 fa6a 	bl	8001efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d001      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e035      	b.n	8001b08 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <HAL_TIM_Base_Start_IT+0x90>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d009      	beq.n	8001ad2 <HAL_TIM_Base_Start_IT+0x4e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac6:	d004      	beq.n	8001ad2 <HAL_TIM_Base_Start_IT+0x4e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_TIM_Base_Start_IT+0x94>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d111      	bne.n	8001af6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d010      	beq.n	8001b06 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001af4:	e007      	b.n	8001b06 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40012c00 	.word	0x40012c00
 8001b18:	40000400 	.word	0x40000400

08001b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d122      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d11b      	bne.n	8001b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f9b1 	bl	8001ec6 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f9a4 	bl	8001eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f9b3 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0204 	mvn.w	r2, #4
 8001b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f987 	bl	8001ec6 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f97a 	bl	8001eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f989 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0208 	mvn.w	r2, #8
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f95d 	bl	8001ec6 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f950 	bl	8001eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f95f 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0210 	mvn.w	r2, #16
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f933 	bl	8001ec6 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f926 	bl	8001eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f935 	bl	8001ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0201 	mvn.w	r2, #1
 8001c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7fe ff50 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d10e      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d107      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fa67 	bl	800219a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b40      	cmp	r3, #64	; 0x40
 8001ce6:	d107      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8f9 	bl	8001eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b20      	cmp	r3, #32
 8001d04:	d10e      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d107      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0220 	mvn.w	r2, #32
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fa32 	bl	8002188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_TIM_ConfigClockSource+0x18>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e0b3      	b.n	8001eac <HAL_TIM_ConfigClockSource+0x180>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d7c:	d03e      	beq.n	8001dfc <HAL_TIM_ConfigClockSource+0xd0>
 8001d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d82:	f200 8087 	bhi.w	8001e94 <HAL_TIM_ConfigClockSource+0x168>
 8001d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8a:	f000 8085 	beq.w	8001e98 <HAL_TIM_ConfigClockSource+0x16c>
 8001d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d92:	d87f      	bhi.n	8001e94 <HAL_TIM_ConfigClockSource+0x168>
 8001d94:	2b70      	cmp	r3, #112	; 0x70
 8001d96:	d01a      	beq.n	8001dce <HAL_TIM_ConfigClockSource+0xa2>
 8001d98:	2b70      	cmp	r3, #112	; 0x70
 8001d9a:	d87b      	bhi.n	8001e94 <HAL_TIM_ConfigClockSource+0x168>
 8001d9c:	2b60      	cmp	r3, #96	; 0x60
 8001d9e:	d050      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0x116>
 8001da0:	2b60      	cmp	r3, #96	; 0x60
 8001da2:	d877      	bhi.n	8001e94 <HAL_TIM_ConfigClockSource+0x168>
 8001da4:	2b50      	cmp	r3, #80	; 0x50
 8001da6:	d03c      	beq.n	8001e22 <HAL_TIM_ConfigClockSource+0xf6>
 8001da8:	2b50      	cmp	r3, #80	; 0x50
 8001daa:	d873      	bhi.n	8001e94 <HAL_TIM_ConfigClockSource+0x168>
 8001dac:	2b40      	cmp	r3, #64	; 0x40
 8001dae:	d058      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x136>
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	d86f      	bhi.n	8001e94 <HAL_TIM_ConfigClockSource+0x168>
 8001db4:	2b30      	cmp	r3, #48	; 0x30
 8001db6:	d064      	beq.n	8001e82 <HAL_TIM_ConfigClockSource+0x156>
 8001db8:	2b30      	cmp	r3, #48	; 0x30
 8001dba:	d86b      	bhi.n	8001e94 <HAL_TIM_ConfigClockSource+0x168>
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d060      	beq.n	8001e82 <HAL_TIM_ConfigClockSource+0x156>
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d867      	bhi.n	8001e94 <HAL_TIM_ConfigClockSource+0x168>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d05c      	beq.n	8001e82 <HAL_TIM_ConfigClockSource+0x156>
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d05a      	beq.n	8001e82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001dcc:	e062      	b.n	8001e94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6899      	ldr	r1, [r3, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f000 f95c 	bl	800209a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001df0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	609a      	str	r2, [r3, #8]
      break;
 8001dfa:	e04e      	b.n	8001e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6899      	ldr	r1, [r3, #8]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f000 f945 	bl	800209a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e1e:	609a      	str	r2, [r3, #8]
      break;
 8001e20:	e03b      	b.n	8001e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f000 f8bc 	bl	8001fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2150      	movs	r1, #80	; 0x50
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f913 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 8001e40:	e02b      	b.n	8001e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f000 f8da 	bl	8002008 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2160      	movs	r1, #96	; 0x60
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f903 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 8001e60:	e01b      	b.n	8001e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f000 f89c 	bl	8001fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2140      	movs	r1, #64	; 0x40
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f8f3 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 8001e80:	e00b      	b.n	8001e9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	f000 f8ea 	bl	8002066 <TIM_ITRx_SetConfig>
        break;
 8001e92:	e002      	b.n	8001e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e94:	bf00      	nop
 8001e96:	e000      	b.n	8001e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <TIM_Base_SetConfig+0xa8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <TIM_Base_SetConfig+0x28>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d003      	beq.n	8001f24 <TIM_Base_SetConfig+0x28>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <TIM_Base_SetConfig+0xac>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d108      	bne.n	8001f36 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <TIM_Base_SetConfig+0xa8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <TIM_Base_SetConfig+0x52>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d003      	beq.n	8001f4e <TIM_Base_SetConfig+0x52>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <TIM_Base_SetConfig+0xac>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d108      	bne.n	8001f60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <TIM_Base_SetConfig+0xa8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d103      	bne.n	8001f94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	615a      	str	r2, [r3, #20]
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40012c00 	.word	0x40012c00
 8001fa8:	40000400 	.word	0x40000400

08001fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	f023 0201 	bic.w	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f023 030a 	bic.w	r3, r3, #10
 8001fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	621a      	str	r2, [r3, #32]
}
 8001ffe:	bf00      	nop
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f023 0210 	bic.w	r2, r3, #16
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002032:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	031b      	lsls	r3, r3, #12
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	621a      	str	r2, [r3, #32]
}
 800205c:	bf00      	nop
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	f043 0307 	orr.w	r3, r3, #7
 8002088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	609a      	str	r2, [r3, #8]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800209a:	b480      	push	{r7}
 800209c:	b087      	sub	sp, #28
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	021a      	lsls	r2, r3, #8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	431a      	orrs	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	609a      	str	r2, [r3, #8]
}
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e041      	b.n	8002174 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213c:	d004      	beq.n	8002148 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d10c      	bne.n	8002162 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800214e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	4313      	orrs	r3, r2
 8002158:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40012c00 	.word	0x40012c00
 8002184:	40000400 	.word	0x40000400

08002188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <__libc_init_array>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	2600      	movs	r6, #0
 80021b0:	4d0c      	ldr	r5, [pc, #48]	; (80021e4 <__libc_init_array+0x38>)
 80021b2:	4c0d      	ldr	r4, [pc, #52]	; (80021e8 <__libc_init_array+0x3c>)
 80021b4:	1b64      	subs	r4, r4, r5
 80021b6:	10a4      	asrs	r4, r4, #2
 80021b8:	42a6      	cmp	r6, r4
 80021ba:	d109      	bne.n	80021d0 <__libc_init_array+0x24>
 80021bc:	f000 f822 	bl	8002204 <_init>
 80021c0:	2600      	movs	r6, #0
 80021c2:	4d0a      	ldr	r5, [pc, #40]	; (80021ec <__libc_init_array+0x40>)
 80021c4:	4c0a      	ldr	r4, [pc, #40]	; (80021f0 <__libc_init_array+0x44>)
 80021c6:	1b64      	subs	r4, r4, r5
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	42a6      	cmp	r6, r4
 80021cc:	d105      	bne.n	80021da <__libc_init_array+0x2e>
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d4:	4798      	blx	r3
 80021d6:	3601      	adds	r6, #1
 80021d8:	e7ee      	b.n	80021b8 <__libc_init_array+0xc>
 80021da:	f855 3b04 	ldr.w	r3, [r5], #4
 80021de:	4798      	blx	r3
 80021e0:	3601      	adds	r6, #1
 80021e2:	e7f2      	b.n	80021ca <__libc_init_array+0x1e>
 80021e4:	0800223c 	.word	0x0800223c
 80021e8:	0800223c 	.word	0x0800223c
 80021ec:	0800223c 	.word	0x0800223c
 80021f0:	08002240 	.word	0x08002240

080021f4 <memset>:
 80021f4:	4603      	mov	r3, r0
 80021f6:	4402      	add	r2, r0
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d100      	bne.n	80021fe <memset+0xa>
 80021fc:	4770      	bx	lr
 80021fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002202:	e7f9      	b.n	80021f8 <memset+0x4>

08002204 <_init>:
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	bf00      	nop
 8002208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220a:	bc08      	pop	{r3}
 800220c:	469e      	mov	lr, r3
 800220e:	4770      	bx	lr

08002210 <_fini>:
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002212:	bf00      	nop
 8002214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002216:	bc08      	pop	{r3}
 8002218:	469e      	mov	lr, r3
 800221a:	4770      	bx	lr
