
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003d24  08003d24  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d24  08003d24  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000054  08003d80  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08003d80  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbbd  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205a  00000000  00000000  0002bc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0002dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001776a  00000000  00000000  0002e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f22f  00000000  00000000  00046112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086b13  00000000  00000000  00055341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000dbe54  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c10  00000000  00000000  000dbea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034c4  00000000  00000000  000dcab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ce4 	.word	0x08003ce4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08003ce4 	.word	0x08003ce4

0800014c <fsm_for_input_processing>:
#include "software_timer.h"

enum ButtonState { BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND };
enum ButtonState buttonState[NO_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};

void fsm_for_input_processing ( void ){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e0d8      	b.n	800030a <fsm_for_input_processing+0x1be>
		switch ( buttonState[i]){
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a70      	ldr	r2, [pc, #448]	; (800031c <fsm_for_input_processing+0x1d0>)
 800015c:	5cd3      	ldrb	r3, [r2, r3]
 800015e:	2b02      	cmp	r3, #2
 8000160:	f000 80bf 	beq.w	80002e2 <fsm_for_input_processing+0x196>
 8000164:	2b02      	cmp	r3, #2
 8000166:	f300 80c8 	bgt.w	80002fa <fsm_for_input_processing+0x1ae>
 800016a:	2b00      	cmp	r3, #0
 800016c:	d003      	beq.n	8000176 <fsm_for_input_processing+0x2a>
 800016e:	2b01      	cmp	r3, #1
 8000170:	f000 809f 	beq.w	80002b2 <fsm_for_input_processing+0x166>
			if (!is_button_pressed (i)){
				buttonState [i] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000174:	e0c1      	b.n	80002fa <fsm_for_input_processing+0x1ae>
			if( is_button_pressed(i)){
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	4618      	mov	r0, r3
 800017a:	f000 f985 	bl	8000488 <is_button_pressed>
 800017e:	4603      	mov	r3, r0
 8000180:	2b00      	cmp	r3, #0
 8000182:	f000 808e 	beq.w	80002a2 <fsm_for_input_processing+0x156>
				buttonState [i] = BUTTON_PRESSED;
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4a64      	ldr	r2, [pc, #400]	; (800031c <fsm_for_input_processing+0x1d0>)
 800018a:	2101      	movs	r1, #1
 800018c:	54d1      	strb	r1, [r2, r3]
				switch (i){
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b03      	cmp	r3, #3
 8000192:	f200 8088 	bhi.w	80002a6 <fsm_for_input_processing+0x15a>
 8000196:	a201      	add	r2, pc, #4	; (adr r2, 800019c <fsm_for_input_processing+0x50>)
 8000198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019c:	080001ad 	.word	0x080001ad
 80001a0:	080001cb 	.word	0x080001cb
 80001a4:	080001ed 	.word	0x080001ed
 80001a8:	08000243 	.word	0x08000243
					pedestrian = 1;
 80001ac:	4b5c      	ldr	r3, [pc, #368]	; (8000320 <fsm_for_input_processing+0x1d4>)
 80001ae:	2201      	movs	r2, #1
 80001b0:	601a      	str	r2, [r3, #0]
					timeCycle = (timeDurations[0] + timeDurations[1] + timeDurations[2]) * 2;
 80001b2:	4b5c      	ldr	r3, [pc, #368]	; (8000324 <fsm_for_input_processing+0x1d8>)
 80001b4:	681a      	ldr	r2, [r3, #0]
 80001b6:	4b5b      	ldr	r3, [pc, #364]	; (8000324 <fsm_for_input_processing+0x1d8>)
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	441a      	add	r2, r3
 80001bc:	4b59      	ldr	r3, [pc, #356]	; (8000324 <fsm_for_input_processing+0x1d8>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4413      	add	r3, r2
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	4a58      	ldr	r2, [pc, #352]	; (8000328 <fsm_for_input_processing+0x1dc>)
 80001c6:	6013      	str	r3, [r2, #0]
					break;
 80001c8:	e072      	b.n	80002b0 <fsm_for_input_processing+0x164>
					initState = 0;
 80001ca:	4b58      	ldr	r3, [pc, #352]	; (800032c <fsm_for_input_processing+0x1e0>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
					if (mode >= 5) mode = 1;
 80001d0:	4b57      	ldr	r3, [pc, #348]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b04      	cmp	r3, #4
 80001d6:	dd03      	ble.n	80001e0 <fsm_for_input_processing+0x94>
 80001d8:	4b55      	ldr	r3, [pc, #340]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001da:	2201      	movs	r2, #1
 80001dc:	601a      	str	r2, [r3, #0]
					break;
 80001de:	e067      	b.n	80002b0 <fsm_for_input_processing+0x164>
					else mode++;
 80001e0:	4b53      	ldr	r3, [pc, #332]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3301      	adds	r3, #1
 80001e6:	4a52      	ldr	r2, [pc, #328]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001e8:	6013      	str	r3, [r2, #0]
					break;
 80001ea:	e061      	b.n	80002b0 <fsm_for_input_processing+0x164>
					if (mode == 2) {
 80001ec:	4b50      	ldr	r3, [pc, #320]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d110      	bne.n	8000216 <fsm_for_input_processing+0xca>
						setTimer1(10000);
 80001f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80001f8:	f000 fee4 	bl	8000fc4 <setTimer1>
						if (trafficLed0 >= 2) trafficLed0 = 0;
 80001fc:	4b4d      	ldr	r3, [pc, #308]	; (8000334 <fsm_for_input_processing+0x1e8>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b01      	cmp	r3, #1
 8000202:	dd03      	ble.n	800020c <fsm_for_input_processing+0xc0>
 8000204:	4b4b      	ldr	r3, [pc, #300]	; (8000334 <fsm_for_input_processing+0x1e8>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	e004      	b.n	8000216 <fsm_for_input_processing+0xca>
						else trafficLed0++;
 800020c:	4b49      	ldr	r3, [pc, #292]	; (8000334 <fsm_for_input_processing+0x1e8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	4a48      	ldr	r2, [pc, #288]	; (8000334 <fsm_for_input_processing+0x1e8>)
 8000214:	6013      	str	r3, [r2, #0]
					if (mode >= 3 && mode < 6) {
 8000216:	4b46      	ldr	r3, [pc, #280]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b02      	cmp	r3, #2
 800021c:	dd45      	ble.n	80002aa <fsm_for_input_processing+0x15e>
 800021e:	4b44      	ldr	r3, [pc, #272]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b05      	cmp	r3, #5
 8000224:	dc41      	bgt.n	80002aa <fsm_for_input_processing+0x15e>
						if (duration >= 99) duration = 1;
 8000226:	4b44      	ldr	r3, [pc, #272]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b62      	cmp	r3, #98	; 0x62
 800022c:	dd03      	ble.n	8000236 <fsm_for_input_processing+0xea>
 800022e:	4b42      	ldr	r3, [pc, #264]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000230:	2201      	movs	r2, #1
 8000232:	601a      	str	r2, [r3, #0]
					break;
 8000234:	e039      	b.n	80002aa <fsm_for_input_processing+0x15e>
						else duration++;
 8000236:	4b40      	ldr	r3, [pc, #256]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3301      	adds	r3, #1
 800023c:	4a3e      	ldr	r2, [pc, #248]	; (8000338 <fsm_for_input_processing+0x1ec>)
 800023e:	6013      	str	r3, [r2, #0]
					break;
 8000240:	e033      	b.n	80002aa <fsm_for_input_processing+0x15e>
					if (mode == 2) {
 8000242:	4b3b      	ldr	r3, [pc, #236]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d110      	bne.n	800026c <fsm_for_input_processing+0x120>
						setTimer1(10000);
 800024a:	f242 7010 	movw	r0, #10000	; 0x2710
 800024e:	f000 feb9 	bl	8000fc4 <setTimer1>
						if (trafficLed1 >= 2) trafficLed1 = 0;
 8000252:	4b3a      	ldr	r3, [pc, #232]	; (800033c <fsm_for_input_processing+0x1f0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	dd03      	ble.n	8000262 <fsm_for_input_processing+0x116>
 800025a:	4b38      	ldr	r3, [pc, #224]	; (800033c <fsm_for_input_processing+0x1f0>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	e004      	b.n	800026c <fsm_for_input_processing+0x120>
						else trafficLed1++;
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <fsm_for_input_processing+0x1f0>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3301      	adds	r3, #1
 8000268:	4a34      	ldr	r2, [pc, #208]	; (800033c <fsm_for_input_processing+0x1f0>)
 800026a:	6013      	str	r3, [r2, #0]
					if (mode == 3) timeDurations[0] = duration;
 800026c:	4b30      	ldr	r3, [pc, #192]	; (8000330 <fsm_for_input_processing+0x1e4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b03      	cmp	r3, #3
 8000272:	d104      	bne.n	800027e <fsm_for_input_processing+0x132>
 8000274:	4b30      	ldr	r3, [pc, #192]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2a      	ldr	r2, [pc, #168]	; (8000324 <fsm_for_input_processing+0x1d8>)
 800027a:	6013      	str	r3, [r2, #0]
					break;
 800027c:	e017      	b.n	80002ae <fsm_for_input_processing+0x162>
					else if (mode == 4) timeDurations[2] = duration;
 800027e:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b04      	cmp	r3, #4
 8000284:	d104      	bne.n	8000290 <fsm_for_input_processing+0x144>
 8000286:	4b2c      	ldr	r3, [pc, #176]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a26      	ldr	r2, [pc, #152]	; (8000324 <fsm_for_input_processing+0x1d8>)
 800028c:	6093      	str	r3, [r2, #8]
					break;
 800028e:	e00e      	b.n	80002ae <fsm_for_input_processing+0x162>
					else if (mode == 5) timeDurations[1] = duration;
 8000290:	4b27      	ldr	r3, [pc, #156]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b05      	cmp	r3, #5
 8000296:	d10a      	bne.n	80002ae <fsm_for_input_processing+0x162>
 8000298:	4b27      	ldr	r3, [pc, #156]	; (8000338 <fsm_for_input_processing+0x1ec>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a21      	ldr	r2, [pc, #132]	; (8000324 <fsm_for_input_processing+0x1d8>)
 800029e:	6053      	str	r3, [r2, #4]
					break;
 80002a0:	e005      	b.n	80002ae <fsm_for_input_processing+0x162>
			}
 80002a2:	bf00      	nop
 80002a4:	e02e      	b.n	8000304 <fsm_for_input_processing+0x1b8>
					break;
 80002a6:	bf00      	nop
 80002a8:	e02c      	b.n	8000304 <fsm_for_input_processing+0x1b8>
					break;
 80002aa:	bf00      	nop
 80002ac:	e02a      	b.n	8000304 <fsm_for_input_processing+0x1b8>
					break;
 80002ae:	bf00      	nop
			break ;
 80002b0:	e028      	b.n	8000304 <fsm_for_input_processing+0x1b8>
			if (!is_button_pressed(i)){
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f8e7 	bl	8000488 <is_button_pressed>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d104      	bne.n	80002ca <fsm_for_input_processing+0x17e>
				buttonState[i] = BUTTON_RELEASED;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4a16      	ldr	r2, [pc, #88]	; (800031c <fsm_for_input_processing+0x1d0>)
 80002c4:	2100      	movs	r1, #0
 80002c6:	54d1      	strb	r1, [r2, r3]
			break;
 80002c8:	e019      	b.n	80002fe <fsm_for_input_processing+0x1b2>
				if( is_button_pressed_1s (i)){
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f8f5 	bl	80004bc <is_button_pressed_1s>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d012      	beq.n	80002fe <fsm_for_input_processing+0x1b2>
					buttonState [i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a10      	ldr	r2, [pc, #64]	; (800031c <fsm_for_input_processing+0x1d0>)
 80002dc:	2102      	movs	r1, #2
 80002de:	54d1      	strb	r1, [r2, r3]
			break;
 80002e0:	e00d      	b.n	80002fe <fsm_for_input_processing+0x1b2>
			if (!is_button_pressed (i)){
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f8cf 	bl	8000488 <is_button_pressed>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d108      	bne.n	8000302 <fsm_for_input_processing+0x1b6>
				buttonState [i] = BUTTON_RELEASED;
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <fsm_for_input_processing+0x1d0>)
 80002f4:	2100      	movs	r1, #0
 80002f6:	54d1      	strb	r1, [r2, r3]
			break;
 80002f8:	e003      	b.n	8000302 <fsm_for_input_processing+0x1b6>
			break;
 80002fa:	bf00      	nop
 80002fc:	e002      	b.n	8000304 <fsm_for_input_processing+0x1b8>
			break;
 80002fe:	bf00      	nop
 8000300:	e000      	b.n	8000304 <fsm_for_input_processing+0x1b8>
			break;
 8000302:	bf00      	nop
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	3301      	adds	r3, #1
 8000308:	71fb      	strb	r3, [r7, #7]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2b03      	cmp	r3, #3
 800030e:	f67f af23 	bls.w	8000158 <fsm_for_input_processing+0xc>
		}
	}
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000094 	.word	0x20000094
 8000320:	2000008c 	.word	0x2000008c
 8000324:	20000000 	.word	0x20000000
 8000328:	20000090 	.word	0x20000090
 800032c:	20000074 	.word	0x20000074
 8000330:	20000070 	.word	0x20000070
 8000334:	20000078 	.word	0x20000078
 8000338:	20000088 	.word	0x20000088
 800033c:	2000007c 	.word	0x2000007c

08000340 <button_reading>:
static uint8_t flagForButtonPress1s [ NO_OF_BUTTONS ];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s [ NO_OF_BUTTONS ];

void button_reading ( void ){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	// Repeat for 4 buttons
	for (unsigned int i = 0; i < NO_OF_BUTTONS ; i++){
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e085      	b.n	8000458 <button_reading+0x118>
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 800034c:	4a47      	ldr	r2, [pc, #284]	; (800046c <button_reading+0x12c>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4413      	add	r3, r2
 8000352:	7819      	ldrb	r1, [r3, #0]
 8000354:	4a46      	ldr	r2, [pc, #280]	; (8000470 <button_reading+0x130>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	460a      	mov	r2, r1
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d83b      	bhi.n	80003dc <button_reading+0x9c>
 8000364:	a201      	add	r2, pc, #4	; (adr r2, 800036c <button_reading+0x2c>)
 8000366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036a:	bf00      	nop
 800036c:	0800037d 	.word	0x0800037d
 8000370:	08000395 	.word	0x08000395
 8000374:	080003ad 	.word	0x080003ad
 8000378:	080003c5 	.word	0x080003c5
		switch (i){
		case 0:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (B0_GPIO_Port, B0_Pin);
 800037c:	2101      	movs	r1, #1
 800037e:	483d      	ldr	r0, [pc, #244]	; (8000474 <button_reading+0x134>)
 8000380:	f001 fbec 	bl	8001b5c <HAL_GPIO_ReadPin>
 8000384:	4603      	mov	r3, r0
 8000386:	4619      	mov	r1, r3
 8000388:	4a38      	ldr	r2, [pc, #224]	; (800046c <button_reading+0x12c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	460a      	mov	r2, r1
 8000390:	701a      	strb	r2, [r3, #0]
			break ;
 8000392:	e024      	b.n	80003de <button_reading+0x9e>
		case 1:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (A1_GPIO_Port, A1_Pin);
 8000394:	2102      	movs	r1, #2
 8000396:	4837      	ldr	r0, [pc, #220]	; (8000474 <button_reading+0x134>)
 8000398:	f001 fbe0 	bl	8001b5c <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	4619      	mov	r1, r3
 80003a0:	4a32      	ldr	r2, [pc, #200]	; (800046c <button_reading+0x12c>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	460a      	mov	r2, r1
 80003a8:	701a      	strb	r2, [r3, #0]
			break ;
 80003aa:	e018      	b.n	80003de <button_reading+0x9e>
		case 2:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (B3_GPIO_Port , B3_Pin);
 80003ac:	2110      	movs	r1, #16
 80003ae:	4831      	ldr	r0, [pc, #196]	; (8000474 <button_reading+0x134>)
 80003b0:	f001 fbd4 	bl	8001b5c <HAL_GPIO_ReadPin>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4619      	mov	r1, r3
 80003b8:	4a2c      	ldr	r2, [pc, #176]	; (800046c <button_reading+0x12c>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4413      	add	r3, r2
 80003be:	460a      	mov	r2, r1
 80003c0:	701a      	strb	r2, [r3, #0]
			break ;
 80003c2:	e00c      	b.n	80003de <button_reading+0x9e>
		case 3:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (B4_GPIO_Port , B4_Pin);
 80003c4:	2101      	movs	r1, #1
 80003c6:	482c      	ldr	r0, [pc, #176]	; (8000478 <button_reading+0x138>)
 80003c8:	f001 fbc8 	bl	8001b5c <HAL_GPIO_ReadPin>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4619      	mov	r1, r3
 80003d0:	4a26      	ldr	r2, [pc, #152]	; (800046c <button_reading+0x12c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4413      	add	r3, r2
 80003d6:	460a      	mov	r2, r1
 80003d8:	701a      	strb	r2, [r3, #0]
			break ;
 80003da:	e000      	b.n	80003de <button_reading+0x9e>
		default :
			break ;
 80003dc:	bf00      	nop
		}
		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i]){
 80003de:	4a23      	ldr	r2, [pc, #140]	; (800046c <button_reading+0x12c>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4413      	add	r3, r2
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	4922      	ldr	r1, [pc, #136]	; (8000470 <button_reading+0x130>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	440b      	add	r3, r1
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d12f      	bne.n	8000452 <button_reading+0x112>
			buttonBuffer [i] = debounceButtonBuffer1 [i];
 80003f2:	4a1e      	ldr	r2, [pc, #120]	; (800046c <button_reading+0x12c>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4413      	add	r3, r2
 80003f8:	7819      	ldrb	r1, [r3, #0]
 80003fa:	4a20      	ldr	r2, [pc, #128]	; (800047c <button_reading+0x13c>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	460a      	mov	r2, r1
 8000402:	701a      	strb	r2, [r3, #0]
			// if a button is pressed , we start counting
			if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 8000404:	4a1d      	ldr	r2, [pc, #116]	; (800047c <button_reading+0x13c>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d116      	bne.n	800043e <button_reading+0xfe>
				if( counterForButtonPress1s [i] < DURATION_FOR_AUTO_INCREASING ){
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <button_reading+0x140>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000418:	2b63      	cmp	r3, #99	; 0x63
 800041a:	d80a      	bhi.n	8000432 <button_reading+0xf2>
					counterForButtonPress1s [i]++;
 800041c:	4a18      	ldr	r2, [pc, #96]	; (8000480 <button_reading+0x140>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000424:	3301      	adds	r3, #1
 8000426:	b299      	uxth	r1, r3
 8000428:	4a15      	ldr	r2, [pc, #84]	; (8000480 <button_reading+0x140>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000430:	e00f      	b.n	8000452 <button_reading+0x112>
				}
				else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed.
					flagForButtonPress1s [i] = 1;
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <button_reading+0x144>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4413      	add	r3, r2
 8000438:	2201      	movs	r2, #1
 800043a:	701a      	strb	r2, [r3, #0]
 800043c:	e009      	b.n	8000452 <button_reading+0x112>
				}
			}
			else {
				counterForButtonPress1s [i] = 0;
 800043e:	4a10      	ldr	r2, [pc, #64]	; (8000480 <button_reading+0x140>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2100      	movs	r1, #0
 8000444:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s [i] = 0;
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <button_reading+0x144>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	for (unsigned int i = 0; i < NO_OF_BUTTONS ; i++){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3301      	adds	r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b03      	cmp	r3, #3
 800045c:	f67f af76 	bls.w	800034c <button_reading+0xc>
			}
		}
	}
}
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	2000009c 	.word	0x2000009c
 8000470:	200000a0 	.word	0x200000a0
 8000474:	40010800 	.word	0x40010800
 8000478:	40010c00 	.word	0x40010c00
 800047c:	20000098 	.word	0x20000098
 8000480:	200000a8 	.word	0x200000a8
 8000484:	200000a4 	.word	0x200000a4

08000488 <is_button_pressed>:

unsigned char is_button_pressed ( uint8_t index ){
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0;
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d901      	bls.n	800049c <is_button_pressed+0x14>
 8000498:	2300      	movs	r3, #0
 800049a:	e007      	b.n	80004ac <is_button_pressed+0x24>
	return (buttonBuffer [index] == BUTTON_IS_PRESSED);
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <is_button_pressed+0x30>)
 80004a0:	5cd3      	ldrb	r3, [r2, r3]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf0c      	ite	eq
 80004a6:	2301      	moveq	r3, #1
 80004a8:	2300      	movne	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000098 	.word	0x20000098

080004bc <is_button_pressed_1s>:

unsigned char is_button_pressed_1s ( unsigned char index ){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0xff;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d901      	bls.n	80004d0 <is_button_pressed_1s+0x14>
 80004cc:	23ff      	movs	r3, #255	; 0xff
 80004ce:	e007      	b.n	80004e0 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s [index] == 1);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4a06      	ldr	r2, [pc, #24]	; (80004ec <is_button_pressed_1s+0x30>)
 80004d4:	5cd3      	ldrb	r3, [r2, r3]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	bf0c      	ite	eq
 80004da:	2301      	moveq	r3, #1
 80004dc:	2300      	movne	r3, #0
 80004de:	b2db      	uxtb	r3, r3
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200000a4 	.word	0x200000a4

080004f0 <updateTrafficLED>:
#include "main.h"
#include "led_processing.h"



void updateTrafficLED(int trafficLed0, int trafficLed1){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	switch (trafficLed0){
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d021      	beq.n	8000544 <updateTrafficLED+0x54>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b02      	cmp	r3, #2
 8000504:	dc2a      	bgt.n	800055c <updateTrafficLED+0x6c>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <updateTrafficLED+0x24>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d00c      	beq.n	800052c <updateTrafficLED+0x3c>
	case 2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
		break;
	default:
		break;
 8000512:	e023      	b.n	800055c <updateTrafficLED+0x6c>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051a:	482a      	ldr	r0, [pc, #168]	; (80005c4 <updateTrafficLED+0xd4>)
 800051c:	f001 fb35 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2108      	movs	r1, #8
 8000524:	4828      	ldr	r0, [pc, #160]	; (80005c8 <updateTrafficLED+0xd8>)
 8000526:	f001 fb30 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 800052a:	e018      	b.n	800055e <updateTrafficLED+0x6e>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4824      	ldr	r0, [pc, #144]	; (80005c4 <updateTrafficLED+0xd4>)
 8000534:	f001 fb29 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2108      	movs	r1, #8
 800053c:	4822      	ldr	r0, [pc, #136]	; (80005c8 <updateTrafficLED+0xd8>)
 800053e:	f001 fb24 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 8000542:	e00c      	b.n	800055e <updateTrafficLED+0x6e>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054a:	481e      	ldr	r0, [pc, #120]	; (80005c4 <updateTrafficLED+0xd4>)
 800054c:	f001 fb1d 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2108      	movs	r1, #8
 8000554:	481c      	ldr	r0, [pc, #112]	; (80005c8 <updateTrafficLED+0xd8>)
 8000556:	f001 fb18 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 800055a:	e000      	b.n	800055e <updateTrafficLED+0x6e>
		break;
 800055c:	bf00      	nop
	}
	switch (trafficLed1){
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d01f      	beq.n	80005a4 <updateTrafficLED+0xb4>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2b02      	cmp	r3, #2
 8000568:	dc27      	bgt.n	80005ba <updateTrafficLED+0xca>
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d003      	beq.n	8000578 <updateTrafficLED+0x88>
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d00b      	beq.n	800058e <updateTrafficLED+0x9e>
	case 2:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
		break;
	default:
		break;
 8000576:	e020      	b.n	80005ba <updateTrafficLED+0xca>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2120      	movs	r1, #32
 800057c:	4812      	ldr	r0, [pc, #72]	; (80005c8 <updateTrafficLED+0xd8>)
 800057e:	f001 fb04 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2110      	movs	r1, #16
 8000586:	4810      	ldr	r0, [pc, #64]	; (80005c8 <updateTrafficLED+0xd8>)
 8000588:	f001 faff 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 800058c:	e016      	b.n	80005bc <updateTrafficLED+0xcc>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2120      	movs	r1, #32
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <updateTrafficLED+0xd8>)
 8000594:	f001 faf9 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2110      	movs	r1, #16
 800059c:	480a      	ldr	r0, [pc, #40]	; (80005c8 <updateTrafficLED+0xd8>)
 800059e:	f001 faf4 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 80005a2:	e00b      	b.n	80005bc <updateTrafficLED+0xcc>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <updateTrafficLED+0xd8>)
 80005aa:	f001 faee 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2110      	movs	r1, #16
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <updateTrafficLED+0xd8>)
 80005b4:	f001 fae9 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 80005b8:	e000      	b.n	80005bc <updateTrafficLED+0xcc>
		break;
 80005ba:	bf00      	nop
	}
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010800 	.word	0x40010800
 80005c8:	40010c00 	.word	0x40010c00

080005cc <toggleTrafficLed>:

		setTimer2(2000);
	}
}*/

void toggleTrafficLed(int trafficLed0, int trafficLed1){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	switch (trafficLed0){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d01f      	beq.n	800061c <toggleTrafficLed+0x50>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	dc26      	bgt.n	8000630 <toggleTrafficLed+0x64>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <toggleTrafficLed+0x24>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00b      	beq.n	8000606 <toggleTrafficLed+0x3a>
	case 2:
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
		break;
	default:
		break;
 80005ee:	e01f      	b.n	8000630 <toggleTrafficLed+0x64>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2108      	movs	r1, #8
 80005f4:	4826      	ldr	r0, [pc, #152]	; (8000690 <toggleTrafficLed+0xc4>)
 80005f6:	f001 fac8 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	4825      	ldr	r0, [pc, #148]	; (8000694 <toggleTrafficLed+0xc8>)
 8000600:	f001 fadb 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 8000604:	e015      	b.n	8000632 <toggleTrafficLed+0x66>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	4821      	ldr	r0, [pc, #132]	; (8000694 <toggleTrafficLed+0xc8>)
 800060e:	f001 fabc 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000612:	2108      	movs	r1, #8
 8000614:	481e      	ldr	r0, [pc, #120]	; (8000690 <toggleTrafficLed+0xc4>)
 8000616:	f001 fad0 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 800061a:	e00a      	b.n	8000632 <toggleTrafficLed+0x66>
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 800061c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000620:	481c      	ldr	r0, [pc, #112]	; (8000694 <toggleTrafficLed+0xc8>)
 8000622:	f001 faca 	bl	8001bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000626:	2108      	movs	r1, #8
 8000628:	4819      	ldr	r0, [pc, #100]	; (8000690 <toggleTrafficLed+0xc4>)
 800062a:	f001 fac6 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 800062e:	e000      	b.n	8000632 <toggleTrafficLed+0x66>
		break;
 8000630:	bf00      	nop
	}
	switch (trafficLed1){
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d01d      	beq.n	8000674 <toggleTrafficLed+0xa8>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2b02      	cmp	r3, #2
 800063c:	dc23      	bgt.n	8000686 <toggleTrafficLed+0xba>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <toggleTrafficLed+0x80>
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <toggleTrafficLed+0x94>
	case 2:
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
		break;
	default:
		break;
 800064a:	e01c      	b.n	8000686 <toggleTrafficLed+0xba>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <toggleTrafficLed+0xc4>)
 8000652:	f001 fa9a 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000656:	2120      	movs	r1, #32
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <toggleTrafficLed+0xc4>)
 800065a:	f001 faae 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 800065e:	e013      	b.n	8000688 <toggleTrafficLed+0xbc>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <toggleTrafficLed+0xc4>)
 8000666:	f001 fa90 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800066a:	2110      	movs	r1, #16
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <toggleTrafficLed+0xc4>)
 800066e:	f001 faa4 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 8000672:	e009      	b.n	8000688 <toggleTrafficLed+0xbc>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000674:	2120      	movs	r1, #32
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <toggleTrafficLed+0xc4>)
 8000678:	f001 fa9f 	bl	8001bba <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800067c:	2110      	movs	r1, #16
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <toggleTrafficLed+0xc4>)
 8000680:	f001 fa9b 	bl	8001bba <HAL_GPIO_TogglePin>
		break;
 8000684:	e000      	b.n	8000688 <toggleTrafficLed+0xbc>
		break;
 8000686:	bf00      	nop
	}
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40010c00 	.word	0x40010c00
 8000694:	40010800 	.word	0x40010800

08000698 <displayPedestrianLed>:

void displayPedestrianLed(int pedestrianLed){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d83c      	bhi.n	8000720 <displayPedestrianLed+0x88>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <displayPedestrianLed+0x14>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006d7 	.word	0x080006d7
 80006b4:	080006f1 	.word	0x080006f1
 80006b8:	0800070b 	.word	0x0800070b
	switch (pedestrianLed){
	case 0:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c2:	4820      	ldr	r0, [pc, #128]	; (8000744 <displayPedestrianLed+0xac>)
 80006c4:	f001 fa61 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <displayPedestrianLed+0xb0>)
 80006d0:	f001 fa5b 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 80006d4:	e031      	b.n	800073a <displayPedestrianLed+0xa2>
	case 1:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	4819      	ldr	r0, [pc, #100]	; (8000744 <displayPedestrianLed+0xac>)
 80006de:	f001 fa54 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e8:	4817      	ldr	r0, [pc, #92]	; (8000748 <displayPedestrianLed+0xb0>)
 80006ea:	f001 fa4e 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 80006ee:	e024      	b.n	800073a <displayPedestrianLed+0xa2>
	case 2:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4813      	ldr	r0, [pc, #76]	; (8000744 <displayPedestrianLed+0xac>)
 80006f8:	f001 fa47 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <displayPedestrianLed+0xb0>)
 8000704:	f001 fa41 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 8000708:	e017      	b.n	800073a <displayPedestrianLed+0xa2>
	case 3:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <displayPedestrianLed+0xac>)
 8000712:	f001 fa3a 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D7_GPIO_Port, D7_Pin);
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	480b      	ldr	r0, [pc, #44]	; (8000748 <displayPedestrianLed+0xb0>)
 800071c:	f001 fa4d 	bl	8001bba <HAL_GPIO_TogglePin>
	default:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <displayPedestrianLed+0xac>)
 8000728:	f001 fa2f 	bl	8001b8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <displayPedestrianLed+0xb0>)
 8000734:	f001 fa29 	bl	8001b8a <HAL_GPIO_WritePin>
		break;
 8000738:	bf00      	nop
	}
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010c00 	.word	0x40010c00
 8000748:	40010800 	.word	0x40010800

0800074c <updateBuffer>:
uint8_t tBuffer[50]={"!7SEG:  #"};
#define counter_index 			5
#define counter_length 			2


void updateBuffer(int counter) {
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
		for (int i=0; i< counter_length; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e01e      	b.n	8000798 <updateBuffer+0x4c>
			tBuffer[counter_length + counter_index - i] = counter%10+48;
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <updateBuffer+0x60>)
 800075e:	fb83 1302 	smull	r1, r3, r3, r2
 8000762:	1099      	asrs	r1, r3, #2
 8000764:	17d3      	asrs	r3, r2, #31
 8000766:	1ac9      	subs	r1, r1, r3
 8000768:	460b      	mov	r3, r1
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1ad1      	subs	r1, r2, r3
 8000772:	b2ca      	uxtb	r2, r1
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	3230      	adds	r2, #48	; 0x30
 800077c:	b2d1      	uxtb	r1, r2
 800077e:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <updateBuffer+0x64>)
 8000780:	54d1      	strb	r1, [r2, r3]
			counter/=10;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <updateBuffer+0x60>)
 8000786:	fb82 1203 	smull	r1, r2, r2, r3
 800078a:	1092      	asrs	r2, r2, #2
 800078c:	17db      	asrs	r3, r3, #31
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	607b      	str	r3, [r7, #4]
		for (int i=0; i< counter_length; i++) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b01      	cmp	r3, #1
 800079c:	dddd      	ble.n	800075a <updateBuffer+0xe>
		}
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	66666667 	.word	0x66666667
 80007b0:	20000010 	.word	0x20000010

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fe2b 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f871 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f997 	bl	8000af4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007c6:	f000 f8a9 	bl	800091c <MX_TIM2_Init>
  MX_TIM3_Init();
 80007ca:	f000 f8f3 	bl	80009b4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80007ce:	f000 f967 	bl	8000aa0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007d2:	482b      	ldr	r0, [pc, #172]	; (8000880 <main+0xcc>)
 80007d4:	f001 fe74 	bl	80024c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007d8:	2100      	movs	r1, #0
 80007da:	482a      	ldr	r0, [pc, #168]	; (8000884 <main+0xd0>)
 80007dc:	f001 ff1a 	bl	8002614 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setTimer1(1000);
  int dutyCycle = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  setTimerBlinking(200);
 80007e4:	20c8      	movs	r0, #200	; 0xc8
 80007e6:	f000 fbd3 	bl	8000f90 <setTimerBlinking>
	  //HAL_Delay(1000);
	  //__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 70);
	  //HAL_Delay(1000);
    /* USER CODE END WHILE */

	  if(getTimerBlinkingFlag() == 1){
 80007ea:	f000 fc1f 	bl	800102c <getTimerBlinkingFlag>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d10d      	bne.n	8000810 <main+0x5c>
		updateBuffer(counter0);
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0xd4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ffa7 	bl	800074c <updateBuffer>
		HAL_UART_Transmit(&huart2, tBuffer, 50, 10);
 80007fe:	230a      	movs	r3, #10
 8000800:	2232      	movs	r2, #50	; 0x32
 8000802:	4922      	ldr	r1, [pc, #136]	; (800088c <main+0xd8>)
 8000804:	4822      	ldr	r0, [pc, #136]	; (8000890 <main+0xdc>)
 8000806:	f002 fdb6 	bl	8003376 <HAL_UART_Transmit>
		setTimerBlinking(200);
 800080a:	20c8      	movs	r0, #200	; 0xc8
 800080c:	f000 fbc0 	bl	8000f90 <setTimerBlinking>
	  }
	  fsm_for_input_processing();
 8000810:	f7ff fc9c 	bl	800014c <fsm_for_input_processing>
	  mode_processing();
 8000814:	f000 fa0e 	bl	8000c34 <mode_processing>
	  if (pedestrian > 0 && pedestrian <= timeCycle && trafficLed1 == 2) {
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <main+0xe0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd24      	ble.n	800086a <main+0xb6>
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <main+0xe0>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <main+0xe4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	dc1e      	bgt.n	800086a <main+0xb6>
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <main+0xe8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d11a      	bne.n	800086a <main+0xb6>
		//__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, i);
			//__HAL_TIM_SET_AUTORELOAD(&htim3, i*2);
			//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
			//HAL_Delay(500);
		//}
		  if (getTimer3Flag() == 1){
 8000834:	f000 fc1e 	bl	8001074 <getTimer3Flag>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d11e      	bne.n	800087c <main+0xc8>
			  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, dutyCycle);
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <main+0xd0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
			  if (dutyCycle <= 100) dutyCycle += 20;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b64      	cmp	r3, #100	; 0x64
 800084a:	dc02      	bgt.n	8000852 <main+0x9e>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3314      	adds	r3, #20
 8000850:	607b      	str	r3, [r7, #4]
			  displayPedestrianLed(3);
 8000852:	2003      	movs	r0, #3
 8000854:	f7ff ff20 	bl	8000698 <displayPedestrianLed>
			  setTimer3(counter1 * 200); //150
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <main+0xec>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	22c8      	movs	r2, #200	; 0xc8
 800085e:	fb02 f303 	mul.w	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fbc8 	bl	8000ff8 <setTimer3>
		  if (getTimer3Flag() == 1){
 8000868:	e008      	b.n	800087c <main+0xc8>
		  }
	  }
	  else{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <main+0xd0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2200      	movs	r2, #0
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
		dutyCycle = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
		setTimer3(0);
 8000876:	2000      	movs	r0, #0
 8000878:	f000 fbbe 	bl	8000ff8 <setTimer3>
	  if(getTimerBlinkingFlag() == 1){
 800087c:	e7b5      	b.n	80007ea <main+0x36>
 800087e:	bf00      	nop
 8000880:	20000118 	.word	0x20000118
 8000884:	200000d0 	.word	0x200000d0
 8000888:	20000080 	.word	0x20000080
 800088c:	20000010 	.word	0x20000010
 8000890:	20000160 	.word	0x20000160
 8000894:	2000008c 	.word	0x2000008c
 8000898:	20000090 	.word	0x20000090
 800089c:	2000007c 	.word	0x2000007c
 80008a0:	20000084 	.word	0x20000084

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b090      	sub	sp, #64	; 0x40
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	2228      	movs	r2, #40	; 0x28
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fa0e 	bl	8003cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ca:	2301      	movs	r3, #1
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	2310      	movs	r3, #16
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f986 	bl	8001bec <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008e6:	f000 f9a0 	bl	8000c2a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fbf2 	bl	80020ec <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800090e:	f000 f98c 	bl	8000c2a <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3740      	adds	r7, #64	; 0x40
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_TIM2_Init+0x94>)
 800093a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_TIM2_Init+0x94>)
 8000942:	2209      	movs	r2, #9
 8000944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_TIM2_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_TIM2_Init+0x94>)
 800094e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_TIM2_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_TIM2_Init+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_TIM2_Init+0x94>)
 8000962:	f001 fd5d 	bl	8002420 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800096c:	f000 f95d 	bl	8000c2a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	4619      	mov	r1, r3
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_TIM2_Init+0x94>)
 800097e:	f002 f8b1 	bl	8002ae4 <HAL_TIM_ConfigClockSource>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000988:	f000 f94f 	bl	8000c2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	2300      	movs	r3, #0
 800098e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_TIM2_Init+0x94>)
 800099a:	f002 fc2f 	bl	80031fc <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f000 f941 	bl	8000c2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000118 	.word	0x20000118

080009b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	615a      	str	r2, [r3, #20]
 80009e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009e4:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <MX_TIM3_Init+0xe4>)
 80009e6:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <MX_TIM3_Init+0xe8>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80009ea:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <MX_TIM3_Init+0xe4>)
 80009ec:	2209      	movs	r2, #9
 80009ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <MX_TIM3_Init+0xe4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 80009f6:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <MX_TIM3_Init+0xe4>)
 80009f8:	f240 321f 	movw	r2, #799	; 0x31f
 80009fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <MX_TIM3_Init+0xe4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_TIM3_Init+0xe4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0a:	4823      	ldr	r0, [pc, #140]	; (8000a98 <MX_TIM3_Init+0xe4>)
 8000a0c:	f001 fd08 	bl	8002420 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a16:	f000 f908 	bl	8000c2a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481c      	ldr	r0, [pc, #112]	; (8000a98 <MX_TIM3_Init+0xe4>)
 8000a28:	f002 f85c 	bl	8002ae4 <HAL_TIM_ConfigClockSource>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a32:	f000 f8fa 	bl	8000c2a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a36:	4818      	ldr	r0, [pc, #96]	; (8000a98 <MX_TIM3_Init+0xe4>)
 8000a38:	f001 fd94 	bl	8002564 <HAL_TIM_PWM_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a42:	f000 f8f2 	bl	8000c2a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	4619      	mov	r1, r3
 8000a54:	4810      	ldr	r0, [pc, #64]	; (8000a98 <MX_TIM3_Init+0xe4>)
 8000a56:	f002 fbd1 	bl	80031fc <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a60:	f000 f8e3 	bl	8000c2a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a64:	2360      	movs	r3, #96	; 0x60
 8000a66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <MX_TIM3_Init+0xe4>)
 8000a7c:	f001 ff74 	bl	8002968 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a86:	f000 f8d0 	bl	8000c2a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <MX_TIM3_Init+0xe4>)
 8000a8c:	f000 fbcc 	bl	8001228 <HAL_TIM_MspPostInit>

}
 8000a90:	bf00      	nop
 8000a92:	3738      	adds	r7, #56	; 0x38
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000d0 	.word	0x200000d0
 8000a9c:	40000400 	.word	0x40000400

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f002 fc00 	bl	80032dc <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f8a2 	bl	8000c2a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000160 	.word	0x20000160
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a3a      	ldr	r2, [pc, #232]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a34      	ldr	r2, [pc, #208]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a2e      	ldr	r2, [pc, #184]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_GPIO_Init+0x104>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b56:	4829      	ldr	r0, [pc, #164]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000b58:	f001 f817 	bl	8001b8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b62:	4827      	ldr	r0, [pc, #156]	; (8000c00 <MX_GPIO_Init+0x10c>)
 8000b64:	f001 f811 	bl	8001b8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4821      	ldr	r0, [pc, #132]	; (8000c04 <MX_GPIO_Init+0x110>)
 8000b7e:	f000 fe69 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin A1_Pin B3_Pin */
  GPIO_InitStruct.Pin = B0_Pin|A1_Pin|B3_Pin;
 8000b82:	2313      	movs	r3, #19
 8000b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	481a      	ldr	r0, [pc, #104]	; (8000c00 <MX_GPIO_Init+0x10c>)
 8000b96:	f000 fe5d 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : B4_Pin */
  GPIO_InitStruct.Pin = B4_Pin;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B4_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4619      	mov	r1, r3
 8000bac:	4813      	ldr	r0, [pc, #76]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000bae:	f000 fe51 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000bb2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_GPIO_Init+0x108>)
 8000bcc:	f000 fe42 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000bd0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_GPIO_Init+0x10c>)
 8000bea:	f000 fe33 	bl	8001854 <HAL_GPIO_Init>

}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010c00 	.word	0x40010c00
 8000c00:	40010800 	.word	0x40010800
 8000c04:	40011000 	.word	0x40011000

08000c08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c18:	d103      	bne.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000c1a:	f7ff fb91 	bl	8000340 <button_reading>
		timerRun();
 8000c1e:	f000 fa3b 	bl	8001098 <timerRun>
	}
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2e:	b672      	cpsid	i
}
 8000c30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <Error_Handler+0x8>

08000c34 <mode_processing>:
#include "software_timer.h"
#include "stddef.h"
#include "stdint.h"


void mode_processing(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	switch(mode){
 8000c38:	4b93      	ldr	r3, [pc, #588]	; (8000e88 <mode_processing+0x254>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	f200 8191 	bhi.w	8000f66 <mode_processing+0x332>
 8000c44:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <mode_processing+0x18>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c61 	.word	0x08000c61
 8000c50:	08000d97 	.word	0x08000d97
 8000c54:	08000dcb 	.word	0x08000dcb
 8000c58:	08000e45 	.word	0x08000e45
 8000c5c:	08000eeb 	.word	0x08000eeb
	case 1: // Mode 01: The traffic light application is running normally.
		if (initState == 0){
 8000c60:	4b8a      	ldr	r3, [pc, #552]	; (8000e8c <mode_processing+0x258>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d123      	bne.n	8000cb0 <mode_processing+0x7c>
			trafficLed0 = 0; // turn on red led on road 01
 8000c68:	4b89      	ldr	r3, [pc, #548]	; (8000e90 <mode_processing+0x25c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
			trafficLed1 = 1; // turn on green led on road 02
 8000c6e:	4b89      	ldr	r3, [pc, #548]	; (8000e94 <mode_processing+0x260>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
			counter0 = timeDurations[trafficLed0]; // set red time duration for counter
 8000c74:	4b86      	ldr	r3, [pc, #536]	; (8000e90 <mode_processing+0x25c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a87      	ldr	r2, [pc, #540]	; (8000e98 <mode_processing+0x264>)
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	4a87      	ldr	r2, [pc, #540]	; (8000e9c <mode_processing+0x268>)
 8000c80:	6013      	str	r3, [r2, #0]
			counter1 = timeDurations[trafficLed1]; // set green time duration for counter
 8000c82:	4b84      	ldr	r3, [pc, #528]	; (8000e94 <mode_processing+0x260>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a84      	ldr	r2, [pc, #528]	; (8000e98 <mode_processing+0x264>)
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	4a84      	ldr	r2, [pc, #528]	; (8000ea0 <mode_processing+0x26c>)
 8000c8e:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000c90:	4b7e      	ldr	r3, [pc, #504]	; (8000e8c <mode_processing+0x258>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1); // display Traffic LED on both roads
 8000c96:	4b7e      	ldr	r3, [pc, #504]	; (8000e90 <mode_processing+0x25c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a7e      	ldr	r2, [pc, #504]	; (8000e94 <mode_processing+0x260>)
 8000c9c:	6812      	ldr	r2, [r2, #0]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fc25 	bl	80004f0 <updateTrafficLED>
			setTimer1(1000);
 8000ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000caa:	f000 f98b 	bl	8000fc4 <setTimer1>
				}
				updateTrafficLED(trafficLed0, trafficLed1);
				setTimer1(1000);
			}
		}
		break;
 8000cae:	e159      	b.n	8000f64 <mode_processing+0x330>
			if (getTimer1Flag() == 1){
 8000cb0:	f000 f9ce 	bl	8001050 <getTimer1Flag>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	f040 8154 	bne.w	8000f64 <mode_processing+0x330>
				counter0--;
 8000cbc:	4b77      	ldr	r3, [pc, #476]	; (8000e9c <mode_processing+0x268>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	4a76      	ldr	r2, [pc, #472]	; (8000e9c <mode_processing+0x268>)
 8000cc4:	6013      	str	r3, [r2, #0]
				counter1--;
 8000cc6:	4b76      	ldr	r3, [pc, #472]	; (8000ea0 <mode_processing+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	4a74      	ldr	r2, [pc, #464]	; (8000ea0 <mode_processing+0x26c>)
 8000cce:	6013      	str	r3, [r2, #0]
				if (counter0 <= 0){
 8000cd0:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <mode_processing+0x268>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	dc12      	bgt.n	8000cfe <mode_processing+0xca>
					trafficLed0++;
 8000cd8:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <mode_processing+0x25c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a6c      	ldr	r2, [pc, #432]	; (8000e90 <mode_processing+0x25c>)
 8000ce0:	6013      	str	r3, [r2, #0]
					if (trafficLed0 >= 3)
 8000ce2:	4b6b      	ldr	r3, [pc, #428]	; (8000e90 <mode_processing+0x25c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	dd02      	ble.n	8000cf0 <mode_processing+0xbc>
						trafficLed0 = 0;
 8000cea:	4b69      	ldr	r3, [pc, #420]	; (8000e90 <mode_processing+0x25c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
					counter0 = timeDurations[trafficLed0];
 8000cf0:	4b67      	ldr	r3, [pc, #412]	; (8000e90 <mode_processing+0x25c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a68      	ldr	r2, [pc, #416]	; (8000e98 <mode_processing+0x264>)
 8000cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfa:	4a68      	ldr	r2, [pc, #416]	; (8000e9c <mode_processing+0x268>)
 8000cfc:	6013      	str	r3, [r2, #0]
				if (counter1 <= 0){
 8000cfe:	4b68      	ldr	r3, [pc, #416]	; (8000ea0 <mode_processing+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dc12      	bgt.n	8000d2c <mode_processing+0xf8>
					trafficLed1++;
 8000d06:	4b63      	ldr	r3, [pc, #396]	; (8000e94 <mode_processing+0x260>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a61      	ldr	r2, [pc, #388]	; (8000e94 <mode_processing+0x260>)
 8000d0e:	6013      	str	r3, [r2, #0]
					if (trafficLed1 >= 3)
 8000d10:	4b60      	ldr	r3, [pc, #384]	; (8000e94 <mode_processing+0x260>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	dd02      	ble.n	8000d1e <mode_processing+0xea>
						trafficLed1 = 0;
 8000d18:	4b5e      	ldr	r3, [pc, #376]	; (8000e94 <mode_processing+0x260>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
					counter1 = timeDurations[trafficLed1];
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <mode_processing+0x260>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a5d      	ldr	r2, [pc, #372]	; (8000e98 <mode_processing+0x264>)
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	4a5d      	ldr	r2, [pc, #372]	; (8000ea0 <mode_processing+0x26c>)
 8000d2a:	6013      	str	r3, [r2, #0]
				if (pedestrian > 0 && pedestrian <= timeCycle) {
 8000d2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ea4 <mode_processing+0x270>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	dd1d      	ble.n	8000d70 <mode_processing+0x13c>
 8000d34:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <mode_processing+0x270>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <mode_processing+0x274>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dc17      	bgt.n	8000d70 <mode_processing+0x13c>
					if (trafficLed1 == 2 && counter1 == timeDurations[2]){
 8000d40:	4b54      	ldr	r3, [pc, #336]	; (8000e94 <mode_processing+0x260>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d108      	bne.n	8000d5a <mode_processing+0x126>
 8000d48:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <mode_processing+0x264>)
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <mode_processing+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d102      	bne.n	8000d5a <mode_processing+0x126>
						setTimer3(10); //100
 8000d54:	200a      	movs	r0, #10
 8000d56:	f000 f94f 	bl	8000ff8 <setTimer3>
					displayPedestrianLed(trafficLed1);
 8000d5a:	4b4e      	ldr	r3, [pc, #312]	; (8000e94 <mode_processing+0x260>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fc9a 	bl	8000698 <displayPedestrianLed>
					pedestrian++;
 8000d64:	4b4f      	ldr	r3, [pc, #316]	; (8000ea4 <mode_processing+0x270>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <mode_processing+0x270>)
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e005      	b.n	8000d7c <mode_processing+0x148>
					displayPedestrianLed(5);
 8000d70:	2005      	movs	r0, #5
 8000d72:	f7ff fc91 	bl	8000698 <displayPedestrianLed>
					pedestrian = 0;
 8000d76:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <mode_processing+0x270>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
				updateTrafficLED(trafficLed0, trafficLed1);
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <mode_processing+0x25c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <mode_processing+0x260>)
 8000d82:	6812      	ldr	r2, [r2, #0]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fbb2 	bl	80004f0 <updateTrafficLED>
				setTimer1(1000);
 8000d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d90:	f000 f918 	bl	8000fc4 <setTimer1>
		break;
 8000d94:	e0e6      	b.n	8000f64 <mode_processing+0x330>
	case 2: // Mode 2: Manual control
		if (initState == 0){
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <mode_processing+0x258>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d108      	bne.n	8000db0 <mode_processing+0x17c>
			trafficLed0 = 0;
 8000d9e:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <mode_processing+0x25c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
			trafficLed1 = 1;
 8000da4:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <mode_processing+0x260>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
			initState = 1;
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <mode_processing+0x258>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
			if (getTimer1Flag() == 1){
				mode = 1;
				initState = 0;
			}
		}*/
		updateTrafficLED(trafficLed0, trafficLed1);
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <mode_processing+0x25c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a37      	ldr	r2, [pc, #220]	; (8000e94 <mode_processing+0x260>)
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fb98 	bl	80004f0 <updateTrafficLED>
		counter0 = mode;
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <mode_processing+0x254>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a35      	ldr	r2, [pc, #212]	; (8000e9c <mode_processing+0x268>)
 8000dc6:	6013      	str	r3, [r2, #0]
		break;
 8000dc8:	e0cd      	b.n	8000f66 <mode_processing+0x332>
	case 3: // Mode 3 - Modify time duration for the red LEDs
		if (initState == 0){
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <mode_processing+0x258>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d11d      	bne.n	8000e0e <mode_processing+0x1da>
			trafficLed0 = 0;
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <mode_processing+0x25c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
			trafficLed1 = 0;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <mode_processing+0x260>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <mode_processing+0x25c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a2d      	ldr	r2, [pc, #180]	; (8000e98 <mode_processing+0x264>)
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	4a30      	ldr	r2, [pc, #192]	; (8000eac <mode_processing+0x278>)
 8000dea:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <mode_processing+0x258>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <mode_processing+0x25c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <mode_processing+0x260>)
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb77 	bl	80004f0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <mode_processing+0x27c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f8dc 	bl	8000fc4 <setTimer1>
 8000e0c:	e011      	b.n	8000e32 <mode_processing+0x1fe>
		}
		else {
			if( getTimer1Flag() == 1){
 8000e0e:	f000 f91f 	bl	8001050 <getTimer1Flag>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10c      	bne.n	8000e32 <mode_processing+0x1fe>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <mode_processing+0x25c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <mode_processing+0x260>)
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fbd2 	bl	80005cc <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <mode_processing+0x27c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f8c9 	bl	8000fc4 <setTimer1>
			}
		}
		counter0 = duration;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <mode_processing+0x278>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <mode_processing+0x268>)
 8000e38:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <mode_processing+0x254>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <mode_processing+0x26c>)
 8000e40:	6013      	str	r3, [r2, #0]
		break;
 8000e42:	e090      	b.n	8000f66 <mode_processing+0x332>
	case 4: // Mode 4 - Modify time duration for the amber LEDs
		if (initState == 0){
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <mode_processing+0x258>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d133      	bne.n	8000eb4 <mode_processing+0x280>
			trafficLed0 = 2;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <mode_processing+0x25c>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	601a      	str	r2, [r3, #0]
			trafficLed1 = 2;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <mode_processing+0x260>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <mode_processing+0x25c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <mode_processing+0x264>)
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <mode_processing+0x278>)
 8000e64:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <mode_processing+0x258>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <mode_processing+0x25c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <mode_processing+0x260>)
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fb3a 	bl	80004f0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <mode_processing+0x27c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f89f 	bl	8000fc4 <setTimer1>
 8000e86:	e027      	b.n	8000ed8 <mode_processing+0x2a4>
 8000e88:	20000070 	.word	0x20000070
 8000e8c:	20000074 	.word	0x20000074
 8000e90:	20000078 	.word	0x20000078
 8000e94:	2000007c 	.word	0x2000007c
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000080 	.word	0x20000080
 8000ea0:	20000084 	.word	0x20000084
 8000ea4:	2000008c 	.word	0x2000008c
 8000ea8:	20000090 	.word	0x20000090
 8000eac:	20000088 	.word	0x20000088
 8000eb0:	2000000c 	.word	0x2000000c
		}
		else {
			if( getTimer1Flag() == 1){
 8000eb4:	f000 f8cc 	bl	8001050 <getTimer1Flag>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d10c      	bne.n	8000ed8 <mode_processing+0x2a4>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <mode_processing+0x338>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a2b      	ldr	r2, [pc, #172]	; (8000f70 <mode_processing+0x33c>)
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fb7f 	bl	80005cc <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000ece:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <mode_processing+0x340>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f876 	bl	8000fc4 <setTimer1>
			}
		}
		counter0 = duration;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <mode_processing+0x344>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <mode_processing+0x348>)
 8000ede:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000ee0:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <mode_processing+0x34c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <mode_processing+0x350>)
 8000ee6:	6013      	str	r3, [r2, #0]
		break;
 8000ee8:	e03d      	b.n	8000f66 <mode_processing+0x332>
	case 5: // Mode 5 - Modify time duration for the green LEDs
		if (initState == 0){
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <mode_processing+0x354>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d11d      	bne.n	8000f2e <mode_processing+0x2fa>
			trafficLed0 = 1;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <mode_processing+0x338>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
			trafficLed1 = 1;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <mode_processing+0x33c>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <mode_processing+0x338>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <mode_processing+0x358>)
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <mode_processing+0x344>)
 8000f0a:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <mode_processing+0x354>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <mode_processing+0x338>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <mode_processing+0x33c>)
 8000f18:	6812      	ldr	r2, [r2, #0]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fae7 	bl	80004f0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <mode_processing+0x340>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f84c 	bl	8000fc4 <setTimer1>
 8000f2c:	e011      	b.n	8000f52 <mode_processing+0x31e>
		}
		else {
			if( getTimer1Flag() == 1){
 8000f2e:	f000 f88f 	bl	8001050 <getTimer1Flag>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10c      	bne.n	8000f52 <mode_processing+0x31e>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <mode_processing+0x338>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <mode_processing+0x33c>)
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fb42 	bl	80005cc <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <mode_processing+0x340>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f839 	bl	8000fc4 <setTimer1>
			}
		}
		counter0 = duration;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <mode_processing+0x344>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <mode_processing+0x348>)
 8000f58:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <mode_processing+0x34c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <mode_processing+0x350>)
 8000f60:	6013      	str	r3, [r2, #0]
		break;
 8000f62:	e000      	b.n	8000f66 <mode_processing+0x332>
		break;
 8000f64:	bf00      	nop
	}
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000078 	.word	0x20000078
 8000f70:	2000007c 	.word	0x2000007c
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	20000088 	.word	0x20000088
 8000f7c:	20000080 	.word	0x20000080
 8000f80:	20000070 	.word	0x20000070
 8000f84:	20000084 	.word	0x20000084
 8000f88:	20000074 	.word	0x20000074
 8000f8c:	20000000 	.word	0x20000000

08000f90 <setTimerBlinking>:
int timer2_flag = 0;

int timer3_counter = 0;
int timer3_flag = 0;

void setTimerBlinking(int duration){
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	timerBlinking_counter = duration / TIME_CYCLE;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <setTimerBlinking+0x28>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa2:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <setTimerBlinking+0x2c>)
 8000fa4:	6013      	str	r3, [r2, #0]
	timerBlinking_flag = 0;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <setTimerBlinking+0x30>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000044 	.word	0x20000044
 8000fbc:	200000b0 	.word	0x200000b0
 8000fc0:	200000b4 	.word	0x200000b4

08000fc4 <setTimer1>:

void setTimer1(int duration){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIME_CYCLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <setTimer1+0x28>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <setTimer1+0x2c>)
 8000fd8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <setTimer1+0x30>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000044 	.word	0x20000044
 8000ff0:	200000b8 	.word	0x200000b8
 8000ff4:	200000bc 	.word	0x200000bc

08000ff8 <setTimer3>:
void setTimer2(int duration){
	timer2_counter = duration / TIME_CYCLE;
	timer2_flag = 0;
}

void setTimer3(int duration){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIME_CYCLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <setTimer3+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	fb92 f3f3 	sdiv	r3, r2, r3
 800100a:	4a06      	ldr	r2, [pc, #24]	; (8001024 <setTimer3+0x2c>)
 800100c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <setTimer3+0x30>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000044 	.word	0x20000044
 8001024:	200000c8 	.word	0x200000c8
 8001028:	200000cc 	.word	0x200000cc

0800102c <getTimerBlinkingFlag>:

int getTimerBlinkingFlag(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	if (timerBlinking_flag == 1){
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <getTimerBlinkingFlag+0x20>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d104      	bne.n	8001042 <getTimerBlinkingFlag+0x16>
		timerBlinking_flag = 0;
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <getTimerBlinkingFlag+0x20>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
		return 1;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <getTimerBlinkingFlag+0x18>
	}
	return 0;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	200000b4 	.word	0x200000b4

08001050 <getTimer1Flag>:

int getTimer1Flag(){
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	if (timer1_flag == 1){
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <getTimer1Flag+0x20>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d104      	bne.n	8001066 <getTimer1Flag+0x16>
		timer1_flag = 0;
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <getTimer1Flag+0x20>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
		return 1;
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <getTimer1Flag+0x18>
	}
	return 0;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	200000bc 	.word	0x200000bc

08001074 <getTimer3Flag>:
		return 1;
	}
	return 0;
}

int getTimer3Flag(){
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	if (timer3_flag == 1){
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <getTimer3Flag+0x20>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d104      	bne.n	800108a <getTimer3Flag+0x16>
		timer3_flag = 0;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <getTimer3Flag+0x20>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
		return 1;
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <getTimer3Flag+0x18>
	}
	return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	200000cc 	.word	0x200000cc

08001098 <timerRun>:

void timerRun(){
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
	if (timerBlinking_counter > 0){
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <timerRun+0x8c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dd0b      	ble.n	80010bc <timerRun+0x24>
		timerBlinking_counter--;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <timerRun+0x8c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <timerRun+0x8c>)
 80010ac:	6013      	str	r3, [r2, #0]
		if (timerBlinking_counter <= 0){
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <timerRun+0x8c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	dc02      	bgt.n	80010bc <timerRun+0x24>
			timerBlinking_flag = 1;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <timerRun+0x90>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer1_counter > 0){
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <timerRun+0x94>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dd0b      	ble.n	80010dc <timerRun+0x44>
		timer1_counter--;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <timerRun+0x94>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	4a18      	ldr	r2, [pc, #96]	; (800112c <timerRun+0x94>)
 80010cc:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <timerRun+0x94>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	dc02      	bgt.n	80010dc <timerRun+0x44>
			timer1_flag = 1;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <timerRun+0x98>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <timerRun+0x9c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	dd0b      	ble.n	80010fc <timerRun+0x64>
		timer2_counter--;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <timerRun+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <timerRun+0x9c>)
 80010ec:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <timerRun+0x9c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dc02      	bgt.n	80010fc <timerRun+0x64>
			timer2_flag = 1;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <timerRun+0xa0>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <timerRun+0xa4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dd0b      	ble.n	800111c <timerRun+0x84>
		timer3_counter--;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <timerRun+0xa4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <timerRun+0xa4>)
 800110c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <timerRun+0xa4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dc02      	bgt.n	800111c <timerRun+0x84>
			timer3_flag = 1;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <timerRun+0xa8>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	200000b0 	.word	0x200000b0
 8001128:	200000b4 	.word	0x200000b4
 800112c:	200000b8 	.word	0x200000b8
 8001130:	200000bc 	.word	0x200000bc
 8001134:	200000c0 	.word	0x200000c0
 8001138:	200000c4 	.word	0x200000c4
 800113c:	200000c8 	.word	0x200000c8
 8001140:	200000cc 	.word	0x200000cc

08001144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_MspInit+0x5c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_MspInit+0x5c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x5c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x5c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_MspInit+0x60>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_MspInit+0x60>)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d114      	bne.n	80011e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_TIM_Base_MspInit+0x78>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <HAL_TIM_Base_MspInit+0x78>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_TIM_Base_MspInit+0x78>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	201c      	movs	r0, #28
 80011d8:	f000 fa55 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011dc:	201c      	movs	r0, #28
 80011de:	f000 fa6e 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011e2:	e018      	b.n	8001216 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_TIM_Base_MspInit+0x7c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d113      	bne.n	8001216 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_TIM_Base_MspInit+0x78>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <HAL_TIM_Base_MspInit+0x78>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_TIM_Base_MspInit+0x78>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	201d      	movs	r0, #29
 800120c:	f000 fa3b 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001210:	201d      	movs	r0, #29
 8001212:	f000 fa54 	bl	80016be <HAL_NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	40000400 	.word	0x40000400

08001228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_TIM_MspPostInit+0x58>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d117      	bne.n	8001278 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_TIM_MspPostInit+0x5c>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_TIM_MspPostInit+0x5c>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_TIM_MspPostInit+0x5c>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001260:	2340      	movs	r3, #64	; 0x40
 8001262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_TIM_MspPostInit+0x60>)
 8001274:	f000 faee 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40000400 	.word	0x40000400
 8001284:	40021000 	.word	0x40021000
 8001288:	40010800 	.word	0x40010800

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <HAL_UART_MspInit+0x98>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d137      	bne.n	800131c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_UART_MspInit+0x9c>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_UART_MspInit+0x9c>)
 80012b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b6:	61d3      	str	r3, [r2, #28]
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_UART_MspInit+0x9c>)
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_UART_MspInit+0x9c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a17      	ldr	r2, [pc, #92]	; (8001328 <HAL_UART_MspInit+0x9c>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_UART_MspInit+0x9c>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012dc:	2304      	movs	r3, #4
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	480f      	ldr	r0, [pc, #60]	; (800132c <HAL_UART_MspInit+0xa0>)
 80012f0:	f000 fab0 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012f4:	2308      	movs	r3, #8
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <HAL_UART_MspInit+0xa0>)
 8001308:	f000 faa4 	bl	8001854 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2026      	movs	r0, #38	; 0x26
 8001312:	f000 f9b8 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001316:	2026      	movs	r0, #38	; 0x26
 8001318:	f000 f9d1 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40004400 	.word	0x40004400
 8001328:	40021000 	.word	0x40021000
 800132c:	40010800 	.word	0x40010800

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 f893 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <TIM2_IRQHandler+0x10>)
 8001386:	f001 f9e7 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000118 	.word	0x20000118

08001394 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM3_IRQHandler+0x10>)
 800139a:	f001 f9dd 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200000d0 	.word	0x200000d0

080013a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <USART2_IRQHandler+0x10>)
 80013ae:	f002 f875 	bl	800349c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000160 	.word	0x20000160

080013bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	; (8001400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	; (800140c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ee:	f7ff ffe5 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013f2:	f002 fc4b 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f6:	f7ff f9dd 	bl	80007b4 <main>
  bx lr
 80013fa:	4770      	bx	lr
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001404:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 8001408:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800140c:	200001a8 	.word	0x200001a8

08001410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_Init+0x28>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_Init+0x28>)
 800141e:	f043 0310 	orr.w	r3, r3, #16
 8001422:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f923 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fe88 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f93b 	bl	80016da <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f903 	bl	8001686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000048 	.word	0x20000048
 8001498:	20000050 	.word	0x20000050
 800149c:	2000004c 	.word	0x2000004c

080014a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_IncTick+0x1c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x20>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a03      	ldr	r2, [pc, #12]	; (80014c0 <HAL_IncTick+0x20>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000050 	.word	0x20000050
 80014c0:	200001a4 	.word	0x200001a4

080014c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <HAL_GetTick+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	200001a4 	.word	0x200001a4

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4906      	ldr	r1, [pc, #24]	; (8001570 <__NVIC_EnableIRQ+0x34>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff90 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff2d 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff42 	bl	8001520 <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff90 	bl	80015c8 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5f 	bl	8001574 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff35 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001704:	2b02      	cmp	r3, #2
 8001706:	d008      	beq.n	800171a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2204      	movs	r2, #4
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e020      	b.n	800175c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 020e 	bic.w	r2, r2, #14
 8001728:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	2101      	movs	r1, #1
 8001744:	fa01 f202 	lsl.w	r2, r1, r2
 8001748:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800175a:	7bfb      	ldrb	r3, [r7, #15]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800177a:	2b02      	cmp	r3, #2
 800177c:	d005      	beq.n	800178a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2204      	movs	r2, #4
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e051      	b.n	800182e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 020e 	bic.w	r2, r2, #14
 8001798:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0201 	bic.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a22      	ldr	r2, [pc, #136]	; (8001838 <HAL_DMA_Abort_IT+0xd0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d029      	beq.n	8001808 <HAL_DMA_Abort_IT+0xa0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a20      	ldr	r2, [pc, #128]	; (800183c <HAL_DMA_Abort_IT+0xd4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d022      	beq.n	8001804 <HAL_DMA_Abort_IT+0x9c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_DMA_Abort_IT+0xd8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d01a      	beq.n	80017fe <HAL_DMA_Abort_IT+0x96>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_DMA_Abort_IT+0xdc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d012      	beq.n	80017f8 <HAL_DMA_Abort_IT+0x90>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_DMA_Abort_IT+0xe0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00a      	beq.n	80017f2 <HAL_DMA_Abort_IT+0x8a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1a      	ldr	r2, [pc, #104]	; (800184c <HAL_DMA_Abort_IT+0xe4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d102      	bne.n	80017ec <HAL_DMA_Abort_IT+0x84>
 80017e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017ea:	e00e      	b.n	800180a <HAL_DMA_Abort_IT+0xa2>
 80017ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017f0:	e00b      	b.n	800180a <HAL_DMA_Abort_IT+0xa2>
 80017f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f6:	e008      	b.n	800180a <HAL_DMA_Abort_IT+0xa2>
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	e005      	b.n	800180a <HAL_DMA_Abort_IT+0xa2>
 80017fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001802:	e002      	b.n	800180a <HAL_DMA_Abort_IT+0xa2>
 8001804:	2310      	movs	r3, #16
 8001806:	e000      	b.n	800180a <HAL_DMA_Abort_IT+0xa2>
 8001808:	2301      	movs	r3, #1
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_DMA_Abort_IT+0xe8>)
 800180c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
    } 
  }
  return status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40020008 	.word	0x40020008
 800183c:	4002001c 	.word	0x4002001c
 8001840:	40020030 	.word	0x40020030
 8001844:	40020044 	.word	0x40020044
 8001848:	40020058 	.word	0x40020058
 800184c:	4002006c 	.word	0x4002006c
 8001850:	40020000 	.word	0x40020000

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e169      	b.n	8001b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001868:	2201      	movs	r2, #1
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8158 	bne.w	8001b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a9a      	ldr	r2, [pc, #616]	; (8001af4 <HAL_GPIO_Init+0x2a0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d05e      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 8001890:	4a98      	ldr	r2, [pc, #608]	; (8001af4 <HAL_GPIO_Init+0x2a0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d875      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 8001896:	4a98      	ldr	r2, [pc, #608]	; (8001af8 <HAL_GPIO_Init+0x2a4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d058      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 800189c:	4a96      	ldr	r2, [pc, #600]	; (8001af8 <HAL_GPIO_Init+0x2a4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d86f      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018a2:	4a96      	ldr	r2, [pc, #600]	; (8001afc <HAL_GPIO_Init+0x2a8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d052      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018a8:	4a94      	ldr	r2, [pc, #592]	; (8001afc <HAL_GPIO_Init+0x2a8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d869      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ae:	4a94      	ldr	r2, [pc, #592]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d04c      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018b4:	4a92      	ldr	r2, [pc, #584]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d863      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ba:	4a92      	ldr	r2, [pc, #584]	; (8001b04 <HAL_GPIO_Init+0x2b0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d046      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018c0:	4a90      	ldr	r2, [pc, #576]	; (8001b04 <HAL_GPIO_Init+0x2b0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d85d      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d82a      	bhi.n	8001920 <HAL_GPIO_Init+0xcc>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d859      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <HAL_GPIO_Init+0x80>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	08001929 	.word	0x08001929
 80018dc:	0800193b 	.word	0x0800193b
 80018e0:	0800197d 	.word	0x0800197d
 80018e4:	08001983 	.word	0x08001983
 80018e8:	08001983 	.word	0x08001983
 80018ec:	08001983 	.word	0x08001983
 80018f0:	08001983 	.word	0x08001983
 80018f4:	08001983 	.word	0x08001983
 80018f8:	08001983 	.word	0x08001983
 80018fc:	08001983 	.word	0x08001983
 8001900:	08001983 	.word	0x08001983
 8001904:	08001983 	.word	0x08001983
 8001908:	08001983 	.word	0x08001983
 800190c:	08001983 	.word	0x08001983
 8001910:	08001983 	.word	0x08001983
 8001914:	08001983 	.word	0x08001983
 8001918:	08001931 	.word	0x08001931
 800191c:	08001945 	.word	0x08001945
 8001920:	4a79      	ldr	r2, [pc, #484]	; (8001b08 <HAL_GPIO_Init+0x2b4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001926:	e02c      	b.n	8001982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e029      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	3304      	adds	r3, #4
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e024      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	3308      	adds	r3, #8
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e01f      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	330c      	adds	r3, #12
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e01a      	b.n	8001984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001956:	2304      	movs	r3, #4
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e013      	b.n	8001984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	611a      	str	r2, [r3, #16]
          break;
 800196e:	e009      	b.n	8001984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	615a      	str	r2, [r3, #20]
          break;
 800197a:	e003      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x130>
          break;
 8001982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2bff      	cmp	r3, #255	; 0xff
 8001988:	d801      	bhi.n	800198e <HAL_GPIO_Init+0x13a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_Init+0x13e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d802      	bhi.n	80019a0 <HAL_GPIO_Init+0x14c>
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x152>
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3b08      	subs	r3, #8
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	210f      	movs	r1, #15
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80b1 	beq.w	8001b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d4:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ec:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2bc>)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a40      	ldr	r2, [pc, #256]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d013      	beq.n	8001a40 <HAL_GPIO_Init+0x1ec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3f      	ldr	r2, [pc, #252]	; (8001b18 <HAL_GPIO_Init+0x2c4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x1e8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <HAL_GPIO_Init+0x2c8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x1e4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3d      	ldr	r2, [pc, #244]	; (8001b20 <HAL_GPIO_Init+0x2cc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x1e0>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a34:	2304      	movs	r3, #4
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a40:	2300      	movs	r3, #0
 8001a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a52:	492f      	ldr	r1, [pc, #188]	; (8001b10 <HAL_GPIO_Init+0x2bc>)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	492c      	ldr	r1, [pc, #176]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4928      	ldr	r1, [pc, #160]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4922      	ldr	r1, [pc, #136]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	491e      	ldr	r1, [pc, #120]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4918      	ldr	r1, [pc, #96]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4914      	ldr	r1, [pc, #80]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d021      	beq.n	8001b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
 8001af0:	e021      	b.n	8001b36 <HAL_GPIO_Init+0x2e2>
 8001af2:	bf00      	nop
 8001af4:	10320000 	.word	0x10320000
 8001af8:	10310000 	.word	0x10310000
 8001afc:	10220000 	.word	0x10220000
 8001b00:	10210000 	.word	0x10210000
 8001b04:	10120000 	.word	0x10120000
 8001b08:	10110000 	.word	0x10110000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40011400 	.word	0x40011400
 8001b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_GPIO_Init+0x304>)
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	4909      	ldr	r1, [pc, #36]	; (8001b58 <HAL_GPIO_Init+0x304>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	3301      	adds	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f47f ae8e 	bne.w	8001868 <HAL_GPIO_Init+0x14>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	372c      	adds	r7, #44	; 0x2c
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]
 8001b96:	4613      	mov	r3, r2
 8001b98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba0:	887a      	ldrh	r2, [r7, #2]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	041a      	lsls	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	611a      	str	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bcc:	887a      	ldrh	r2, [r7, #2]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	041a      	lsls	r2, r3, #16
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	400b      	ands	r3, r1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e26c      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8087 	beq.w	8001d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0c:	4b92      	ldr	r3, [pc, #584]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d00c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c18:	4b8f      	ldr	r3, [pc, #572]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d112      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5e>
 8001c24:	4b8c      	ldr	r3, [pc, #560]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d10b      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c32:	4b89      	ldr	r3, [pc, #548]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d06c      	beq.n	8001d18 <HAL_RCC_OscConfig+0x12c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d168      	bne.n	8001d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e246      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x76>
 8001c54:	4b80      	ldr	r3, [pc, #512]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a7f      	ldr	r2, [pc, #508]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e02e      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x98>
 8001c6a:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7a      	ldr	r2, [pc, #488]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b78      	ldr	r3, [pc, #480]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a77      	ldr	r2, [pc, #476]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e01d      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xbc>
 8001c8e:	4b72      	ldr	r3, [pc, #456]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a71      	ldr	r2, [pc, #452]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b6f      	ldr	r3, [pc, #444]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6e      	ldr	r2, [pc, #440]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0xd4>
 8001ca8:	4b6b      	ldr	r3, [pc, #428]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6a      	ldr	r2, [pc, #424]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	4b68      	ldr	r3, [pc, #416]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a67      	ldr	r2, [pc, #412]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d013      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fbfc 	bl	80014c4 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fbf8 	bl	80014c4 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1fa      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe4>
 8001cee:	e014      	b.n	8001d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fbe8 	bl	80014c4 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fbe4 	bl	80014c4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1e6      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x10c>
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d26:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d32:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d11c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x18c>
 8001d3e:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x176>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e1ba      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4939      	ldr	r1, [pc, #228]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	e03a      	b.n	8001dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fb9d 	bl	80014c4 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fb99 	bl	80014c4 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e19b      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4927      	ldr	r1, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb7c 	bl	80014c4 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fb78 	bl	80014c4 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e17a      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d03a      	beq.n	8001e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d019      	beq.n	8001e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_RCC_OscConfig+0x274>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff fb5c 	bl	80014c4 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fb58 	bl	80014c4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e15a      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 fad8 	bl	80023e4 <RCC_Delay>
 8001e34:	e01c      	b.n	8001e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fb42 	bl	80014c4 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e42:	e00f      	b.n	8001e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fb3e 	bl	80014c4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d908      	bls.n	8001e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e140      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	42420000 	.word	0x42420000
 8001e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b9e      	ldr	r3, [pc, #632]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e9      	bne.n	8001e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a6 	beq.w	8001fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b97      	ldr	r3, [pc, #604]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b94      	ldr	r3, [pc, #592]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a93      	ldr	r2, [pc, #588]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b91      	ldr	r3, [pc, #580]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b8e      	ldr	r3, [pc, #568]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d118      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a8a      	ldr	r2, [pc, #552]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff faff 	bl	80014c4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eca:	f7ff fafb 	bl	80014c4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	; 0x64
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e0fd      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x312>
 8001ef0:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a7a      	ldr	r2, [pc, #488]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	e02d      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x334>
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6213      	str	r3, [r2, #32]
 8001f12:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a72      	ldr	r2, [pc, #456]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	e01c      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_OscConfig+0x356>
 8001f28:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a6c      	ldr	r2, [pc, #432]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6213      	str	r3, [r2, #32]
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a69      	ldr	r2, [pc, #420]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	e00b      	b.n	8001f5a <HAL_RCC_OscConfig+0x36e>
 8001f42:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a66      	ldr	r2, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a63      	ldr	r2, [pc, #396]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d015      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff faaf 	bl	80014c4 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff faab 	bl	80014c4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0ab      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ee      	beq.n	8001f6a <HAL_RCC_OscConfig+0x37e>
 8001f8c:	e014      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fa99 	bl	80014c4 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fa95 	bl	80014c4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e095      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a47      	ldr	r2, [pc, #284]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8081 	beq.w	80020d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d061      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d146      	bne.n	8002076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fee:	f7ff fa69 	bl	80014c4 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff6:	f7ff fa65 	bl	80014c4 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e067      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002008:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d108      	bne.n	8002030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	492d      	ldr	r1, [pc, #180]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a19      	ldr	r1, [r3, #32]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	430b      	orrs	r3, r1
 8002042:	4927      	ldr	r1, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7ff fa39 	bl	80014c4 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff fa35 	bl	80014c4 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e037      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x46a>
 8002074:	e02f      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_OscConfig+0x4fc>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fa22 	bl	80014c4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7ff fa1e 	bl	80014c4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e020      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x498>
 80020a2:	e018      	b.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e013      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d001      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	42420060 	.word	0x42420060

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7ff f972 	bl	80014c4 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff f96e 	bl	80014c4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f8d0 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08003d0c 	.word	0x08003d0c
 80022b8:	20000048 	.word	0x20000048
 80022bc:	2000004c 	.word	0x2000004c

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b490      	push	{r4, r7}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022c6:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022c8:	1d3c      	adds	r4, r7, #4
 80022ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022d0:	f240 2301 	movw	r3, #513	; 0x201
 80022d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x46>
 80022fe:	e02d      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002302:	623b      	str	r3, [r7, #32]
      break;
 8002304:	e02d      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002312:	4413      	add	r3, r2
 8002314:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002318:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	0c5b      	lsrs	r3, r3, #17
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002332:	4413      	add	r3, r2
 8002334:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002338:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233e:	fb02 f203 	mul.w	r2, r2, r3
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	e004      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	623b      	str	r3, [r7, #32]
      break;
 800235a:	e002      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235e:	623b      	str	r3, [r7, #32]
      break;
 8002360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002362:	6a3b      	ldr	r3, [r7, #32]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bc90      	pop	{r4, r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	08003cfc 	.word	0x08003cfc
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	003d0900 	.word	0x003d0900

08002380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b02      	ldr	r3, [pc, #8]	; (8002390 <HAL_RCC_GetHCLKFreq+0x10>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	20000048 	.word	0x20000048

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff2 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08003d1c 	.word	0x08003d1c

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c0:	f7ff ffde 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0adb      	lsrs	r3, r3, #11
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08003d1c 	.word	0x08003d1c

080023e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <RCC_Delay+0x34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <RCC_Delay+0x38>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0a5b      	lsrs	r3, r3, #9
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002400:	bf00      	nop
  }
  while (Delay --);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	60fa      	str	r2, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <RCC_Delay+0x1c>
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	20000048 	.word	0x20000048
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e041      	b.n	80024b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe feae 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f000 fc28 	bl	8002cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d001      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e03a      	b.n	800254e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_TIM_Base_Start_IT+0x98>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00e      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002502:	d009      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_TIM_Base_Start_IT+0x9c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x58>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a13      	ldr	r2, [pc, #76]	; (8002560 <HAL_TIM_Base_Start_IT+0xa0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d111      	bne.n	800253c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b06      	cmp	r3, #6
 8002528:	d010      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	e007      	b.n	800254c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800

08002564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e041      	b.n	80025fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f839 	bl	8002602 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4610      	mov	r0, r2
 80025a4:	f000 fb86 	bl	8002cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_TIM_PWM_Start+0x24>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e022      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d109      	bne.n	8002652 <HAL_TIM_PWM_Start+0x3e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	e015      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d109      	bne.n	800266c <HAL_TIM_PWM_Start+0x58>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e008      	b.n	800267e <HAL_TIM_PWM_Start+0x6a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b01      	cmp	r3, #1
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e05e      	b.n	8002744 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start+0x82>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002694:	e013      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x92>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a4:	e00b      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_PWM_Start+0xa2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b4:	e003      	b.n	80026be <HAL_TIM_PWM_Start+0xaa>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fd74 	bl	80031b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_TIM_PWM_Start+0x138>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d107      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_TIM_PWM_Start+0x138>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00e      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d009      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <HAL_TIM_PWM_Start+0x13c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_TIM_PWM_Start+0xfa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_TIM_PWM_Start+0x140>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d111      	bne.n	8002732 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d010      	beq.n	8002742 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002730:	e007      	b.n	8002742 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800

08002758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0202 	mvn.w	r2, #2
 8002784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa6f 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa62 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fa71 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0204 	mvn.w	r2, #4
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa45 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa38 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fa47 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0208 	mvn.w	r2, #8
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2204      	movs	r2, #4
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa1b 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa0e 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fa1d 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b10      	cmp	r3, #16
 8002868:	d122      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b10      	cmp	r3, #16
 8002876:	d11b      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0210 	mvn.w	r2, #16
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2208      	movs	r2, #8
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f9f1 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9e4 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f9f3 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0201 	mvn.w	r2, #1
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe f996 	bl	8000c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fce1 	bl	80032ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9b7 	bl	8002ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b20      	cmp	r3, #32
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0220 	mvn.w	r2, #32
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fcac 	bl	80032b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800297e:	2302      	movs	r3, #2
 8002980:	e0ac      	b.n	8002adc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	f200 809f 	bhi.w	8002ad0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002992:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	080029cd 	.word	0x080029cd
 800299c:	08002ad1 	.word	0x08002ad1
 80029a0:	08002ad1 	.word	0x08002ad1
 80029a4:	08002ad1 	.word	0x08002ad1
 80029a8:	08002a0d 	.word	0x08002a0d
 80029ac:	08002ad1 	.word	0x08002ad1
 80029b0:	08002ad1 	.word	0x08002ad1
 80029b4:	08002ad1 	.word	0x08002ad1
 80029b8:	08002a4f 	.word	0x08002a4f
 80029bc:	08002ad1 	.word	0x08002ad1
 80029c0:	08002ad1 	.word	0x08002ad1
 80029c4:	08002ad1 	.word	0x08002ad1
 80029c8:	08002a8f 	.word	0x08002a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f9d0 	bl	8002d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6999      	ldr	r1, [r3, #24]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	619a      	str	r2, [r3, #24]
      break;
 8002a0a:	e062      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fa16 	bl	8002e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6999      	ldr	r1, [r3, #24]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	619a      	str	r2, [r3, #24]
      break;
 8002a4c:	e041      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fa5f 	bl	8002f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0208 	orr.w	r2, r2, #8
 8002a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0204 	bic.w	r2, r2, #4
 8002a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	61da      	str	r2, [r3, #28]
      break;
 8002a8c:	e021      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 faa9 	bl	8002fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69d9      	ldr	r1, [r3, #28]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	021a      	lsls	r2, r3, #8
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	61da      	str	r2, [r3, #28]
      break;
 8002ace:	e000      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_TIM_ConfigClockSource+0x18>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0b3      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x180>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b34:	d03e      	beq.n	8002bb4 <HAL_TIM_ConfigClockSource+0xd0>
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3a:	f200 8087 	bhi.w	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b42:	f000 8085 	beq.w	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	d87f      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b4c:	2b70      	cmp	r3, #112	; 0x70
 8002b4e:	d01a      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0xa2>
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d87b      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b54:	2b60      	cmp	r3, #96	; 0x60
 8002b56:	d050      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x116>
 8002b58:	2b60      	cmp	r3, #96	; 0x60
 8002b5a:	d877      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b5c:	2b50      	cmp	r3, #80	; 0x50
 8002b5e:	d03c      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0xf6>
 8002b60:	2b50      	cmp	r3, #80	; 0x50
 8002b62:	d873      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d058      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x136>
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d86f      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b6c:	2b30      	cmp	r3, #48	; 0x30
 8002b6e:	d064      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x156>
 8002b70:	2b30      	cmp	r3, #48	; 0x30
 8002b72:	d86b      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d060      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x156>
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d867      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05c      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x156>
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d05a      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b84:	e062      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f000 faee 	bl	8003176 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ba8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	609a      	str	r2, [r3, #8]
      break;
 8002bb2:	e04e      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f000 fad7 	bl	8003176 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd6:	609a      	str	r2, [r3, #8]
      break;
 8002bd8:	e03b      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f000 fa4e 	bl	8003088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2150      	movs	r1, #80	; 0x50
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 faa5 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002bf8:	e02b      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 fa6c 	bl	80030e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2160      	movs	r1, #96	; 0x60
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fa95 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002c18:	e01b      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fa2e 	bl	8003088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2140      	movs	r1, #64	; 0x40
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fa85 	bl	8003142 <TIM_ITRx_SetConfig>
      break;
 8002c38:	e00b      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f000 fa7c 	bl	8003142 <TIM_ITRx_SetConfig>
        break;
 8002c4a:	e002      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c4c:	bf00      	nop
 8002c4e:	e000      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_Base_SetConfig+0x30>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd2:	d007      	beq.n	8002ce4 <TIM_Base_SetConfig+0x30>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <TIM_Base_SetConfig+0xbc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0x30>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d108      	bne.n	8002cf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00b      	beq.n	8002d16 <TIM_Base_SetConfig+0x62>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d04:	d007      	beq.n	8002d16 <TIM_Base_SetConfig+0x62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <TIM_Base_SetConfig+0xbc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_Base_SetConfig+0x62>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <TIM_Base_SetConfig+0xc0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d108      	bne.n	8002d28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <TIM_Base_SetConfig+0xb8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d103      	bne.n	8002d5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	615a      	str	r2, [r3, #20]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800

08002d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f023 0302 	bic.w	r3, r3, #2
 8002dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <TIM_OC1_SetConfig+0xc8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10c      	bne.n	8002dee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0308 	bic.w	r3, r3, #8
 8002dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 0304 	bic.w	r3, r3, #4
 8002dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <TIM_OC1_SetConfig+0xc8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d111      	bne.n	8002e1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	621a      	str	r2, [r3, #32]
}
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00

08002e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0210 	bic.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0320 	bic.w	r3, r3, #32
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <TIM_OC2_SetConfig+0xd0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10d      	bne.n	8002ec0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <TIM_OC2_SetConfig+0xd0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d113      	bne.n	8002ef0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00

08002f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0303 	bic.w	r3, r3, #3
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <TIM_OC3_SetConfig+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10d      	bne.n	8002f92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <TIM_OC3_SetConfig+0xd0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d113      	bne.n	8002fc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	621a      	str	r2, [r3, #32]
}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00

08002fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	031b      	lsls	r3, r3, #12
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <TIM_OC4_SetConfig+0x98>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d109      	bne.n	8003060 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	019b      	lsls	r3, r3, #6
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40012c00 	.word	0x40012c00

08003088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0201 	bic.w	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f023 030a 	bic.w	r3, r3, #10
 80030c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f023 0210 	bic.w	r2, r3, #16
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800310e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	031b      	lsls	r3, r3, #12
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003120:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	621a      	str	r2, [r3, #32]
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	f043 0307 	orr.w	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003176:	b480      	push	{r7}
 8003178:	b087      	sub	sp, #28
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003190:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	021a      	lsls	r2, r3, #8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	431a      	orrs	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4313      	orrs	r3, r2
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	609a      	str	r2, [r3, #8]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2201      	movs	r2, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	401a      	ands	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	621a      	str	r2, [r3, #32]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003210:	2302      	movs	r3, #2
 8003212:	e046      	b.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003260:	d009      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a12      	ldr	r2, [pc, #72]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10c      	bne.n	8003290 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800327c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800

080032b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e03f      	b.n	800336e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd ffc2 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	; 0x24
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800331e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fc25 	bl	8003b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b08a      	sub	sp, #40	; 0x28
 800337a:	af02      	add	r7, sp, #8
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b20      	cmp	r3, #32
 8003394:	d17c      	bne.n	8003490 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_UART_Transmit+0x2c>
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e075      	b.n	8003492 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_UART_Transmit+0x3e>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e06e      	b.n	8003492 <HAL_UART_Transmit+0x11c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2221      	movs	r2, #33	; 0x21
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ca:	f7fe f87b 	bl	80014c4 <HAL_GetTick>
 80033ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	88fa      	ldrh	r2, [r7, #6]
 80033da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e4:	d108      	bne.n	80033f8 <HAL_UART_Transmit+0x82>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e003      	b.n	8003400 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003408:	e02a      	b.n	8003460 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2200      	movs	r2, #0
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fa11 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e036      	b.n	8003492 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	3302      	adds	r3, #2
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	e007      	b.n	8003452 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	3301      	adds	r3, #1
 8003450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1cf      	bne.n	800340a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	2140      	movs	r1, #64	; 0x40
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f9e1 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e006      	b.n	8003492 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e000      	b.n	8003492 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003490:	2302      	movs	r3, #2
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_UART_IRQHandler+0x52>
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa99 	bl	8003a1e <UART_Receive_IT>
      return;
 80034ec:	e17b      	b.n	80037e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80b1 	beq.w	8003658 <HAL_UART_IRQHandler+0x1bc>
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_UART_IRQHandler+0x70>
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80a6 	beq.w	8003658 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_UART_IRQHandler+0x90>
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_UART_IRQHandler+0xb0>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0202 	orr.w	r2, r3, #2
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_UART_IRQHandler+0xd0>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0204 	orr.w	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <HAL_UART_IRQHandler+0xfa>
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <HAL_UART_IRQHandler+0xee>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f043 0208 	orr.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 811e 	beq.w	80037dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <HAL_UART_IRQHandler+0x11e>
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa32 	bl	8003a1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <HAL_UART_IRQHandler+0x146>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d031      	beq.n	8003646 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f974 	bl	80038d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d023      	beq.n	800363e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d013      	beq.n	8003636 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	4a76      	ldr	r2, [pc, #472]	; (80037ec <HAL_UART_IRQHandler+0x350>)
 8003614:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe f8a4 	bl	8001768 <HAL_DMA_Abort_IT>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	e00e      	b.n	8003654 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8ec 	bl	8003814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	e00a      	b.n	8003654 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8e8 	bl	8003814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	e006      	b.n	8003654 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8e4 	bl	8003814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003652:	e0c3      	b.n	80037dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	bf00      	nop
    return;
 8003656:	e0c1      	b.n	80037dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 80a1 	bne.w	80037a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 809b 	beq.w	80037a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 8095 	beq.w	80037a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04e      	beq.n	800373c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036a8:	8a3b      	ldrh	r3, [r7, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8098 	beq.w	80037e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036b4:	8a3a      	ldrh	r2, [r7, #16]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	f080 8092 	bcs.w	80037e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8a3a      	ldrh	r2, [r7, #16]
 80036c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d02b      	beq.n	8003724 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0210 	bic.w	r2, r2, #16
 8003718:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd ffe7 	bl	80016f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	b29b      	uxth	r3, r3
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f876 	bl	8003826 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800373a:	e051      	b.n	80037e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003744:	b29b      	uxth	r3, r3
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d047      	beq.n	80037e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003754:	8a7b      	ldrh	r3, [r7, #18]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d044      	beq.n	80037e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003768:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0210 	bic.w	r2, r2, #16
 8003796:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003798:	8a7b      	ldrh	r3, [r7, #18]
 800379a:	4619      	mov	r1, r3
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f842 	bl	8003826 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037a2:	e01f      	b.n	80037e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_UART_IRQHandler+0x324>
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8c9 	bl	8003950 <UART_Transmit_IT>
    return;
 80037be:	e012      	b.n	80037e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <HAL_UART_IRQHandler+0x34a>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f90a 	bl	80039ee <UART_EndTransmit_IT>
    return;
 80037da:	e004      	b.n	80037e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80037dc:	bf00      	nop
 80037de:	e002      	b.n	80037e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80037e4:	bf00      	nop
  }
}
 80037e6:	3728      	adds	r7, #40	; 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	08003929 	.word	0x08003929

080037f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384c:	e02c      	b.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d028      	beq.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0x30>
 800385c:	f7fd fe32 	bl	80014c4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	429a      	cmp	r2, r3
 800386a:	d21d      	bcs.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800387a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e00f      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d0c3      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d107      	bne.n	8003910 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0210 	bic.w	r2, r2, #16
 800390e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7ff ff66 	bl	8003814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b21      	cmp	r3, #33	; 0x21
 8003962:	d13e      	bne.n	80039e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d114      	bne.n	8003998 <UART_Transmit_IT+0x48>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d110      	bne.n	8003998 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	1c9a      	adds	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]
 8003996:	e008      	b.n	80039aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	1c59      	adds	r1, r3, #1
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6211      	str	r1, [r2, #32]
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4619      	mov	r1, r3
 80039b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10f      	bne.n	80039de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff feee 	bl	80037f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b22      	cmp	r3, #34	; 0x22
 8003a30:	f040 8099 	bne.w	8003b66 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d117      	bne.n	8003a6e <UART_Receive_IT+0x50>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d113      	bne.n	8003a6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	1c9a      	adds	r2, r3, #2
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a6c:	e026      	b.n	8003abc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a80:	d007      	beq.n	8003a92 <UART_Receive_IT+0x74>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <UART_Receive_IT+0x82>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e008      	b.n	8003ab2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d148      	bne.n	8003b62 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0220 	bic.w	r2, r2, #32
 8003ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d123      	bne.n	8003b58 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0210 	bic.w	r2, r2, #16
 8003b24:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d10a      	bne.n	8003b4a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fe68 	bl	8003826 <HAL_UARTEx_RxEventCallback>
 8003b56:	e002      	b.n	8003b5e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fe52 	bl	8003802 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e002      	b.n	8003b68 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003baa:	f023 030c 	bic.w	r3, r3, #12
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2c      	ldr	r2, [pc, #176]	; (8003c84 <UART_SetConfig+0x114>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7fe fbf0 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	e002      	b.n	8003be6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003be0:	f7fe fbd8 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8003be4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <UART_SetConfig+0x118>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	0119      	lsls	r1, r3, #4
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <UART_SetConfig+0x118>)
 8003c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2064      	movs	r0, #100	; 0x64
 8003c26:	fb00 f303 	mul.w	r3, r0, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	3332      	adds	r3, #50	; 0x32
 8003c30:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <UART_SetConfig+0x118>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3c:	4419      	add	r1, r3
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009a      	lsls	r2, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <UART_SetConfig+0x118>)
 8003c56:	fba3 0302 	umull	r0, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2064      	movs	r0, #100	; 0x64
 8003c5e:	fb00 f303 	mul.w	r3, r0, r3
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	3332      	adds	r3, #50	; 0x32
 8003c68:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <UART_SetConfig+0x118>)
 8003c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	f003 020f 	and.w	r2, r3, #15
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	440a      	add	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40013800 	.word	0x40013800
 8003c88:	51eb851f 	.word	0x51eb851f

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	2600      	movs	r6, #0
 8003c90:	4d0c      	ldr	r5, [pc, #48]	; (8003cc4 <__libc_init_array+0x38>)
 8003c92:	4c0d      	ldr	r4, [pc, #52]	; (8003cc8 <__libc_init_array+0x3c>)
 8003c94:	1b64      	subs	r4, r4, r5
 8003c96:	10a4      	asrs	r4, r4, #2
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	f000 f822 	bl	8003ce4 <_init>
 8003ca0:	2600      	movs	r6, #0
 8003ca2:	4d0a      	ldr	r5, [pc, #40]	; (8003ccc <__libc_init_array+0x40>)
 8003ca4:	4c0a      	ldr	r4, [pc, #40]	; (8003cd0 <__libc_init_array+0x44>)
 8003ca6:	1b64      	subs	r4, r4, r5
 8003ca8:	10a4      	asrs	r4, r4, #2
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08003d24 	.word	0x08003d24
 8003cc8:	08003d24 	.word	0x08003d24
 8003ccc:	08003d24 	.word	0x08003d24
 8003cd0:	08003d28 	.word	0x08003d28

08003cd4 <memset>:
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4402      	add	r2, r0
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d100      	bne.n	8003cde <memset+0xa>
 8003cdc:	4770      	bx	lr
 8003cde:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce2:	e7f9      	b.n	8003cd8 <memset+0x4>

08003ce4 <_init>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr

08003cf0 <_fini>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	bf00      	nop
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr
