
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c40  08003c40  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003c40  08003c40  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c40  08003c40  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000054  08003c9c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003c9c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb64  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205a  00000000  00000000  0002bbe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002dc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001776a  00000000  00000000  0002e940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f1ad  00000000  00000000  000460aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086ad6  00000000  00000000  00055257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000dbd2d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c00  00000000  00000000  000dbd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000347c  00000000  00000000  000dc980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c00 	.word	0x08003c00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08003c00 	.word	0x08003c00

0800014c <fsm_for_input_processing>:
#include "software_timer.h"

enum ButtonState { BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND };
enum ButtonState buttonState[NO_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};

void fsm_for_input_processing ( void ){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e0d8      	b.n	800030a <fsm_for_input_processing+0x1be>
		switch ( buttonState[i]){
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a70      	ldr	r2, [pc, #448]	; (800031c <fsm_for_input_processing+0x1d0>)
 800015c:	5cd3      	ldrb	r3, [r2, r3]
 800015e:	2b02      	cmp	r3, #2
 8000160:	f000 80bf 	beq.w	80002e2 <fsm_for_input_processing+0x196>
 8000164:	2b02      	cmp	r3, #2
 8000166:	f300 80c8 	bgt.w	80002fa <fsm_for_input_processing+0x1ae>
 800016a:	2b00      	cmp	r3, #0
 800016c:	d003      	beq.n	8000176 <fsm_for_input_processing+0x2a>
 800016e:	2b01      	cmp	r3, #1
 8000170:	f000 809f 	beq.w	80002b2 <fsm_for_input_processing+0x166>
			if (!is_button_pressed (i)){
				buttonState [i] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000174:	e0c1      	b.n	80002fa <fsm_for_input_processing+0x1ae>
			if( is_button_pressed(i)){
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	4618      	mov	r0, r3
 800017a:	f000 f985 	bl	8000488 <is_button_pressed>
 800017e:	4603      	mov	r3, r0
 8000180:	2b00      	cmp	r3, #0
 8000182:	f000 808e 	beq.w	80002a2 <fsm_for_input_processing+0x156>
				buttonState [i] = BUTTON_PRESSED;
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4a64      	ldr	r2, [pc, #400]	; (800031c <fsm_for_input_processing+0x1d0>)
 800018a:	2101      	movs	r1, #1
 800018c:	54d1      	strb	r1, [r2, r3]
				switch (i){
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b03      	cmp	r3, #3
 8000192:	f200 8088 	bhi.w	80002a6 <fsm_for_input_processing+0x15a>
 8000196:	a201      	add	r2, pc, #4	; (adr r2, 800019c <fsm_for_input_processing+0x50>)
 8000198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019c:	080001ad 	.word	0x080001ad
 80001a0:	080001cb 	.word	0x080001cb
 80001a4:	080001ed 	.word	0x080001ed
 80001a8:	08000243 	.word	0x08000243
					pedestrian = 1;
 80001ac:	4b5c      	ldr	r3, [pc, #368]	; (8000320 <fsm_for_input_processing+0x1d4>)
 80001ae:	2201      	movs	r2, #1
 80001b0:	601a      	str	r2, [r3, #0]
					timeCycle = (timeDurations[0] + timeDurations[1] + timeDurations[2]) * 2;
 80001b2:	4b5c      	ldr	r3, [pc, #368]	; (8000324 <fsm_for_input_processing+0x1d8>)
 80001b4:	681a      	ldr	r2, [r3, #0]
 80001b6:	4b5b      	ldr	r3, [pc, #364]	; (8000324 <fsm_for_input_processing+0x1d8>)
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	441a      	add	r2, r3
 80001bc:	4b59      	ldr	r3, [pc, #356]	; (8000324 <fsm_for_input_processing+0x1d8>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	4413      	add	r3, r2
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	4a58      	ldr	r2, [pc, #352]	; (8000328 <fsm_for_input_processing+0x1dc>)
 80001c6:	6013      	str	r3, [r2, #0]
					break;
 80001c8:	e072      	b.n	80002b0 <fsm_for_input_processing+0x164>
					initState = 0;
 80001ca:	4b58      	ldr	r3, [pc, #352]	; (800032c <fsm_for_input_processing+0x1e0>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
					if (mode >= 5) mode = 1;
 80001d0:	4b57      	ldr	r3, [pc, #348]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b04      	cmp	r3, #4
 80001d6:	dd03      	ble.n	80001e0 <fsm_for_input_processing+0x94>
 80001d8:	4b55      	ldr	r3, [pc, #340]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001da:	2201      	movs	r2, #1
 80001dc:	601a      	str	r2, [r3, #0]
					break;
 80001de:	e067      	b.n	80002b0 <fsm_for_input_processing+0x164>
					else mode++;
 80001e0:	4b53      	ldr	r3, [pc, #332]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3301      	adds	r3, #1
 80001e6:	4a52      	ldr	r2, [pc, #328]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001e8:	6013      	str	r3, [r2, #0]
					break;
 80001ea:	e061      	b.n	80002b0 <fsm_for_input_processing+0x164>
					if (mode == 2) {
 80001ec:	4b50      	ldr	r3, [pc, #320]	; (8000330 <fsm_for_input_processing+0x1e4>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b02      	cmp	r3, #2
 80001f2:	d110      	bne.n	8000216 <fsm_for_input_processing+0xca>
						setTimer1(10000);
 80001f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80001f8:	f000 feb2 	bl	8000f60 <setTimer1>
						if (trafficLed0 >= 2) trafficLed0 = 0;
 80001fc:	4b4d      	ldr	r3, [pc, #308]	; (8000334 <fsm_for_input_processing+0x1e8>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b01      	cmp	r3, #1
 8000202:	dd03      	ble.n	800020c <fsm_for_input_processing+0xc0>
 8000204:	4b4b      	ldr	r3, [pc, #300]	; (8000334 <fsm_for_input_processing+0x1e8>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	e004      	b.n	8000216 <fsm_for_input_processing+0xca>
						else trafficLed0++;
 800020c:	4b49      	ldr	r3, [pc, #292]	; (8000334 <fsm_for_input_processing+0x1e8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	4a48      	ldr	r2, [pc, #288]	; (8000334 <fsm_for_input_processing+0x1e8>)
 8000214:	6013      	str	r3, [r2, #0]
					if (mode >= 3 && mode < 6) {
 8000216:	4b46      	ldr	r3, [pc, #280]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b02      	cmp	r3, #2
 800021c:	dd45      	ble.n	80002aa <fsm_for_input_processing+0x15e>
 800021e:	4b44      	ldr	r3, [pc, #272]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b05      	cmp	r3, #5
 8000224:	dc41      	bgt.n	80002aa <fsm_for_input_processing+0x15e>
						if (duration >= 99) duration = 1;
 8000226:	4b44      	ldr	r3, [pc, #272]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b62      	cmp	r3, #98	; 0x62
 800022c:	dd03      	ble.n	8000236 <fsm_for_input_processing+0xea>
 800022e:	4b42      	ldr	r3, [pc, #264]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000230:	2201      	movs	r2, #1
 8000232:	601a      	str	r2, [r3, #0]
					break;
 8000234:	e039      	b.n	80002aa <fsm_for_input_processing+0x15e>
						else duration++;
 8000236:	4b40      	ldr	r3, [pc, #256]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3301      	adds	r3, #1
 800023c:	4a3e      	ldr	r2, [pc, #248]	; (8000338 <fsm_for_input_processing+0x1ec>)
 800023e:	6013      	str	r3, [r2, #0]
					break;
 8000240:	e033      	b.n	80002aa <fsm_for_input_processing+0x15e>
					if (mode == 2) {
 8000242:	4b3b      	ldr	r3, [pc, #236]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d110      	bne.n	800026c <fsm_for_input_processing+0x120>
						setTimer1(10000);
 800024a:	f242 7010 	movw	r0, #10000	; 0x2710
 800024e:	f000 fe87 	bl	8000f60 <setTimer1>
						if (trafficLed1 >= 2) trafficLed1 = 0;
 8000252:	4b3a      	ldr	r3, [pc, #232]	; (800033c <fsm_for_input_processing+0x1f0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	dd03      	ble.n	8000262 <fsm_for_input_processing+0x116>
 800025a:	4b38      	ldr	r3, [pc, #224]	; (800033c <fsm_for_input_processing+0x1f0>)
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	e004      	b.n	800026c <fsm_for_input_processing+0x120>
						else trafficLed1++;
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <fsm_for_input_processing+0x1f0>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3301      	adds	r3, #1
 8000268:	4a34      	ldr	r2, [pc, #208]	; (800033c <fsm_for_input_processing+0x1f0>)
 800026a:	6013      	str	r3, [r2, #0]
					if (mode == 3) timeDurations[0] = duration;
 800026c:	4b30      	ldr	r3, [pc, #192]	; (8000330 <fsm_for_input_processing+0x1e4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b03      	cmp	r3, #3
 8000272:	d104      	bne.n	800027e <fsm_for_input_processing+0x132>
 8000274:	4b30      	ldr	r3, [pc, #192]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2a      	ldr	r2, [pc, #168]	; (8000324 <fsm_for_input_processing+0x1d8>)
 800027a:	6013      	str	r3, [r2, #0]
					break;
 800027c:	e017      	b.n	80002ae <fsm_for_input_processing+0x162>
					else if (mode == 4) timeDurations[2] = duration;
 800027e:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b04      	cmp	r3, #4
 8000284:	d104      	bne.n	8000290 <fsm_for_input_processing+0x144>
 8000286:	4b2c      	ldr	r3, [pc, #176]	; (8000338 <fsm_for_input_processing+0x1ec>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a26      	ldr	r2, [pc, #152]	; (8000324 <fsm_for_input_processing+0x1d8>)
 800028c:	6093      	str	r3, [r2, #8]
					break;
 800028e:	e00e      	b.n	80002ae <fsm_for_input_processing+0x162>
					else if (mode == 5) timeDurations[1] = duration;
 8000290:	4b27      	ldr	r3, [pc, #156]	; (8000330 <fsm_for_input_processing+0x1e4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b05      	cmp	r3, #5
 8000296:	d10a      	bne.n	80002ae <fsm_for_input_processing+0x162>
 8000298:	4b27      	ldr	r3, [pc, #156]	; (8000338 <fsm_for_input_processing+0x1ec>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a21      	ldr	r2, [pc, #132]	; (8000324 <fsm_for_input_processing+0x1d8>)
 800029e:	6053      	str	r3, [r2, #4]
					break;
 80002a0:	e005      	b.n	80002ae <fsm_for_input_processing+0x162>
			}
 80002a2:	bf00      	nop
 80002a4:	e02e      	b.n	8000304 <fsm_for_input_processing+0x1b8>
					break;
 80002a6:	bf00      	nop
 80002a8:	e02c      	b.n	8000304 <fsm_for_input_processing+0x1b8>
					break;
 80002aa:	bf00      	nop
 80002ac:	e02a      	b.n	8000304 <fsm_for_input_processing+0x1b8>
					break;
 80002ae:	bf00      	nop
			break ;
 80002b0:	e028      	b.n	8000304 <fsm_for_input_processing+0x1b8>
			if (!is_button_pressed(i)){
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f8e7 	bl	8000488 <is_button_pressed>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d104      	bne.n	80002ca <fsm_for_input_processing+0x17e>
				buttonState[i] = BUTTON_RELEASED;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4a16      	ldr	r2, [pc, #88]	; (800031c <fsm_for_input_processing+0x1d0>)
 80002c4:	2100      	movs	r1, #0
 80002c6:	54d1      	strb	r1, [r2, r3]
			break;
 80002c8:	e019      	b.n	80002fe <fsm_for_input_processing+0x1b2>
				if( is_button_pressed_1s (i)){
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f8f5 	bl	80004bc <is_button_pressed_1s>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d012      	beq.n	80002fe <fsm_for_input_processing+0x1b2>
					buttonState [i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a10      	ldr	r2, [pc, #64]	; (800031c <fsm_for_input_processing+0x1d0>)
 80002dc:	2102      	movs	r1, #2
 80002de:	54d1      	strb	r1, [r2, r3]
			break;
 80002e0:	e00d      	b.n	80002fe <fsm_for_input_processing+0x1b2>
			if (!is_button_pressed (i)){
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f8cf 	bl	8000488 <is_button_pressed>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d108      	bne.n	8000302 <fsm_for_input_processing+0x1b6>
				buttonState [i] = BUTTON_RELEASED;
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <fsm_for_input_processing+0x1d0>)
 80002f4:	2100      	movs	r1, #0
 80002f6:	54d1      	strb	r1, [r2, r3]
			break;
 80002f8:	e003      	b.n	8000302 <fsm_for_input_processing+0x1b6>
			break;
 80002fa:	bf00      	nop
 80002fc:	e002      	b.n	8000304 <fsm_for_input_processing+0x1b8>
			break;
 80002fe:	bf00      	nop
 8000300:	e000      	b.n	8000304 <fsm_for_input_processing+0x1b8>
			break;
 8000302:	bf00      	nop
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	3301      	adds	r3, #1
 8000308:	71fb      	strb	r3, [r7, #7]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	2b03      	cmp	r3, #3
 800030e:	f67f af23 	bls.w	8000158 <fsm_for_input_processing+0xc>
		}
	}
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000094 	.word	0x20000094
 8000320:	2000008c 	.word	0x2000008c
 8000324:	20000000 	.word	0x20000000
 8000328:	20000090 	.word	0x20000090
 800032c:	20000074 	.word	0x20000074
 8000330:	20000070 	.word	0x20000070
 8000334:	20000078 	.word	0x20000078
 8000338:	20000088 	.word	0x20000088
 800033c:	2000007c 	.word	0x2000007c

08000340 <button_reading>:
static uint8_t flagForButtonPress1s [ NO_OF_BUTTONS ];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s [ NO_OF_BUTTONS ];

void button_reading ( void ){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	// Repeat for 4 buttons
	for (unsigned int i = 0; i < NO_OF_BUTTONS ; i++){
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e085      	b.n	8000458 <button_reading+0x118>
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 800034c:	4a47      	ldr	r2, [pc, #284]	; (800046c <button_reading+0x12c>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4413      	add	r3, r2
 8000352:	7819      	ldrb	r1, [r3, #0]
 8000354:	4a46      	ldr	r2, [pc, #280]	; (8000470 <button_reading+0x130>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	460a      	mov	r2, r1
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d83b      	bhi.n	80003dc <button_reading+0x9c>
 8000364:	a201      	add	r2, pc, #4	; (adr r2, 800036c <button_reading+0x2c>)
 8000366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036a:	bf00      	nop
 800036c:	0800037d 	.word	0x0800037d
 8000370:	08000395 	.word	0x08000395
 8000374:	080003ad 	.word	0x080003ad
 8000378:	080003c5 	.word	0x080003c5
		switch (i){
		case 0:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (B0_GPIO_Port, B0_Pin);
 800037c:	2101      	movs	r1, #1
 800037e:	483d      	ldr	r0, [pc, #244]	; (8000474 <button_reading+0x134>)
 8000380:	f001 fb7a 	bl	8001a78 <HAL_GPIO_ReadPin>
 8000384:	4603      	mov	r3, r0
 8000386:	4619      	mov	r1, r3
 8000388:	4a38      	ldr	r2, [pc, #224]	; (800046c <button_reading+0x12c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	460a      	mov	r2, r1
 8000390:	701a      	strb	r2, [r3, #0]
			break ;
 8000392:	e024      	b.n	80003de <button_reading+0x9e>
		case 1:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (A1_GPIO_Port, A1_Pin);
 8000394:	2102      	movs	r1, #2
 8000396:	4837      	ldr	r0, [pc, #220]	; (8000474 <button_reading+0x134>)
 8000398:	f001 fb6e 	bl	8001a78 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	4619      	mov	r1, r3
 80003a0:	4a32      	ldr	r2, [pc, #200]	; (800046c <button_reading+0x12c>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	460a      	mov	r2, r1
 80003a8:	701a      	strb	r2, [r3, #0]
			break ;
 80003aa:	e018      	b.n	80003de <button_reading+0x9e>
		case 2:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (B3_GPIO_Port , B3_Pin);
 80003ac:	2110      	movs	r1, #16
 80003ae:	4831      	ldr	r0, [pc, #196]	; (8000474 <button_reading+0x134>)
 80003b0:	f001 fb62 	bl	8001a78 <HAL_GPIO_ReadPin>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4619      	mov	r1, r3
 80003b8:	4a2c      	ldr	r2, [pc, #176]	; (800046c <button_reading+0x12c>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4413      	add	r3, r2
 80003be:	460a      	mov	r2, r1
 80003c0:	701a      	strb	r2, [r3, #0]
			break ;
 80003c2:	e00c      	b.n	80003de <button_reading+0x9e>
		case 3:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (B4_GPIO_Port , B4_Pin);
 80003c4:	2101      	movs	r1, #1
 80003c6:	482c      	ldr	r0, [pc, #176]	; (8000478 <button_reading+0x138>)
 80003c8:	f001 fb56 	bl	8001a78 <HAL_GPIO_ReadPin>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4619      	mov	r1, r3
 80003d0:	4a26      	ldr	r2, [pc, #152]	; (800046c <button_reading+0x12c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4413      	add	r3, r2
 80003d6:	460a      	mov	r2, r1
 80003d8:	701a      	strb	r2, [r3, #0]
			break ;
 80003da:	e000      	b.n	80003de <button_reading+0x9e>
		default :
			break ;
 80003dc:	bf00      	nop
		}
		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i]){
 80003de:	4a23      	ldr	r2, [pc, #140]	; (800046c <button_reading+0x12c>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4413      	add	r3, r2
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	4922      	ldr	r1, [pc, #136]	; (8000470 <button_reading+0x130>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	440b      	add	r3, r1
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d12f      	bne.n	8000452 <button_reading+0x112>
			buttonBuffer [i] = debounceButtonBuffer1 [i];
 80003f2:	4a1e      	ldr	r2, [pc, #120]	; (800046c <button_reading+0x12c>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4413      	add	r3, r2
 80003f8:	7819      	ldrb	r1, [r3, #0]
 80003fa:	4a20      	ldr	r2, [pc, #128]	; (800047c <button_reading+0x13c>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	460a      	mov	r2, r1
 8000402:	701a      	strb	r2, [r3, #0]
			// if a button is pressed , we start counting
			if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 8000404:	4a1d      	ldr	r2, [pc, #116]	; (800047c <button_reading+0x13c>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d116      	bne.n	800043e <button_reading+0xfe>
				if( counterForButtonPress1s [i] < DURATION_FOR_AUTO_INCREASING ){
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <button_reading+0x140>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000418:	2b63      	cmp	r3, #99	; 0x63
 800041a:	d80a      	bhi.n	8000432 <button_reading+0xf2>
					counterForButtonPress1s [i]++;
 800041c:	4a18      	ldr	r2, [pc, #96]	; (8000480 <button_reading+0x140>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000424:	3301      	adds	r3, #1
 8000426:	b299      	uxth	r1, r3
 8000428:	4a15      	ldr	r2, [pc, #84]	; (8000480 <button_reading+0x140>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000430:	e00f      	b.n	8000452 <button_reading+0x112>
				}
				else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed.
					flagForButtonPress1s [i] = 1;
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <button_reading+0x144>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4413      	add	r3, r2
 8000438:	2201      	movs	r2, #1
 800043a:	701a      	strb	r2, [r3, #0]
 800043c:	e009      	b.n	8000452 <button_reading+0x112>
				}
			}
			else {
				counterForButtonPress1s [i] = 0;
 800043e:	4a10      	ldr	r2, [pc, #64]	; (8000480 <button_reading+0x140>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2100      	movs	r1, #0
 8000444:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s [i] = 0;
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <button_reading+0x144>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	for (unsigned int i = 0; i < NO_OF_BUTTONS ; i++){
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3301      	adds	r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b03      	cmp	r3, #3
 800045c:	f67f af76 	bls.w	800034c <button_reading+0xc>
			}
		}
	}
}
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	2000009c 	.word	0x2000009c
 8000470:	200000a0 	.word	0x200000a0
 8000474:	40010800 	.word	0x40010800
 8000478:	40010c00 	.word	0x40010c00
 800047c:	20000098 	.word	0x20000098
 8000480:	200000a8 	.word	0x200000a8
 8000484:	200000a4 	.word	0x200000a4

08000488 <is_button_pressed>:

unsigned char is_button_pressed ( uint8_t index ){
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0;
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d901      	bls.n	800049c <is_button_pressed+0x14>
 8000498:	2300      	movs	r3, #0
 800049a:	e007      	b.n	80004ac <is_button_pressed+0x24>
	return (buttonBuffer [index] == BUTTON_IS_PRESSED);
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <is_button_pressed+0x30>)
 80004a0:	5cd3      	ldrb	r3, [r2, r3]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf0c      	ite	eq
 80004a6:	2301      	moveq	r3, #1
 80004a8:	2300      	movne	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000098 	.word	0x20000098

080004bc <is_button_pressed_1s>:

unsigned char is_button_pressed_1s ( unsigned char index ){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0xff;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d901      	bls.n	80004d0 <is_button_pressed_1s+0x14>
 80004cc:	23ff      	movs	r3, #255	; 0xff
 80004ce:	e007      	b.n	80004e0 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s [index] == 1);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4a06      	ldr	r2, [pc, #24]	; (80004ec <is_button_pressed_1s+0x30>)
 80004d4:	5cd3      	ldrb	r3, [r2, r3]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	bf0c      	ite	eq
 80004da:	2301      	moveq	r3, #1
 80004dc:	2300      	movne	r3, #0
 80004de:	b2db      	uxtb	r3, r3
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200000a4 	.word	0x200000a4

080004f0 <updateTrafficLED>:
#include "main.h"
#include "led_processing.h"



void updateTrafficLED(int trafficLed0, int trafficLed1){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	switch (trafficLed0){
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d021      	beq.n	8000544 <updateTrafficLED+0x54>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b02      	cmp	r3, #2
 8000504:	dc2a      	bgt.n	800055c <updateTrafficLED+0x6c>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d003      	beq.n	8000514 <updateTrafficLED+0x24>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d00c      	beq.n	800052c <updateTrafficLED+0x3c>
	case 2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
		break;
	default:
		break;
 8000512:	e023      	b.n	800055c <updateTrafficLED+0x6c>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051a:	482a      	ldr	r0, [pc, #168]	; (80005c4 <updateTrafficLED+0xd4>)
 800051c:	f001 fac3 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	2108      	movs	r1, #8
 8000524:	4828      	ldr	r0, [pc, #160]	; (80005c8 <updateTrafficLED+0xd8>)
 8000526:	f001 fabe 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 800052a:	e018      	b.n	800055e <updateTrafficLED+0x6e>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4824      	ldr	r0, [pc, #144]	; (80005c4 <updateTrafficLED+0xd4>)
 8000534:	f001 fab7 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2108      	movs	r1, #8
 800053c:	4822      	ldr	r0, [pc, #136]	; (80005c8 <updateTrafficLED+0xd8>)
 800053e:	f001 fab2 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 8000542:	e00c      	b.n	800055e <updateTrafficLED+0x6e>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054a:	481e      	ldr	r0, [pc, #120]	; (80005c4 <updateTrafficLED+0xd4>)
 800054c:	f001 faab 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2108      	movs	r1, #8
 8000554:	481c      	ldr	r0, [pc, #112]	; (80005c8 <updateTrafficLED+0xd8>)
 8000556:	f001 faa6 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 800055a:	e000      	b.n	800055e <updateTrafficLED+0x6e>
		break;
 800055c:	bf00      	nop
	}
	switch (trafficLed1){
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d01f      	beq.n	80005a4 <updateTrafficLED+0xb4>
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2b02      	cmp	r3, #2
 8000568:	dc27      	bgt.n	80005ba <updateTrafficLED+0xca>
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d003      	beq.n	8000578 <updateTrafficLED+0x88>
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d00b      	beq.n	800058e <updateTrafficLED+0x9e>
	case 2:
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
		break;
	default:
		break;
 8000576:	e020      	b.n	80005ba <updateTrafficLED+0xca>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2120      	movs	r1, #32
 800057c:	4812      	ldr	r0, [pc, #72]	; (80005c8 <updateTrafficLED+0xd8>)
 800057e:	f001 fa92 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2110      	movs	r1, #16
 8000586:	4810      	ldr	r0, [pc, #64]	; (80005c8 <updateTrafficLED+0xd8>)
 8000588:	f001 fa8d 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 800058c:	e016      	b.n	80005bc <updateTrafficLED+0xcc>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2120      	movs	r1, #32
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <updateTrafficLED+0xd8>)
 8000594:	f001 fa87 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2110      	movs	r1, #16
 800059c:	480a      	ldr	r0, [pc, #40]	; (80005c8 <updateTrafficLED+0xd8>)
 800059e:	f001 fa82 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 80005a2:	e00b      	b.n	80005bc <updateTrafficLED+0xcc>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2120      	movs	r1, #32
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <updateTrafficLED+0xd8>)
 80005aa:	f001 fa7c 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2110      	movs	r1, #16
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <updateTrafficLED+0xd8>)
 80005b4:	f001 fa77 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 80005b8:	e000      	b.n	80005bc <updateTrafficLED+0xcc>
		break;
 80005ba:	bf00      	nop
	}
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010800 	.word	0x40010800
 80005c8:	40010c00 	.word	0x40010c00

080005cc <toggleTrafficLed>:

		setTimer2(2000);
	}
}*/

void toggleTrafficLed(int trafficLed0, int trafficLed1){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	switch (trafficLed0){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d01f      	beq.n	800061c <toggleTrafficLed+0x50>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	dc26      	bgt.n	8000630 <toggleTrafficLed+0x64>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <toggleTrafficLed+0x24>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00b      	beq.n	8000606 <toggleTrafficLed+0x3a>
	case 2:
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
		break;
	default:
		break;
 80005ee:	e01f      	b.n	8000630 <toggleTrafficLed+0x64>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2108      	movs	r1, #8
 80005f4:	4826      	ldr	r0, [pc, #152]	; (8000690 <toggleTrafficLed+0xc4>)
 80005f6:	f001 fa56 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	4825      	ldr	r0, [pc, #148]	; (8000694 <toggleTrafficLed+0xc8>)
 8000600:	f001 fa69 	bl	8001ad6 <HAL_GPIO_TogglePin>
		break;
 8000604:	e015      	b.n	8000632 <toggleTrafficLed+0x66>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800060c:	4821      	ldr	r0, [pc, #132]	; (8000694 <toggleTrafficLed+0xc8>)
 800060e:	f001 fa4a 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000612:	2108      	movs	r1, #8
 8000614:	481e      	ldr	r0, [pc, #120]	; (8000690 <toggleTrafficLed+0xc4>)
 8000616:	f001 fa5e 	bl	8001ad6 <HAL_GPIO_TogglePin>
		break;
 800061a:	e00a      	b.n	8000632 <toggleTrafficLed+0x66>
		HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 800061c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000620:	481c      	ldr	r0, [pc, #112]	; (8000694 <toggleTrafficLed+0xc8>)
 8000622:	f001 fa58 	bl	8001ad6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
 8000626:	2108      	movs	r1, #8
 8000628:	4819      	ldr	r0, [pc, #100]	; (8000690 <toggleTrafficLed+0xc4>)
 800062a:	f001 fa54 	bl	8001ad6 <HAL_GPIO_TogglePin>
		break;
 800062e:	e000      	b.n	8000632 <toggleTrafficLed+0x66>
		break;
 8000630:	bf00      	nop
	}
	switch (trafficLed1){
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d01d      	beq.n	8000674 <toggleTrafficLed+0xa8>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2b02      	cmp	r3, #2
 800063c:	dc23      	bgt.n	8000686 <toggleTrafficLed+0xba>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <toggleTrafficLed+0x80>
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <toggleTrafficLed+0x94>
	case 2:
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
		break;
	default:
		break;
 800064a:	e01c      	b.n	8000686 <toggleTrafficLed+0xba>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <toggleTrafficLed+0xc4>)
 8000652:	f001 fa28 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000656:	2120      	movs	r1, #32
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <toggleTrafficLed+0xc4>)
 800065a:	f001 fa3c 	bl	8001ad6 <HAL_GPIO_TogglePin>
		break;
 800065e:	e013      	b.n	8000688 <toggleTrafficLed+0xbc>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <toggleTrafficLed+0xc4>)
 8000666:	f001 fa1e 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800066a:	2110      	movs	r1, #16
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <toggleTrafficLed+0xc4>)
 800066e:	f001 fa32 	bl	8001ad6 <HAL_GPIO_TogglePin>
		break;
 8000672:	e009      	b.n	8000688 <toggleTrafficLed+0xbc>
		HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000674:	2120      	movs	r1, #32
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <toggleTrafficLed+0xc4>)
 8000678:	f001 fa2d 	bl	8001ad6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 800067c:	2110      	movs	r1, #16
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <toggleTrafficLed+0xc4>)
 8000680:	f001 fa29 	bl	8001ad6 <HAL_GPIO_TogglePin>
		break;
 8000684:	e000      	b.n	8000688 <toggleTrafficLed+0xbc>
		break;
 8000686:	bf00      	nop
	}
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40010c00 	.word	0x40010c00
 8000694:	40010800 	.word	0x40010800

08000698 <displayPedestrianLed>:

void displayPedestrianLed(int pedestrianLed){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	switch (pedestrianLed){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d023      	beq.n	80006ee <displayPedestrianLed+0x56>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	dc2d      	bgt.n	8000708 <displayPedestrianLed+0x70>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d003      	beq.n	80006ba <displayPedestrianLed+0x22>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d00d      	beq.n	80006d4 <displayPedestrianLed+0x3c>
 80006b8:	e026      	b.n	8000708 <displayPedestrianLed+0x70>
	case 0:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	481a      	ldr	r0, [pc, #104]	; (800072c <displayPedestrianLed+0x94>)
 80006c2:	f001 f9f0 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	4818      	ldr	r0, [pc, #96]	; (8000730 <displayPedestrianLed+0x98>)
 80006ce:	f001 f9ea 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 80006d2:	e026      	b.n	8000722 <displayPedestrianLed+0x8a>
	case 1:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <displayPedestrianLed+0x94>)
 80006dc:	f001 f9e3 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <displayPedestrianLed+0x98>)
 80006e8:	f001 f9dd 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 80006ec:	e019      	b.n	8000722 <displayPedestrianLed+0x8a>
	case 2:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <displayPedestrianLed+0x94>)
 80006f6:	f001 f9d6 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <displayPedestrianLed+0x98>)
 8000702:	f001 f9d0 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 8000706:	e00c      	b.n	8000722 <displayPedestrianLed+0x8a>
	default:
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <displayPedestrianLed+0x94>)
 8000710:	f001 f9c9 	bl	8001aa6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <displayPedestrianLed+0x98>)
 800071c:	f001 f9c3 	bl	8001aa6 <HAL_GPIO_WritePin>
		break;
 8000720:	bf00      	nop
	}
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40010c00 	.word	0x40010c00
 8000730:	40010800 	.word	0x40010800

08000734 <updateBuffer>:
uint8_t tBuffer[50]={"!7SEG:  #"};
#define counter_index 			5
#define counter_length 			2


void updateBuffer(int counter) {
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
		for (int i=0;  i< counter_length;i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e01e      	b.n	8000780 <updateBuffer+0x4c>
			tBuffer[counter_length + counter_index - i] = counter%10+48;
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <updateBuffer+0x60>)
 8000746:	fb83 1302 	smull	r1, r3, r3, r2
 800074a:	1099      	asrs	r1, r3, #2
 800074c:	17d3      	asrs	r3, r2, #31
 800074e:	1ac9      	subs	r1, r1, r3
 8000750:	460b      	mov	r3, r1
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	1ad1      	subs	r1, r2, r3
 800075a:	b2ca      	uxtb	r2, r1
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f1c3 0307 	rsb	r3, r3, #7
 8000762:	3230      	adds	r2, #48	; 0x30
 8000764:	b2d1      	uxtb	r1, r2
 8000766:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <updateBuffer+0x64>)
 8000768:	54d1      	strb	r1, [r2, r3]
			counter/=10;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a09      	ldr	r2, [pc, #36]	; (8000794 <updateBuffer+0x60>)
 800076e:	fb82 1203 	smull	r1, r2, r2, r3
 8000772:	1092      	asrs	r2, r2, #2
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	607b      	str	r3, [r7, #4]
		for (int i=0;  i< counter_length;i++) {
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b01      	cmp	r3, #1
 8000784:	dddd      	ble.n	8000742 <updateBuffer+0xe>
		}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	66666667 	.word	0x66666667
 8000798:	20000010 	.word	0x20000010

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fdc5 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f85d 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f000 f983 	bl	8000ab4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007ae:	f000 f895 	bl	80008dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80007b2:	f000 f8df 	bl	8000974 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80007b6:	f000 f953 	bl	8000a60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <main+0xa8>)
 80007bc:	f001 fe0e 	bl	80023dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007c0:	2100      	movs	r1, #0
 80007c2:	4821      	ldr	r0, [pc, #132]	; (8000848 <main+0xac>)
 80007c4:	f001 feb4 	bl	8002530 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setTimer1(1000);
  setTimerBlinking(500);
 80007c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007cc:	f000 fbae 	bl	8000f2c <setTimerBlinking>
	  //HAL_Delay(1000);
	  //__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 70);
	  //HAL_Delay(1000);
    /* USER CODE END WHILE */

	  if(getTimerBlinkingFlag() == 1){
 80007d0:	f000 fbe0 	bl	8000f94 <getTimerBlinkingFlag>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d10e      	bne.n	80007f8 <main+0x5c>
		updateBuffer(counter0);
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <main+0xb0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffa8 	bl	8000734 <updateBuffer>
		HAL_UART_Transmit(&huart2, tBuffer, 50, 10);
 80007e4:	230a      	movs	r3, #10
 80007e6:	2232      	movs	r2, #50	; 0x32
 80007e8:	4919      	ldr	r1, [pc, #100]	; (8000850 <main+0xb4>)
 80007ea:	481a      	ldr	r0, [pc, #104]	; (8000854 <main+0xb8>)
 80007ec:	f002 fd51 	bl	8003292 <HAL_UART_Transmit>
		setTimerBlinking(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007f4:	f000 fb9a 	bl	8000f2c <setTimerBlinking>
	  }
	  fsm_for_input_processing();
 80007f8:	f7ff fca8 	bl	800014c <fsm_for_input_processing>
	  mode_processing();
 80007fc:	f000 f9fa 	bl	8000bf4 <mode_processing>
	  if (pedestrian > 0 && pedestrian <= timeCycle && trafficLed1 == 2) {
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <main+0xbc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	dd17      	ble.n	8000838 <main+0x9c>
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <main+0xbc>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <main+0xc0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	dc11      	bgt.n	8000838 <main+0x9c>
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <main+0xc4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d10d      	bne.n	8000838 <main+0x9c>
		for (int i = 0; i < 100; i+=20){
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	e006      	b.n	8000830 <main+0x94>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, i);
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <main+0xac>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
		for (int i = 0; i < 100; i+=20){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3314      	adds	r3, #20
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b63      	cmp	r3, #99	; 0x63
 8000834:	ddf5      	ble.n	8000822 <main+0x86>
 8000836:	e003      	b.n	8000840 <main+0xa4>
			//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
			//HAL_Delay(500);
		}
	  }
	  else{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <main+0xac>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	635a      	str	r2, [r3, #52]	; 0x34
	  if(getTimerBlinkingFlag() == 1){
 8000840:	e7c6      	b.n	80007d0 <main+0x34>
 8000842:	bf00      	nop
 8000844:	20000110 	.word	0x20000110
 8000848:	200000c8 	.word	0x200000c8
 800084c:	20000080 	.word	0x20000080
 8000850:	20000010 	.word	0x20000010
 8000854:	20000158 	.word	0x20000158
 8000858:	2000008c 	.word	0x2000008c
 800085c:	20000090 	.word	0x20000090
 8000860:	2000007c 	.word	0x2000007c

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b090      	sub	sp, #64	; 0x40
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2228      	movs	r2, #40	; 0x28
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f003 f9bc 	bl	8003bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088a:	2301      	movs	r3, #1
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088e:	2310      	movs	r3, #16
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4618      	mov	r0, r3
 800089c:	f001 f934 	bl	8001b08 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008a6:	f000 f9a0 	bl	8000bea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	230f      	movs	r3, #15
 80008ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fba0 	bl	8002008 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008ce:	f000 f98c 	bl	8000bea <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3740      	adds	r7, #64	; 0x40
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM2_Init+0x94>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_TIM2_Init+0x94>)
 8000902:	2209      	movs	r2, #9
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM2_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_TIM2_Init+0x94>)
 800090e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_TIM2_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM2_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_TIM2_Init+0x94>)
 8000922:	f001 fd0b 	bl	800233c <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800092c:	f000 f95d 	bl	8000bea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_TIM2_Init+0x94>)
 800093e:	f002 f85f 	bl	8002a00 <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000948:	f000 f94f 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000954:	463b      	mov	r3, r7
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_TIM2_Init+0x94>)
 800095a:	f002 fbdd 	bl	8003118 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 f941 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000110 	.word	0x20000110

08000974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
 80009a0:	615a      	str	r2, [r3, #20]
 80009a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009a6:	4a2d      	ldr	r2, [pc, #180]	; (8000a5c <MX_TIM3_Init+0xe8>)
 80009a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009ac:	2209      	movs	r2, #9
 80009ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009b8:	f240 321f 	movw	r2, #799	; 0x31f
 80009bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ca:	4823      	ldr	r0, [pc, #140]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009cc:	f001 fcb6 	bl	800233c <HAL_TIM_Base_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009d6:	f000 f908 	bl	8000bea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e4:	4619      	mov	r1, r3
 80009e6:	481c      	ldr	r0, [pc, #112]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009e8:	f002 f80a 	bl	8002a00 <HAL_TIM_ConfigClockSource>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009f2:	f000 f8fa 	bl	8000bea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009f6:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_TIM3_Init+0xe4>)
 80009f8:	f001 fd42 	bl	8002480 <HAL_TIM_PWM_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a02:	f000 f8f2 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	4619      	mov	r1, r3
 8000a14:	4810      	ldr	r0, [pc, #64]	; (8000a58 <MX_TIM3_Init+0xe4>)
 8000a16:	f002 fb7f 	bl	8003118 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a20:	f000 f8e3 	bl	8000bea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a24:	2360      	movs	r3, #96	; 0x60
 8000a26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4807      	ldr	r0, [pc, #28]	; (8000a58 <MX_TIM3_Init+0xe4>)
 8000a3c:	f001 ff22 	bl	8002884 <HAL_TIM_PWM_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a46:	f000 f8d0 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <MX_TIM3_Init+0xe4>)
 8000a4c:	f000 fb7a 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000a50:	bf00      	nop
 8000a52:	3738      	adds	r7, #56	; 0x38
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000c8 	.word	0x200000c8
 8000a5c:	40000400 	.word	0x40000400

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_USART2_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a98:	f002 fbae 	bl	80031f8 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa2:	f000 f8a2 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000158 	.word	0x20000158
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a3a      	ldr	r2, [pc, #232]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a34      	ldr	r2, [pc, #208]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0x104>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b16:	4829      	ldr	r0, [pc, #164]	; (8000bbc <MX_GPIO_Init+0x108>)
 8000b18:	f000 ffc5 	bl	8001aa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000b22:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <MX_GPIO_Init+0x10c>)
 8000b24:	f000 ffbf 	bl	8001aa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4821      	ldr	r0, [pc, #132]	; (8000bc4 <MX_GPIO_Init+0x110>)
 8000b3e:	f000 fe17 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin A1_Pin B3_Pin */
  GPIO_InitStruct.Pin = B0_Pin|A1_Pin|B3_Pin;
 8000b42:	2313      	movs	r3, #19
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4619      	mov	r1, r3
 8000b54:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <MX_GPIO_Init+0x10c>)
 8000b56:	f000 fe0b 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : B4_Pin */
  GPIO_InitStruct.Pin = B4_Pin;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B4_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4813      	ldr	r0, [pc, #76]	; (8000bbc <MX_GPIO_Init+0x108>)
 8000b6e:	f000 fdff 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000b72:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <MX_GPIO_Init+0x108>)
 8000b8c:	f000 fdf0 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000b90:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_GPIO_Init+0x10c>)
 8000baa:	f000 fde1 	bl	8001770 <HAL_GPIO_Init>

}
 8000bae:	bf00      	nop
 8000bb0:	3720      	adds	r7, #32
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010c00 	.word	0x40010c00
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd8:	d103      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000bda:	f7ff fbb1 	bl	8000340 <button_reading>
		timerRun();
 8000bde:	f000 f9fd 	bl	8000fdc <timerRun>
	}
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
}
 8000bf0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <Error_Handler+0x8>

08000bf4 <mode_processing>:
#include "software_timer.h"
#include "stddef.h"
#include "stdint.h"


void mode_processing(){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	switch(mode){
 8000bf8:	4b98      	ldr	r3, [pc, #608]	; (8000e5c <mode_processing+0x268>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	f200 8180 	bhi.w	8000f04 <mode_processing+0x310>
 8000c04:	a201      	add	r2, pc, #4	; (adr r2, 8000c0c <mode_processing+0x18>)
 8000c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0a:	bf00      	nop
 8000c0c:	08000c21 	.word	0x08000c21
 8000c10:	08000d3d 	.word	0x08000d3d
 8000c14:	08000d69 	.word	0x08000d69
 8000c18:	08000de3 	.word	0x08000de3
 8000c1c:	08000e89 	.word	0x08000e89
	case 1: // Mode 01: The traffic light application is running normally.
		if (initState == 0){
 8000c20:	4b8f      	ldr	r3, [pc, #572]	; (8000e60 <mode_processing+0x26c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d123      	bne.n	8000c70 <mode_processing+0x7c>
			trafficLed0 = 0; // turn on red led on road 01
 8000c28:	4b8e      	ldr	r3, [pc, #568]	; (8000e64 <mode_processing+0x270>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
			trafficLed1 = 1; // turn on green led on road 02
 8000c2e:	4b8e      	ldr	r3, [pc, #568]	; (8000e68 <mode_processing+0x274>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
			counter0 = timeDurations[trafficLed0]; // set red time duration for counter
 8000c34:	4b8b      	ldr	r3, [pc, #556]	; (8000e64 <mode_processing+0x270>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a8c      	ldr	r2, [pc, #560]	; (8000e6c <mode_processing+0x278>)
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	4a8c      	ldr	r2, [pc, #560]	; (8000e70 <mode_processing+0x27c>)
 8000c40:	6013      	str	r3, [r2, #0]
			counter1 = timeDurations[trafficLed1]; // set green time duration for counter
 8000c42:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <mode_processing+0x274>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a89      	ldr	r2, [pc, #548]	; (8000e6c <mode_processing+0x278>)
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	4a89      	ldr	r2, [pc, #548]	; (8000e74 <mode_processing+0x280>)
 8000c4e:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000c50:	4b83      	ldr	r3, [pc, #524]	; (8000e60 <mode_processing+0x26c>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1); // display Traffic LED on both roads
 8000c56:	4b83      	ldr	r3, [pc, #524]	; (8000e64 <mode_processing+0x270>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a83      	ldr	r2, [pc, #524]	; (8000e68 <mode_processing+0x274>)
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fc45 	bl	80004f0 <updateTrafficLED>
			setTimer1(1000);
 8000c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6a:	f000 f979 	bl	8000f60 <setTimer1>
				}
				updateTrafficLED(trafficLed0, trafficLed1);
				setTimer1(1000);
			}
		}
		break;
 8000c6e:	e148      	b.n	8000f02 <mode_processing+0x30e>
			if (getTimer1Flag() == 1){
 8000c70:	f000 f9a2 	bl	8000fb8 <getTimer1Flag>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	f040 8143 	bne.w	8000f02 <mode_processing+0x30e>
				counter0--;
 8000c7c:	4b7c      	ldr	r3, [pc, #496]	; (8000e70 <mode_processing+0x27c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	4a7b      	ldr	r2, [pc, #492]	; (8000e70 <mode_processing+0x27c>)
 8000c84:	6013      	str	r3, [r2, #0]
				counter1--;
 8000c86:	4b7b      	ldr	r3, [pc, #492]	; (8000e74 <mode_processing+0x280>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a79      	ldr	r2, [pc, #484]	; (8000e74 <mode_processing+0x280>)
 8000c8e:	6013      	str	r3, [r2, #0]
				if (counter0 <= 0){
 8000c90:	4b77      	ldr	r3, [pc, #476]	; (8000e70 <mode_processing+0x27c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dc12      	bgt.n	8000cbe <mode_processing+0xca>
					trafficLed0++;
 8000c98:	4b72      	ldr	r3, [pc, #456]	; (8000e64 <mode_processing+0x270>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	4a71      	ldr	r2, [pc, #452]	; (8000e64 <mode_processing+0x270>)
 8000ca0:	6013      	str	r3, [r2, #0]
					if (trafficLed0 >= 3)
 8000ca2:	4b70      	ldr	r3, [pc, #448]	; (8000e64 <mode_processing+0x270>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	dd02      	ble.n	8000cb0 <mode_processing+0xbc>
						trafficLed0 = 0;
 8000caa:	4b6e      	ldr	r3, [pc, #440]	; (8000e64 <mode_processing+0x270>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
					counter0 = timeDurations[trafficLed0];
 8000cb0:	4b6c      	ldr	r3, [pc, #432]	; (8000e64 <mode_processing+0x270>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a6d      	ldr	r2, [pc, #436]	; (8000e6c <mode_processing+0x278>)
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	4a6d      	ldr	r2, [pc, #436]	; (8000e70 <mode_processing+0x27c>)
 8000cbc:	6013      	str	r3, [r2, #0]
				if (counter1 <= 0){
 8000cbe:	4b6d      	ldr	r3, [pc, #436]	; (8000e74 <mode_processing+0x280>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	dc12      	bgt.n	8000cec <mode_processing+0xf8>
					trafficLed1++;
 8000cc6:	4b68      	ldr	r3, [pc, #416]	; (8000e68 <mode_processing+0x274>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a66      	ldr	r2, [pc, #408]	; (8000e68 <mode_processing+0x274>)
 8000cce:	6013      	str	r3, [r2, #0]
					if (trafficLed1 >= 3)
 8000cd0:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <mode_processing+0x274>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	dd02      	ble.n	8000cde <mode_processing+0xea>
						trafficLed1 = 0;
 8000cd8:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <mode_processing+0x274>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
					counter1 = timeDurations[trafficLed1];
 8000cde:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <mode_processing+0x274>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a62      	ldr	r2, [pc, #392]	; (8000e6c <mode_processing+0x278>)
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	4a62      	ldr	r2, [pc, #392]	; (8000e74 <mode_processing+0x280>)
 8000cea:	6013      	str	r3, [r2, #0]
				if (pedestrian > 0 && pedestrian <= timeCycle) {
 8000cec:	4b62      	ldr	r3, [pc, #392]	; (8000e78 <mode_processing+0x284>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dd10      	ble.n	8000d16 <mode_processing+0x122>
 8000cf4:	4b60      	ldr	r3, [pc, #384]	; (8000e78 <mode_processing+0x284>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <mode_processing+0x288>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dc0a      	bgt.n	8000d16 <mode_processing+0x122>
					displayPedestrianLed(trafficLed1);
 8000d00:	4b59      	ldr	r3, [pc, #356]	; (8000e68 <mode_processing+0x274>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fcc7 	bl	8000698 <displayPedestrianLed>
					pedestrian++;
 8000d0a:	4b5b      	ldr	r3, [pc, #364]	; (8000e78 <mode_processing+0x284>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	4a59      	ldr	r2, [pc, #356]	; (8000e78 <mode_processing+0x284>)
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e005      	b.n	8000d22 <mode_processing+0x12e>
					displayPedestrianLed(5);
 8000d16:	2005      	movs	r0, #5
 8000d18:	f7ff fcbe 	bl	8000698 <displayPedestrianLed>
					pedestrian = 0;
 8000d1c:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <mode_processing+0x284>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
				updateTrafficLED(trafficLed0, trafficLed1);
 8000d22:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <mode_processing+0x270>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a50      	ldr	r2, [pc, #320]	; (8000e68 <mode_processing+0x274>)
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fbdf 	bl	80004f0 <updateTrafficLED>
				setTimer1(1000);
 8000d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d36:	f000 f913 	bl	8000f60 <setTimer1>
		break;
 8000d3a:	e0e2      	b.n	8000f02 <mode_processing+0x30e>
	case 2:
		if (initState == 0){
 8000d3c:	4b48      	ldr	r3, [pc, #288]	; (8000e60 <mode_processing+0x26c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d108      	bne.n	8000d56 <mode_processing+0x162>
			trafficLed0 = 0;
 8000d44:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <mode_processing+0x270>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
			trafficLed1 = 1;
 8000d4a:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <mode_processing+0x274>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
			initState = 1;
 8000d50:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <mode_processing+0x26c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
			if (getTimer1Flag() == 1){
				mode = 1;
				initState = 0;
			}
		}*/
		updateTrafficLED(trafficLed0, trafficLed1);
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <mode_processing+0x270>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a43      	ldr	r2, [pc, #268]	; (8000e68 <mode_processing+0x274>)
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fbc5 	bl	80004f0 <updateTrafficLED>
		break;
 8000d66:	e0cd      	b.n	8000f04 <mode_processing+0x310>
	case 3: // Mode 2 - Modify time duration for the red LEDs
		if (initState == 0){
 8000d68:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <mode_processing+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d11d      	bne.n	8000dac <mode_processing+0x1b8>
			trafficLed0 = 0;
 8000d70:	4b3c      	ldr	r3, [pc, #240]	; (8000e64 <mode_processing+0x270>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
			trafficLed1 = 0;
 8000d76:	4b3c      	ldr	r3, [pc, #240]	; (8000e68 <mode_processing+0x274>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000d7c:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <mode_processing+0x270>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a3a      	ldr	r2, [pc, #232]	; (8000e6c <mode_processing+0x278>)
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	4a3e      	ldr	r2, [pc, #248]	; (8000e80 <mode_processing+0x28c>)
 8000d88:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000d8a:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <mode_processing+0x26c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000d90:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <mode_processing+0x270>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a34      	ldr	r2, [pc, #208]	; (8000e68 <mode_processing+0x274>)
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fba8 	bl	80004f0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000da0:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <mode_processing+0x290>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f8db 	bl	8000f60 <setTimer1>
 8000daa:	e011      	b.n	8000dd0 <mode_processing+0x1dc>
		}
		else {
			if( getTimer1Flag() == 1){
 8000dac:	f000 f904 	bl	8000fb8 <getTimer1Flag>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10c      	bne.n	8000dd0 <mode_processing+0x1dc>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <mode_processing+0x270>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <mode_processing+0x274>)
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fc03 	bl	80005cc <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <mode_processing+0x290>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f8c8 	bl	8000f60 <setTimer1>
			}
		}
		counter0 = duration;
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <mode_processing+0x28c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a26      	ldr	r2, [pc, #152]	; (8000e70 <mode_processing+0x27c>)
 8000dd6:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <mode_processing+0x268>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a25      	ldr	r2, [pc, #148]	; (8000e74 <mode_processing+0x280>)
 8000dde:	6013      	str	r3, [r2, #0]
		break;
 8000de0:	e090      	b.n	8000f04 <mode_processing+0x310>
	case 4: // Mode 3 - Modify time duration for the amber LEDs
		if (initState == 0){
 8000de2:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <mode_processing+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d11d      	bne.n	8000e26 <mode_processing+0x232>
			trafficLed0 = 2;
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <mode_processing+0x270>)
 8000dec:	2202      	movs	r2, #2
 8000dee:	601a      	str	r2, [r3, #0]
			trafficLed1 = 2;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <mode_processing+0x274>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <mode_processing+0x270>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <mode_processing+0x278>)
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <mode_processing+0x28c>)
 8000e02:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <mode_processing+0x26c>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <mode_processing+0x270>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <mode_processing+0x274>)
 8000e10:	6812      	ldr	r2, [r2, #0]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fb6b 	bl	80004f0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <mode_processing+0x290>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f89e 	bl	8000f60 <setTimer1>
 8000e24:	e011      	b.n	8000e4a <mode_processing+0x256>
		}
		else {
			if( getTimer1Flag() == 1){
 8000e26:	f000 f8c7 	bl	8000fb8 <getTimer1Flag>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10c      	bne.n	8000e4a <mode_processing+0x256>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <mode_processing+0x270>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <mode_processing+0x274>)
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fbc6 	bl	80005cc <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <mode_processing+0x290>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f88b 	bl	8000f60 <setTimer1>
			}
		}
		counter0 = duration;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <mode_processing+0x28c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <mode_processing+0x27c>)
 8000e50:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000e52:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <mode_processing+0x268>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <mode_processing+0x280>)
 8000e58:	6013      	str	r3, [r2, #0]
		break;
 8000e5a:	e053      	b.n	8000f04 <mode_processing+0x310>
 8000e5c:	20000070 	.word	0x20000070
 8000e60:	20000074 	.word	0x20000074
 8000e64:	20000078 	.word	0x20000078
 8000e68:	2000007c 	.word	0x2000007c
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000080 	.word	0x20000080
 8000e74:	20000084 	.word	0x20000084
 8000e78:	2000008c 	.word	0x2000008c
 8000e7c:	20000090 	.word	0x20000090
 8000e80:	20000088 	.word	0x20000088
 8000e84:	2000000c 	.word	0x2000000c
	case 5: // Mode 4 - Modify time duration for the green LEDs
		if (initState == 0){
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <mode_processing+0x314>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11d      	bne.n	8000ecc <mode_processing+0x2d8>
			trafficLed0 = 1;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <mode_processing+0x318>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
			trafficLed1 = 1;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <mode_processing+0x31c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <mode_processing+0x318>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <mode_processing+0x320>)
 8000ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <mode_processing+0x324>)
 8000ea8:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <mode_processing+0x314>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <mode_processing+0x318>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a16      	ldr	r2, [pc, #88]	; (8000f10 <mode_processing+0x31c>)
 8000eb6:	6812      	ldr	r2, [r2, #0]
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fb18 	bl	80004f0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <mode_processing+0x328>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f84b 	bl	8000f60 <setTimer1>
 8000eca:	e011      	b.n	8000ef0 <mode_processing+0x2fc>
		}
		else {
			if( getTimer1Flag() == 1){
 8000ecc:	f000 f874 	bl	8000fb8 <getTimer1Flag>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d10c      	bne.n	8000ef0 <mode_processing+0x2fc>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <mode_processing+0x318>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <mode_processing+0x31c>)
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fb73 	bl	80005cc <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <mode_processing+0x328>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f838 	bl	8000f60 <setTimer1>
			}
		}
		counter0 = duration;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <mode_processing+0x324>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <mode_processing+0x32c>)
 8000ef6:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <mode_processing+0x330>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <mode_processing+0x334>)
 8000efe:	6013      	str	r3, [r2, #0]
		break;
 8000f00:	e000      	b.n	8000f04 <mode_processing+0x310>
		break;
 8000f02:	bf00      	nop
	}
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000074 	.word	0x20000074
 8000f0c:	20000078 	.word	0x20000078
 8000f10:	2000007c 	.word	0x2000007c
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000088 	.word	0x20000088
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	20000080 	.word	0x20000080
 8000f24:	20000070 	.word	0x20000070
 8000f28:	20000084 	.word	0x20000084

08000f2c <setTimerBlinking>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimerBlinking(int duration){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	timerBlinking_counter = duration / TIME_CYCLE;
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <setTimerBlinking+0x28>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <setTimerBlinking+0x2c>)
 8000f40:	6013      	str	r3, [r2, #0]
	timerBlinking_flag = 0;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <setTimerBlinking+0x30>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000044 	.word	0x20000044
 8000f58:	200000b0 	.word	0x200000b0
 8000f5c:	200000b4 	.word	0x200000b4

08000f60 <setTimer1>:

void setTimer1(int duration){
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIME_CYCLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <setTimer1+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <setTimer1+0x2c>)
 8000f74:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <setTimer1+0x30>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000044 	.word	0x20000044
 8000f8c:	200000b8 	.word	0x200000b8
 8000f90:	200000bc 	.word	0x200000bc

08000f94 <getTimerBlinkingFlag>:
void setTimer2(int duration){
	timer2_counter = duration / TIME_CYCLE;
	timer2_flag = 0;
}

int getTimerBlinkingFlag(){
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	if (timerBlinking_flag == 1){
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <getTimerBlinkingFlag+0x20>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d104      	bne.n	8000faa <getTimerBlinkingFlag+0x16>
		timerBlinking_flag = 0;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <getTimerBlinkingFlag+0x20>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
		return 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <getTimerBlinkingFlag+0x18>
	}
	return 0;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	200000b4 	.word	0x200000b4

08000fb8 <getTimer1Flag>:

int getTimer1Flag(){
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	if (timer1_flag == 1){
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <getTimer1Flag+0x20>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d104      	bne.n	8000fce <getTimer1Flag+0x16>
		timer1_flag = 0;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <getTimer1Flag+0x20>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
		return 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <getTimer1Flag+0x18>
	}
	return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	200000bc 	.word	0x200000bc

08000fdc <timerRun>:
		return 1;
	}
	return 0;
}

void timerRun(){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	if (timerBlinking_counter > 0){
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <timerRun+0x6c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dd0b      	ble.n	8001000 <timerRun+0x24>
		timerBlinking_counter--;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <timerRun+0x6c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <timerRun+0x6c>)
 8000ff0:	6013      	str	r3, [r2, #0]
		if (timerBlinking_counter <= 0){
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <timerRun+0x6c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	dc02      	bgt.n	8001000 <timerRun+0x24>
			timerBlinking_flag = 1;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <timerRun+0x70>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer1_counter > 0){
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <timerRun+0x74>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dd0b      	ble.n	8001020 <timerRun+0x44>
		timer1_counter--;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <timerRun+0x74>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <timerRun+0x74>)
 8001010:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <timerRun+0x74>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dc02      	bgt.n	8001020 <timerRun+0x44>
			timer1_flag = 1;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <timerRun+0x78>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <timerRun+0x7c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd0b      	ble.n	8001040 <timerRun+0x64>
		timer2_counter--;
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <timerRun+0x7c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3b01      	subs	r3, #1
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <timerRun+0x7c>)
 8001030:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <timerRun+0x7c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	dc02      	bgt.n	8001040 <timerRun+0x64>
			timer2_flag = 1;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <timerRun+0x80>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	200000b0 	.word	0x200000b0
 800104c:	200000b4 	.word	0x200000b4
 8001050:	200000b8 	.word	0x200000b8
 8001054:	200000bc 	.word	0x200000bc
 8001058:	200000c0 	.word	0x200000c0
 800105c:	200000c4 	.word	0x200000c4

08001060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_MspInit+0x5c>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <HAL_MspInit+0x5c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_MspInit+0x5c>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_MspInit+0x5c>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_MspInit+0x5c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_MspInit+0x5c>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_MspInit+0x60>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_MspInit+0x60>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d4:	d114      	bne.n	8001100 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_TIM_Base_MspInit+0x78>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_TIM_Base_MspInit+0x78>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_TIM_Base_MspInit+0x78>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	201c      	movs	r0, #28
 80010f4:	f000 fa55 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f8:	201c      	movs	r0, #28
 80010fa:	f000 fa6e 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010fe:	e018      	b.n	8001132 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_TIM_Base_MspInit+0x7c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d113      	bne.n	8001132 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_TIM_Base_MspInit+0x78>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_TIM_Base_MspInit+0x78>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_TIM_Base_MspInit+0x78>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	201d      	movs	r0, #29
 8001128:	f000 fa3b 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800112c:	201d      	movs	r0, #29
 800112e:	f000 fa54 	bl	80015da <HAL_NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	40000400 	.word	0x40000400

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_TIM_MspPostInit+0x58>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d117      	bne.n	8001194 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_TIM_MspPostInit+0x5c>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_TIM_MspPostInit+0x5c>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_TIM_MspPostInit+0x5c>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2302      	movs	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_TIM_MspPostInit+0x60>)
 8001190:	f000 faee 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40000400 	.word	0x40000400
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010800 	.word	0x40010800

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_UART_MspInit+0x98>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d137      	bne.n	8001238 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_UART_MspInit+0x9c>)
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_UART_MspInit+0x9c>)
 80011ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d2:	61d3      	str	r3, [r2, #28]
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_UART_MspInit+0x9c>)
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_UART_MspInit+0x9c>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x9c>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_UART_MspInit+0x9c>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f8:	2304      	movs	r3, #4
 80011fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <HAL_UART_MspInit+0xa0>)
 800120c:	f000 fab0 	bl	8001770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001210:	2308      	movs	r3, #8
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_UART_MspInit+0xa0>)
 8001224:	f000 faa4 	bl	8001770 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2026      	movs	r0, #38	; 0x26
 800122e:	f000 f9b8 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001232:	2026      	movs	r0, #38	; 0x26
 8001234:	f000 f9d1 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40004400 	.word	0x40004400
 8001244:	40021000 	.word	0x40021000
 8001248:	40010800 	.word	0x40010800

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001292:	f000 f893 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM2_IRQHandler+0x10>)
 80012a2:	f001 f9e7 	bl	8002674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000110 	.word	0x20000110

080012b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM3_IRQHandler+0x10>)
 80012b6:	f001 f9dd 	bl	8002674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000c8 	.word	0x200000c8

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USART2_IRQHandler+0x10>)
 80012ca:	f002 f875 	bl	80033b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000158 	.word	0x20000158

080012d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	; (8001328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800130a:	f7ff ffe5 	bl	80012d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f002 fc4b 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001312:	f7ff fa43 	bl	800079c <main>
  bx lr
 8001316:	4770      	bx	lr
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001320:	08003c48 	.word	0x08003c48
  ldr r2, =_sbss
 8001324:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001328:	200001a0 	.word	0x200001a0

0800132c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_2_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x28>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x28>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f923 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	200f      	movs	r0, #15
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fe88 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f93b 	bl	80015f6 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f903 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000048 	.word	0x20000048
 80013b4:	20000050 	.word	0x20000050
 80013b8:	2000004c 	.word	0x2000004c

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x20>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_IncTick+0x20>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000050 	.word	0x20000050
 80013dc:	2000019c 	.word	0x2000019c

080013e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_GetTick+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	2000019c 	.word	0x2000019c

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4906      	ldr	r1, [pc, #24]	; (800148c <__NVIC_EnableIRQ+0x34>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff90 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff2d 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff42 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff35 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800160e:	b480      	push	{r7}
 8001610:	b085      	sub	sp, #20
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001620:	2b02      	cmp	r3, #2
 8001622:	d008      	beq.n	8001636 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2204      	movs	r2, #4
 8001628:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e020      	b.n	8001678 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 020e 	bic.w	r2, r2, #14
 8001644:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165e:	2101      	movs	r1, #1
 8001660:	fa01 f202 	lsl.w	r2, r1, r2
 8001664:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
	...

08001684 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001696:	2b02      	cmp	r3, #2
 8001698:	d005      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2204      	movs	r2, #4
 800169e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e051      	b.n	800174a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 020e 	bic.w	r2, r2, #14
 80016b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a22      	ldr	r2, [pc, #136]	; (8001754 <HAL_DMA_Abort_IT+0xd0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d029      	beq.n	8001724 <HAL_DMA_Abort_IT+0xa0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a20      	ldr	r2, [pc, #128]	; (8001758 <HAL_DMA_Abort_IT+0xd4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d022      	beq.n	8001720 <HAL_DMA_Abort_IT+0x9c>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_DMA_Abort_IT+0xd8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d01a      	beq.n	800171a <HAL_DMA_Abort_IT+0x96>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_DMA_Abort_IT+0xdc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d012      	beq.n	8001714 <HAL_DMA_Abort_IT+0x90>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <HAL_DMA_Abort_IT+0xe0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00a      	beq.n	800170e <HAL_DMA_Abort_IT+0x8a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_DMA_Abort_IT+0xe4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d102      	bne.n	8001708 <HAL_DMA_Abort_IT+0x84>
 8001702:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001706:	e00e      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 8001708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800170c:	e00b      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 800170e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001712:	e008      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	e005      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 800171a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171e:	e002      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 8001720:	2310      	movs	r3, #16
 8001722:	e000      	b.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 8001724:	2301      	movs	r3, #1
 8001726:	4a11      	ldr	r2, [pc, #68]	; (800176c <HAL_DMA_Abort_IT+0xe8>)
 8001728:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
    } 
  }
  return status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020008 	.word	0x40020008
 8001758:	4002001c 	.word	0x4002001c
 800175c:	40020030 	.word	0x40020030
 8001760:	40020044 	.word	0x40020044
 8001764:	40020058 	.word	0x40020058
 8001768:	4002006c 	.word	0x4002006c
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e169      	b.n	8001a58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001784:	2201      	movs	r2, #1
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8158 	bne.w	8001a52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a9a      	ldr	r2, [pc, #616]	; (8001a10 <HAL_GPIO_Init+0x2a0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d05e      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017ac:	4a98      	ldr	r2, [pc, #608]	; (8001a10 <HAL_GPIO_Init+0x2a0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d875      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017b2:	4a98      	ldr	r2, [pc, #608]	; (8001a14 <HAL_GPIO_Init+0x2a4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d058      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017b8:	4a96      	ldr	r2, [pc, #600]	; (8001a14 <HAL_GPIO_Init+0x2a4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d86f      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017be:	4a96      	ldr	r2, [pc, #600]	; (8001a18 <HAL_GPIO_Init+0x2a8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d052      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017c4:	4a94      	ldr	r2, [pc, #592]	; (8001a18 <HAL_GPIO_Init+0x2a8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d869      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017ca:	4a94      	ldr	r2, [pc, #592]	; (8001a1c <HAL_GPIO_Init+0x2ac>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04c      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017d0:	4a92      	ldr	r2, [pc, #584]	; (8001a1c <HAL_GPIO_Init+0x2ac>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d863      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017d6:	4a92      	ldr	r2, [pc, #584]	; (8001a20 <HAL_GPIO_Init+0x2b0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d046      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017dc:	4a90      	ldr	r2, [pc, #576]	; (8001a20 <HAL_GPIO_Init+0x2b0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d85d      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d82a      	bhi.n	800183c <HAL_GPIO_Init+0xcc>
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d859      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <HAL_GPIO_Init+0x80>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	0800186b 	.word	0x0800186b
 80017f4:	08001845 	.word	0x08001845
 80017f8:	08001857 	.word	0x08001857
 80017fc:	08001899 	.word	0x08001899
 8001800:	0800189f 	.word	0x0800189f
 8001804:	0800189f 	.word	0x0800189f
 8001808:	0800189f 	.word	0x0800189f
 800180c:	0800189f 	.word	0x0800189f
 8001810:	0800189f 	.word	0x0800189f
 8001814:	0800189f 	.word	0x0800189f
 8001818:	0800189f 	.word	0x0800189f
 800181c:	0800189f 	.word	0x0800189f
 8001820:	0800189f 	.word	0x0800189f
 8001824:	0800189f 	.word	0x0800189f
 8001828:	0800189f 	.word	0x0800189f
 800182c:	0800189f 	.word	0x0800189f
 8001830:	0800189f 	.word	0x0800189f
 8001834:	0800184d 	.word	0x0800184d
 8001838:	08001861 	.word	0x08001861
 800183c:	4a79      	ldr	r2, [pc, #484]	; (8001a24 <HAL_GPIO_Init+0x2b4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001842:	e02c      	b.n	800189e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e029      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	3304      	adds	r3, #4
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e024      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	3308      	adds	r3, #8
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e01f      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	330c      	adds	r3, #12
 8001866:	623b      	str	r3, [r7, #32]
          break;
 8001868:	e01a      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001872:	2304      	movs	r3, #4
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e013      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	611a      	str	r2, [r3, #16]
          break;
 800188a:	e009      	b.n	80018a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	615a      	str	r2, [r3, #20]
          break;
 8001896:	e003      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          break;
 800189e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d801      	bhi.n	80018aa <HAL_GPIO_Init+0x13a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	e001      	b.n	80018ae <HAL_GPIO_Init+0x13e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d802      	bhi.n	80018bc <HAL_GPIO_Init+0x14c>
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x152>
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	3b08      	subs	r3, #8
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	210f      	movs	r1, #15
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	6a39      	ldr	r1, [r7, #32]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80b1 	beq.w	8001a52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f0:	4b4d      	ldr	r3, [pc, #308]	; (8001a28 <HAL_GPIO_Init+0x2b8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a4c      	ldr	r2, [pc, #304]	; (8001a28 <HAL_GPIO_Init+0x2b8>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <HAL_GPIO_Init+0x2b8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001908:	4a48      	ldr	r2, [pc, #288]	; (8001a2c <HAL_GPIO_Init+0x2bc>)
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a40      	ldr	r2, [pc, #256]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d013      	beq.n	800195c <HAL_GPIO_Init+0x1ec>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3f      	ldr	r2, [pc, #252]	; (8001a34 <HAL_GPIO_Init+0x2c4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1e8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3e      	ldr	r2, [pc, #248]	; (8001a38 <HAL_GPIO_Init+0x2c8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1e4>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a3d      	ldr	r2, [pc, #244]	; (8001a3c <HAL_GPIO_Init+0x2cc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1e0>
 800194c:	2303      	movs	r3, #3
 800194e:	e006      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001950:	2304      	movs	r3, #4
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001954:	2302      	movs	r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 800195c:	2300      	movs	r3, #0
 800195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196e:	492f      	ldr	r1, [pc, #188]	; (8001a2c <HAL_GPIO_Init+0x2bc>)
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	492c      	ldr	r1, [pc, #176]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	43db      	mvns	r3, r3
 800199e:	4928      	ldr	r1, [pc, #160]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4922      	ldr	r1, [pc, #136]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	491e      	ldr	r1, [pc, #120]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4918      	ldr	r1, [pc, #96]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4914      	ldr	r1, [pc, #80]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d021      	beq.n	8001a44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	490e      	ldr	r1, [pc, #56]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
 8001a0c:	e021      	b.n	8001a52 <HAL_GPIO_Init+0x2e2>
 8001a0e:	bf00      	nop
 8001a10:	10320000 	.word	0x10320000
 8001a14:	10310000 	.word	0x10310000
 8001a18:	10220000 	.word	0x10220000
 8001a1c:	10210000 	.word	0x10210000
 8001a20:	10120000 	.word	0x10120000
 8001a24:	10110000 	.word	0x10110000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40010800 	.word	0x40010800
 8001a34:	40010c00 	.word	0x40010c00
 8001a38:	40011000 	.word	0x40011000
 8001a3c:	40011400 	.word	0x40011400
 8001a40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_GPIO_Init+0x304>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	4909      	ldr	r1, [pc, #36]	; (8001a74 <HAL_GPIO_Init+0x304>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	3301      	adds	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f47f ae8e 	bne.w	8001784 <HAL_GPIO_Init+0x14>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	372c      	adds	r7, #44	; 0x2c
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e001      	b.n	8001a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	807b      	strh	r3, [r7, #2]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab6:	787b      	ldrb	r3, [r7, #1]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abc:	887a      	ldrh	r2, [r7, #2]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac2:	e003      	b.n	8001acc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	041a      	lsls	r2, r3, #16
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	611a      	str	r2, [r3, #16]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae8:	887a      	ldrh	r2, [r7, #2]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	041a      	lsls	r2, r3, #16
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	400b      	ands	r3, r1
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e26c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8087 	beq.w	8001c36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d112      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5e>
 8001b40:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d06c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x12c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d168      	bne.n	8001c34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e246      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x76>
 8001b70:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e02e      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x98>
 8001b86:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7a      	ldr	r2, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a77      	ldr	r2, [pc, #476]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xbc>
 8001baa:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a71      	ldr	r2, [pc, #452]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001bc4:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6a      	ldr	r2, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fbfc 	bl	80013e0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fbf8 	bl	80013e0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1fa      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xe4>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fbe8 	bl	80013e0 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fbe4 	bl	80013e0 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1e6      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x10c>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x18c>
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x176>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1ba      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4939      	ldr	r1, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fb9d 	bl	80013e0 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fb99 	bl	80013e0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e19b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fb7c 	bl	80013e0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cec:	f7ff fb78 	bl	80013e0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e17a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03a      	beq.n	8001d8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff fb5c 	bl	80013e0 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fb58 	bl	80013e0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e15a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f000 fad8 	bl	8002300 <RCC_Delay>
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff fb42 	bl	80013e0 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fb3e 	bl	80013e0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d908      	bls.n	8001d80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e140      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	42420000 	.word	0x42420000
 8001d7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b9e      	ldr	r3, [pc, #632]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e9      	bne.n	8001d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a6 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b97      	ldr	r3, [pc, #604]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b94      	ldr	r3, [pc, #592]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a93      	ldr	r2, [pc, #588]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b8e      	ldr	r3, [pc, #568]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a8a      	ldr	r2, [pc, #552]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7ff faff 	bl	80013e0 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7ff fafb 	bl	80013e0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0fd      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b81      	ldr	r3, [pc, #516]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x312>
 8001e0c:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a7a      	ldr	r2, [pc, #488]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x334>
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a75      	ldr	r2, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a72      	ldr	r2, [pc, #456]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	e01c      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x356>
 8001e44:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a6c      	ldr	r2, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a66      	ldr	r2, [pc, #408]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a63      	ldr	r2, [pc, #396]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff faaf 	bl	80013e0 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff faab 	bl	80013e0 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0ab      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCC_OscConfig+0x37e>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fa99 	bl	80013e0 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff fa95 	bl	80013e0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e095      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a47      	ldr	r2, [pc, #284]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8081 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d061      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d146      	bne.n	8001f92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fa69 	bl	80013e0 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7ff fa65 	bl	80013e0 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e067      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	492d      	ldr	r1, [pc, #180]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a19      	ldr	r1, [r3, #32]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	4927      	ldr	r1, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fa39 	bl	80013e0 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff fa35 	bl	80013e0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e037      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46a>
 8001f90:	e02f      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fa22 	bl	80013e0 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff fa1e 	bl	80013e0 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e020      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x498>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e013      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
 8002004:	42420060 	.word	0x42420060

08002008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0d0      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d910      	bls.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4965      	ldr	r1, [pc, #404]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d040      	beq.n	8002128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e073      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e06b      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4936      	ldr	r1, [pc, #216]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7ff f972 	bl	80013e0 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7ff f96e 	bl	80013e0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e053      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d210      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4922      	ldr	r1, [pc, #136]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f821 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490a      	ldr	r1, [pc, #40]	; (80021d0 <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1cc>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f8d0 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08003c28 	.word	0x08003c28
 80021d4:	20000048 	.word	0x20000048
 80021d8:	2000004c 	.word	0x2000004c

080021dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b490      	push	{r4, r7}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e4:	1d3c      	adds	r4, r7, #4
 80021e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021ec:	f240 2301 	movw	r3, #513	; 0x201
 80021f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x40>
 8002216:	2b08      	cmp	r3, #8
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x46>
 800221a:	e02d      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221e:	623b      	str	r3, [r7, #32]
      break;
 8002220:	e02d      	b.n	800227e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	0c9b      	lsrs	r3, r3, #18
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800222e:	4413      	add	r3, r2
 8002230:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002234:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0c5b      	lsrs	r3, r3, #17
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800224e:	4413      	add	r3, r2
 8002250:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002254:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225a:	fb02 f203 	mul.w	r2, r2, r3
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	e004      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	623b      	str	r3, [r7, #32]
      break;
 8002276:	e002      	b.n	800227e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227a:	623b      	str	r3, [r7, #32]
      break;
 800227c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227e:	6a3b      	ldr	r3, [r7, #32]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bc90      	pop	{r4, r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	08003c18 	.word	0x08003c18
 8002290:	40021000 	.word	0x40021000
 8002294:	007a1200 	.word	0x007a1200
 8002298:	003d0900 	.word	0x003d0900

0800229c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <HAL_RCC_GetHCLKFreq+0x10>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	20000048 	.word	0x20000048

080022b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b4:	f7ff fff2 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4903      	ldr	r1, [pc, #12]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08003c38 	.word	0x08003c38

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022dc:	f7ff ffde 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0adb      	lsrs	r3, r3, #11
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4903      	ldr	r1, [pc, #12]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08003c38 	.word	0x08003c38

08002300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <RCC_Delay+0x34>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <RCC_Delay+0x38>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a5b      	lsrs	r3, r3, #9
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800231c:	bf00      	nop
  }
  while (Delay --);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e5a      	subs	r2, r3, #1
 8002322:	60fa      	str	r2, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f9      	bne.n	800231c <RCC_Delay+0x1c>
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	20000048 	.word	0x20000048
 8002338:	10624dd3 	.word	0x10624dd3

0800233c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e041      	b.n	80023d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7fe feae 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f000 fc28 	bl	8002bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d001      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e03a      	b.n	800246a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_TIM_Base_Start_IT+0x98>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00e      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x58>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241e:	d009      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x58>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_TIM_Base_Start_IT+0x9c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d004      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x58>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a13      	ldr	r2, [pc, #76]	; (800247c <HAL_TIM_Base_Start_IT+0xa0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d111      	bne.n	8002458 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b06      	cmp	r3, #6
 8002444:	d010      	beq.n	8002468 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0201 	orr.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002456:	e007      	b.n	8002468 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40012c00 	.word	0x40012c00
 8002478:	40000400 	.word	0x40000400
 800247c:	40000800 	.word	0x40000800

08002480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e041      	b.n	8002516 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f839 	bl	800251e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 fb86 	bl	8002bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_TIM_PWM_Start+0x24>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e022      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d109      	bne.n	800256e <HAL_TIM_PWM_Start+0x3e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e015      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d109      	bne.n	8002588 <HAL_TIM_PWM_Start+0x58>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e008      	b.n	800259a <HAL_TIM_PWM_Start+0x6a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e05e      	b.n	8002660 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0x82>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b0:	e013      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_PWM_Start+0x92>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c0:	e00b      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d104      	bne.n	80025d2 <HAL_TIM_PWM_Start+0xa2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d0:	e003      	b.n	80025da <HAL_TIM_PWM_Start+0xaa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	6839      	ldr	r1, [r7, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fd74 	bl	80030d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <HAL_TIM_PWM_Start+0x138>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d107      	bne.n	8002602 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_TIM_PWM_Start+0x138>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_TIM_PWM_Start+0xfa>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d009      	beq.n	800262a <HAL_TIM_PWM_Start+0xfa>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a14      	ldr	r2, [pc, #80]	; (800266c <HAL_TIM_PWM_Start+0x13c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_TIM_PWM_Start+0xfa>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_TIM_PWM_Start+0x140>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d010      	beq.n	800265e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264c:	e007      	b.n	800265e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40000400 	.word	0x40000400
 8002670:	40000800 	.word	0x40000800

08002674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d122      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b02      	cmp	r3, #2
 8002696:	d11b      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0202 	mvn.w	r2, #2
 80026a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fa6f 	bl	8002b9a <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa62 	bl	8002b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fa71 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d122      	bne.n	8002724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d11b      	bne.n	8002724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0204 	mvn.w	r2, #4
 80026f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa45 	bl	8002b9a <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa38 	bl	8002b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fa47 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b08      	cmp	r3, #8
 8002730:	d122      	bne.n	8002778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b08      	cmp	r3, #8
 800273e:	d11b      	bne.n	8002778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0208 	mvn.w	r2, #8
 8002748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2204      	movs	r2, #4
 800274e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa1b 	bl	8002b9a <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa0e 	bl	8002b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fa1d 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b10      	cmp	r3, #16
 8002784:	d122      	bne.n	80027cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b10      	cmp	r3, #16
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0210 	mvn.w	r2, #16
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2208      	movs	r2, #8
 80027a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f9f1 	bl	8002b9a <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9e4 	bl	8002b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f9f3 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0201 	mvn.w	r2, #1
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe f9e8 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b80      	cmp	r3, #128	; 0x80
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fce1 	bl	80031e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f9b7 	bl	8002bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b20      	cmp	r3, #32
 800285c:	d10e      	bne.n	800287c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b20      	cmp	r3, #32
 800286a:	d107      	bne.n	800287c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0220 	mvn.w	r2, #32
 8002874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fcac 	bl	80031d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800289a:	2302      	movs	r3, #2
 800289c:	e0ac      	b.n	80029f8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	f200 809f 	bhi.w	80029ec <HAL_TIM_PWM_ConfigChannel+0x168>
 80028ae:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	080029ed 	.word	0x080029ed
 80028bc:	080029ed 	.word	0x080029ed
 80028c0:	080029ed 	.word	0x080029ed
 80028c4:	08002929 	.word	0x08002929
 80028c8:	080029ed 	.word	0x080029ed
 80028cc:	080029ed 	.word	0x080029ed
 80028d0:	080029ed 	.word	0x080029ed
 80028d4:	0800296b 	.word	0x0800296b
 80028d8:	080029ed 	.word	0x080029ed
 80028dc:	080029ed 	.word	0x080029ed
 80028e0:	080029ed 	.word	0x080029ed
 80028e4:	080029ab 	.word	0x080029ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f9d0 	bl	8002c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0208 	orr.w	r2, r2, #8
 8002902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0204 	bic.w	r2, r2, #4
 8002912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6999      	ldr	r1, [r3, #24]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	619a      	str	r2, [r3, #24]
      break;
 8002926:	e062      	b.n	80029ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fa16 	bl	8002d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	619a      	str	r2, [r3, #24]
      break;
 8002968:	e041      	b.n	80029ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fa5f 	bl	8002e34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0208 	orr.w	r2, r2, #8
 8002984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0204 	bic.w	r2, r2, #4
 8002994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	61da      	str	r2, [r3, #28]
      break;
 80029a8:	e021      	b.n	80029ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 faa9 	bl	8002f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69d9      	ldr	r1, [r3, #28]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	021a      	lsls	r2, r3, #8
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	61da      	str	r2, [r3, #28]
      break;
 80029ea:	e000      	b.n	80029ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80029ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_TIM_ConfigClockSource+0x18>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0b3      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x180>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a50:	d03e      	beq.n	8002ad0 <HAL_TIM_ConfigClockSource+0xd0>
 8002a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a56:	f200 8087 	bhi.w	8002b68 <HAL_TIM_ConfigClockSource+0x168>
 8002a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5e:	f000 8085 	beq.w	8002b6c <HAL_TIM_ConfigClockSource+0x16c>
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a66:	d87f      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
 8002a68:	2b70      	cmp	r3, #112	; 0x70
 8002a6a:	d01a      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0xa2>
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d87b      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
 8002a70:	2b60      	cmp	r3, #96	; 0x60
 8002a72:	d050      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x116>
 8002a74:	2b60      	cmp	r3, #96	; 0x60
 8002a76:	d877      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
 8002a78:	2b50      	cmp	r3, #80	; 0x50
 8002a7a:	d03c      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0xf6>
 8002a7c:	2b50      	cmp	r3, #80	; 0x50
 8002a7e:	d873      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d058      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x136>
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d86f      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
 8002a88:	2b30      	cmp	r3, #48	; 0x30
 8002a8a:	d064      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x156>
 8002a8c:	2b30      	cmp	r3, #48	; 0x30
 8002a8e:	d86b      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d060      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x156>
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d867      	bhi.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05c      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x156>
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d05a      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002aa0:	e062      	b.n	8002b68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f000 faee 	bl	8003092 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	609a      	str	r2, [r3, #8]
      break;
 8002ace:	e04e      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6899      	ldr	r1, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f000 fad7 	bl	8003092 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af2:	609a      	str	r2, [r3, #8]
      break;
 8002af4:	e03b      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 fa4e 	bl	8002fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2150      	movs	r1, #80	; 0x50
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 faa5 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002b14:	e02b      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 fa6c 	bl	8003000 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2160      	movs	r1, #96	; 0x60
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fa95 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002b34:	e01b      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 fa2e 	bl	8002fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2140      	movs	r1, #64	; 0x40
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fa85 	bl	800305e <TIM_ITRx_SetConfig>
      break;
 8002b54:	e00b      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4610      	mov	r0, r2
 8002b62:	f000 fa7c 	bl	800305e <TIM_ITRx_SetConfig>
        break;
 8002b66:	e002      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <TIM_Base_SetConfig+0xb8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <TIM_Base_SetConfig+0x30>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bee:	d007      	beq.n	8002c00 <TIM_Base_SetConfig+0x30>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <TIM_Base_SetConfig+0xbc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <TIM_Base_SetConfig+0x30>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <TIM_Base_SetConfig+0xc0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d108      	bne.n	8002c12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <TIM_Base_SetConfig+0xb8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00b      	beq.n	8002c32 <TIM_Base_SetConfig+0x62>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c20:	d007      	beq.n	8002c32 <TIM_Base_SetConfig+0x62>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <TIM_Base_SetConfig+0xbc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d003      	beq.n	8002c32 <TIM_Base_SetConfig+0x62>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <TIM_Base_SetConfig+0xc0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d108      	bne.n	8002c44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <TIM_Base_SetConfig+0xb8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d103      	bne.n	8002c78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	615a      	str	r2, [r3, #20]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800

08002c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f023 0201 	bic.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f023 0302 	bic.w	r3, r3, #2
 8002cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <TIM_OC1_SetConfig+0xc8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10c      	bne.n	8002d0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0308 	bic.w	r3, r3, #8
 8002cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <TIM_OC1_SetConfig+0xc8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40012c00 	.word	0x40012c00

08002d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f023 0210 	bic.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f023 0320 	bic.w	r3, r3, #32
 8002daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <TIM_OC2_SetConfig+0xd0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10d      	bne.n	8002ddc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <TIM_OC2_SetConfig+0xd0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d113      	bne.n	8002e0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00

08002e34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <TIM_OC3_SetConfig+0xd0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10d      	bne.n	8002eae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <TIM_OC3_SetConfig+0xd0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d113      	bne.n	8002ede <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	621a      	str	r2, [r3, #32]
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40012c00 	.word	0x40012c00

08002f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	031b      	lsls	r3, r3, #12
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0f      	ldr	r2, [pc, #60]	; (8002fa0 <TIM_OC4_SetConfig+0x98>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d109      	bne.n	8002f7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40012c00 	.word	0x40012c00

08002fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f023 0201 	bic.w	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f023 030a 	bic.w	r3, r3, #10
 8002fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	621a      	str	r2, [r3, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f023 0210 	bic.w	r2, r3, #16
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800302a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	031b      	lsls	r3, r3, #12
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800303c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	621a      	str	r2, [r3, #32]
}
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	f043 0307 	orr.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b087      	sub	sp, #28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	021a      	lsls	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	609a      	str	r2, [r3, #8]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2201      	movs	r2, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	401a      	ands	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1a      	ldr	r2, [r3, #32]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	621a      	str	r2, [r3, #32]
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800312c:	2302      	movs	r3, #2
 800312e:	e046      	b.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d009      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a10      	ldr	r2, [pc, #64]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10c      	bne.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40000400 	.word	0x40000400
 80031d0:	40000800 	.word	0x40000800

080031d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e03f      	b.n	800328a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd ffc2 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800323a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fc25 	bl	8003a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b08a      	sub	sp, #40	; 0x28
 8003296:	af02      	add	r7, sp, #8
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d17c      	bne.n	80033ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_UART_Transmit+0x2c>
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e075      	b.n	80033ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_UART_Transmit+0x3e>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e06e      	b.n	80033ae <HAL_UART_Transmit+0x11c>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2221      	movs	r2, #33	; 0x21
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032e6:	f7fe f87b 	bl	80013e0 <HAL_GetTick>
 80032ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d108      	bne.n	8003314 <HAL_UART_Transmit+0x82>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	e003      	b.n	800331c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003324:	e02a      	b.n	800337c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fa11 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e036      	b.n	80033ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	3302      	adds	r3, #2
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e007      	b.n	800336e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	3301      	adds	r3, #1
 800336c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1cf      	bne.n	8003326 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2200      	movs	r2, #0
 800338e:	2140      	movs	r1, #64	; 0x40
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f9e1 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e006      	b.n	80033ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10d      	bne.n	800340a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_UART_IRQHandler+0x52>
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa99 	bl	800393a <UART_Receive_IT>
      return;
 8003408:	e17b      	b.n	8003702 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80b1 	beq.w	8003574 <HAL_UART_IRQHandler+0x1bc>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_UART_IRQHandler+0x70>
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80a6 	beq.w	8003574 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_UART_IRQHandler+0x90>
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_UART_IRQHandler+0xb0>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f043 0202 	orr.w	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_UART_IRQHandler+0xd0>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00f      	beq.n	80034b2 <HAL_UART_IRQHandler+0xfa>
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d104      	bne.n	80034a6 <HAL_UART_IRQHandler+0xee>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0208 	orr.w	r2, r3, #8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 811e 	beq.w	80036f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_UART_IRQHandler+0x11e>
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fa32 	bl	800393a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <HAL_UART_IRQHandler+0x146>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d031      	beq.n	8003562 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f974 	bl	80037ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d023      	beq.n	800355a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003520:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	2b00      	cmp	r3, #0
 8003528:	d013      	beq.n	8003552 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	4a76      	ldr	r2, [pc, #472]	; (8003708 <HAL_UART_IRQHandler+0x350>)
 8003530:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe f8a4 	bl	8001684 <HAL_DMA_Abort_IT>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800354c:	4610      	mov	r0, r2
 800354e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	e00e      	b.n	8003570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8ec 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003558:	e00a      	b.n	8003570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8e8 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	e006      	b.n	8003570 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8e4 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800356e:	e0c3      	b.n	80036f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	bf00      	nop
    return;
 8003572:	e0c1      	b.n	80036f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	2b01      	cmp	r3, #1
 800357a:	f040 80a1 	bne.w	80036c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 809b 	beq.w	80036c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8095 	beq.w	80036c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d04e      	beq.n	8003658 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80035c4:	8a3b      	ldrh	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 8098 	beq.w	80036fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035d0:	8a3a      	ldrh	r2, [r7, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	f080 8092 	bcs.w	80036fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8a3a      	ldrh	r2, [r7, #16]
 80035dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d02b      	beq.n	8003640 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003616:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0210 	bic.w	r2, r2, #16
 8003634:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd ffe7 	bl	800160e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003648:	b29b      	uxth	r3, r3
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	b29b      	uxth	r3, r3
 800364e:	4619      	mov	r1, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f876 	bl	8003742 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003656:	e051      	b.n	80036fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003660:	b29b      	uxth	r3, r3
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d047      	beq.n	8003700 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003670:	8a7b      	ldrh	r3, [r7, #18]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d044      	beq.n	8003700 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003684:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0210 	bic.w	r2, r2, #16
 80036b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036b4:	8a7b      	ldrh	r3, [r7, #18]
 80036b6:	4619      	mov	r1, r3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f842 	bl	8003742 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036be:	e01f      	b.n	8003700 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_UART_IRQHandler+0x324>
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f8c9 	bl	800386c <UART_Transmit_IT>
    return;
 80036da:	e012      	b.n	8003702 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <HAL_UART_IRQHandler+0x34a>
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f90a 	bl	800390a <UART_EndTransmit_IT>
    return;
 80036f6:	e004      	b.n	8003702 <HAL_UART_IRQHandler+0x34a>
    return;
 80036f8:	bf00      	nop
 80036fa:	e002      	b.n	8003702 <HAL_UART_IRQHandler+0x34a>
      return;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HAL_UART_IRQHandler+0x34a>
      return;
 8003700:	bf00      	nop
  }
}
 8003702:	3728      	adds	r7, #40	; 0x28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	08003845 	.word	0x08003845

0800370c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	e02c      	b.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d028      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <UART_WaitOnFlagUntilTimeout+0x30>
 8003778:	f7fd fe32 	bl	80013e0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	429a      	cmp	r2, r3
 8003786:	d21d      	bcs.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003796:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e00f      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d0c3      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003802:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0210 	bic.w	r2, r2, #16
 800382a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff ff66 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b21      	cmp	r3, #33	; 0x21
 800387e:	d13e      	bne.n	80038fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003888:	d114      	bne.n	80038b4 <UART_Transmit_IT+0x48>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d110      	bne.n	80038b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	1c9a      	adds	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	621a      	str	r2, [r3, #32]
 80038b2:	e008      	b.n	80038c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	1c59      	adds	r1, r3, #1
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6211      	str	r1, [r2, #32]
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4619      	mov	r1, r3
 80038d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003920:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff feee 	bl	800370c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b22      	cmp	r3, #34	; 0x22
 800394c:	f040 8099 	bne.w	8003a82 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d117      	bne.n	800398a <UART_Receive_IT+0x50>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d113      	bne.n	800398a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003978:	b29a      	uxth	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	1c9a      	adds	r2, r3, #2
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
 8003988:	e026      	b.n	80039d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399c:	d007      	beq.n	80039ae <UART_Receive_IT+0x74>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <UART_Receive_IT+0x82>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e008      	b.n	80039ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4619      	mov	r1, r3
 80039e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d148      	bne.n	8003a7e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0220 	bic.w	r2, r2, #32
 80039fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d123      	bne.n	8003a74 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0210 	bic.w	r2, r2, #16
 8003a40:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d10a      	bne.n	8003a66 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff fe68 	bl	8003742 <HAL_UARTEx_RxEventCallback>
 8003a72:	e002      	b.n	8003a7a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fe52 	bl	800371e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e002      	b.n	8003a84 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ac6:	f023 030c 	bic.w	r3, r3, #12
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a2c      	ldr	r2, [pc, #176]	; (8003ba0 <UART_SetConfig+0x114>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d103      	bne.n	8003afc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7fe fbf0 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	e002      	b.n	8003b02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003afc:	f7fe fbd8 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8003b00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <UART_SetConfig+0x118>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	0119      	lsls	r1, r3, #4
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009a      	lsls	r2, r3, #2
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <UART_SetConfig+0x118>)
 8003b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2064      	movs	r0, #100	; 0x64
 8003b42:	fb00 f303 	mul.w	r3, r0, r3
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	3332      	adds	r3, #50	; 0x32
 8003b4c:	4a15      	ldr	r2, [pc, #84]	; (8003ba4 <UART_SetConfig+0x118>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b58:	4419      	add	r1, r3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009a      	lsls	r2, r3, #2
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <UART_SetConfig+0x118>)
 8003b72:	fba3 0302 	umull	r0, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	2064      	movs	r0, #100	; 0x64
 8003b7a:	fb00 f303 	mul.w	r3, r0, r3
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	3332      	adds	r3, #50	; 0x32
 8003b84:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <UART_SetConfig+0x118>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	440a      	add	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40013800 	.word	0x40013800
 8003ba4:	51eb851f 	.word	0x51eb851f

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	2600      	movs	r6, #0
 8003bac:	4d0c      	ldr	r5, [pc, #48]	; (8003be0 <__libc_init_array+0x38>)
 8003bae:	4c0d      	ldr	r4, [pc, #52]	; (8003be4 <__libc_init_array+0x3c>)
 8003bb0:	1b64      	subs	r4, r4, r5
 8003bb2:	10a4      	asrs	r4, r4, #2
 8003bb4:	42a6      	cmp	r6, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	f000 f822 	bl	8003c00 <_init>
 8003bbc:	2600      	movs	r6, #0
 8003bbe:	4d0a      	ldr	r5, [pc, #40]	; (8003be8 <__libc_init_array+0x40>)
 8003bc0:	4c0a      	ldr	r4, [pc, #40]	; (8003bec <__libc_init_array+0x44>)
 8003bc2:	1b64      	subs	r4, r4, r5
 8003bc4:	10a4      	asrs	r4, r4, #2
 8003bc6:	42a6      	cmp	r6, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd0:	4798      	blx	r3
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bda:	4798      	blx	r3
 8003bdc:	3601      	adds	r6, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	08003c40 	.word	0x08003c40
 8003be4:	08003c40 	.word	0x08003c40
 8003be8:	08003c40 	.word	0x08003c40
 8003bec:	08003c44 	.word	0x08003c44

08003bf0 <memset>:
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4402      	add	r2, r0
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d100      	bne.n	8003bfa <memset+0xa>
 8003bf8:	4770      	bx	lr
 8003bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfe:	e7f9      	b.n	8003bf4 <memset+0x4>

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
