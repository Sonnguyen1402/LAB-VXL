
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002718  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002844  08002844  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002844  08002844  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002844  08002844  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800284c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000020  0800286c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  0800286c  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009682  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b53  00000000  00000000  000296cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016c2e  00000000  00000000  0002bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000be4b  00000000  00000000  00042896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00082442  00000000  00000000  0004e6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000d0b23  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000938  00000000  00000000  000d0b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000287c  00000000  00000000  000d14b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	0800280c 	.word	0x0800280c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	0800280c 	.word	0x0800280c

0800014c <fsm_for_input_processing>:
#include "global.h"

enum ButtonState { BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND };
enum ButtonState buttonState[NO_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};

void fsm_for_input_processing ( void ){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e093      	b.n	8000280 <fsm_for_input_processing+0x134>
		switch ( buttonState[i]){
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a4e      	ldr	r2, [pc, #312]	; (8000294 <fsm_for_input_processing+0x148>)
 800015c:	5cd3      	ldrb	r3, [r2, r3]
 800015e:	2b02      	cmp	r3, #2
 8000160:	d07a      	beq.n	8000258 <fsm_for_input_processing+0x10c>
 8000162:	2b02      	cmp	r3, #2
 8000164:	f300 8084 	bgt.w	8000270 <fsm_for_input_processing+0x124>
 8000168:	2b00      	cmp	r3, #0
 800016a:	d002      	beq.n	8000172 <fsm_for_input_processing+0x26>
 800016c:	2b01      	cmp	r3, #1
 800016e:	d05b      	beq.n	8000228 <fsm_for_input_processing+0xdc>
			if (!is_button_pressed (i)){
				buttonState [i] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000170:	e07e      	b.n	8000270 <fsm_for_input_processing+0x124>
			if( is_button_pressed(i)){
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	4618      	mov	r0, r3
 8000176:	f000 f92d 	bl	80003d4 <is_button_pressed>
 800017a:	4603      	mov	r3, r0
 800017c:	2b00      	cmp	r3, #0
 800017e:	d04b      	beq.n	8000218 <fsm_for_input_processing+0xcc>
				buttonState [i] = BUTTON_PRESSED;
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	4a44      	ldr	r2, [pc, #272]	; (8000294 <fsm_for_input_processing+0x148>)
 8000184:	2101      	movs	r1, #1
 8000186:	54d1      	strb	r1, [r2, r3]
				switch (i){
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	2b02      	cmp	r3, #2
 800018c:	d029      	beq.n	80001e2 <fsm_for_input_processing+0x96>
 800018e:	2b02      	cmp	r3, #2
 8000190:	dc44      	bgt.n	800021c <fsm_for_input_processing+0xd0>
 8000192:	2b00      	cmp	r3, #0
 8000194:	d002      	beq.n	800019c <fsm_for_input_processing+0x50>
 8000196:	2b01      	cmp	r3, #1
 8000198:	d011      	beq.n	80001be <fsm_for_input_processing+0x72>
					break;
 800019a:	e03f      	b.n	800021c <fsm_for_input_processing+0xd0>
					initState = 0;
 800019c:	4b3e      	ldr	r3, [pc, #248]	; (8000298 <fsm_for_input_processing+0x14c>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
					if (mode >= 4) mode = 1;
 80001a2:	4b3e      	ldr	r3, [pc, #248]	; (800029c <fsm_for_input_processing+0x150>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b03      	cmp	r3, #3
 80001a8:	dd03      	ble.n	80001b2 <fsm_for_input_processing+0x66>
 80001aa:	4b3c      	ldr	r3, [pc, #240]	; (800029c <fsm_for_input_processing+0x150>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	601a      	str	r2, [r3, #0]
					break;
 80001b0:	e039      	b.n	8000226 <fsm_for_input_processing+0xda>
					else mode++;
 80001b2:	4b3a      	ldr	r3, [pc, #232]	; (800029c <fsm_for_input_processing+0x150>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	3301      	adds	r3, #1
 80001b8:	4a38      	ldr	r2, [pc, #224]	; (800029c <fsm_for_input_processing+0x150>)
 80001ba:	6013      	str	r3, [r2, #0]
					break;
 80001bc:	e033      	b.n	8000226 <fsm_for_input_processing+0xda>
					if (mode <= 1) break;
 80001be:	4b37      	ldr	r3, [pc, #220]	; (800029c <fsm_for_input_processing+0x150>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	dd2c      	ble.n	8000220 <fsm_for_input_processing+0xd4>
					if (duration >= 99) duration = 1;
 80001c6:	4b36      	ldr	r3, [pc, #216]	; (80002a0 <fsm_for_input_processing+0x154>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b62      	cmp	r3, #98	; 0x62
 80001cc:	dd03      	ble.n	80001d6 <fsm_for_input_processing+0x8a>
 80001ce:	4b34      	ldr	r3, [pc, #208]	; (80002a0 <fsm_for_input_processing+0x154>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	601a      	str	r2, [r3, #0]
					break;
 80001d4:	e027      	b.n	8000226 <fsm_for_input_processing+0xda>
					else duration++;
 80001d6:	4b32      	ldr	r3, [pc, #200]	; (80002a0 <fsm_for_input_processing+0x154>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	3301      	adds	r3, #1
 80001dc:	4a30      	ldr	r2, [pc, #192]	; (80002a0 <fsm_for_input_processing+0x154>)
 80001de:	6013      	str	r3, [r2, #0]
					break;
 80001e0:	e021      	b.n	8000226 <fsm_for_input_processing+0xda>
					if (mode == 2) timeDurations[0] = duration;
 80001e2:	4b2e      	ldr	r3, [pc, #184]	; (800029c <fsm_for_input_processing+0x150>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b02      	cmp	r3, #2
 80001e8:	d104      	bne.n	80001f4 <fsm_for_input_processing+0xa8>
 80001ea:	4b2d      	ldr	r3, [pc, #180]	; (80002a0 <fsm_for_input_processing+0x154>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a2d      	ldr	r2, [pc, #180]	; (80002a4 <fsm_for_input_processing+0x158>)
 80001f0:	6013      	str	r3, [r2, #0]
					break;
 80001f2:	e017      	b.n	8000224 <fsm_for_input_processing+0xd8>
					else if (mode == 3) timeDurations[2] = duration;
 80001f4:	4b29      	ldr	r3, [pc, #164]	; (800029c <fsm_for_input_processing+0x150>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b03      	cmp	r3, #3
 80001fa:	d104      	bne.n	8000206 <fsm_for_input_processing+0xba>
 80001fc:	4b28      	ldr	r3, [pc, #160]	; (80002a0 <fsm_for_input_processing+0x154>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a28      	ldr	r2, [pc, #160]	; (80002a4 <fsm_for_input_processing+0x158>)
 8000202:	6093      	str	r3, [r2, #8]
					break;
 8000204:	e00e      	b.n	8000224 <fsm_for_input_processing+0xd8>
					else if (mode == 4) timeDurations[1] = duration;
 8000206:	4b25      	ldr	r3, [pc, #148]	; (800029c <fsm_for_input_processing+0x150>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b04      	cmp	r3, #4
 800020c:	d10a      	bne.n	8000224 <fsm_for_input_processing+0xd8>
 800020e:	4b24      	ldr	r3, [pc, #144]	; (80002a0 <fsm_for_input_processing+0x154>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a24      	ldr	r2, [pc, #144]	; (80002a4 <fsm_for_input_processing+0x158>)
 8000214:	6053      	str	r3, [r2, #4]
					break;
 8000216:	e005      	b.n	8000224 <fsm_for_input_processing+0xd8>
			}
 8000218:	bf00      	nop
 800021a:	e02e      	b.n	800027a <fsm_for_input_processing+0x12e>
					break;
 800021c:	bf00      	nop
 800021e:	e02c      	b.n	800027a <fsm_for_input_processing+0x12e>
					if (mode <= 1) break;
 8000220:	bf00      	nop
 8000222:	e02a      	b.n	800027a <fsm_for_input_processing+0x12e>
					break;
 8000224:	bf00      	nop
			break ;
 8000226:	e028      	b.n	800027a <fsm_for_input_processing+0x12e>
			if (!is_button_pressed(i)){
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f8d2 	bl	80003d4 <is_button_pressed>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d104      	bne.n	8000240 <fsm_for_input_processing+0xf4>
				buttonState[i] = BUTTON_RELEASED;
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4a16      	ldr	r2, [pc, #88]	; (8000294 <fsm_for_input_processing+0x148>)
 800023a:	2100      	movs	r1, #0
 800023c:	54d1      	strb	r1, [r2, r3]
			break;
 800023e:	e019      	b.n	8000274 <fsm_for_input_processing+0x128>
				if( is_button_pressed_1s (i)){
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f8e0 	bl	8000408 <is_button_pressed_1s>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d012      	beq.n	8000274 <fsm_for_input_processing+0x128>
					buttonState [i] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <fsm_for_input_processing+0x148>)
 8000252:	2102      	movs	r1, #2
 8000254:	54d1      	strb	r1, [r2, r3]
			break;
 8000256:	e00d      	b.n	8000274 <fsm_for_input_processing+0x128>
			if (!is_button_pressed (i)){
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f8ba 	bl	80003d4 <is_button_pressed>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d108      	bne.n	8000278 <fsm_for_input_processing+0x12c>
				buttonState [i] = BUTTON_RELEASED;
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <fsm_for_input_processing+0x148>)
 800026a:	2100      	movs	r1, #0
 800026c:	54d1      	strb	r1, [r2, r3]
			break;
 800026e:	e003      	b.n	8000278 <fsm_for_input_processing+0x12c>
			break;
 8000270:	bf00      	nop
 8000272:	e002      	b.n	800027a <fsm_for_input_processing+0x12e>
			break;
 8000274:	bf00      	nop
 8000276:	e000      	b.n	800027a <fsm_for_input_processing+0x12e>
			break;
 8000278:	bf00      	nop
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++){
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	3301      	adds	r3, #1
 800027e:	71fb      	strb	r3, [r7, #7]
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	2b02      	cmp	r3, #2
 8000284:	f67f af68 	bls.w	8000158 <fsm_for_input_processing+0xc>
		}
	}
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000005c 	.word	0x2000005c
 8000298:	20000040 	.word	0x20000040
 800029c:	2000003c 	.word	0x2000003c
 80002a0:	20000058 	.word	0x20000058
 80002a4:	20000000 	.word	0x20000000

080002a8 <button_reading>:
static uint8_t flagForButtonPress1s [ NO_OF_BUTTONS ];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s [ NO_OF_BUTTONS ];

void button_reading ( void ){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	// Repeat for 3 buttons
	for (unsigned int i = 0; i < NO_OF_BUTTONS ; i++){
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	e07a      	b.n	80003aa <button_reading+0x102>
		debounceButtonBuffer2 [i] = debounceButtonBuffer1 [i];
 80002b4:	4a41      	ldr	r2, [pc, #260]	; (80003bc <button_reading+0x114>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4413      	add	r3, r2
 80002ba:	7819      	ldrb	r1, [r3, #0]
 80002bc:	4a40      	ldr	r2, [pc, #256]	; (80003c0 <button_reading+0x118>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4413      	add	r3, r2
 80002c2:	460a      	mov	r2, r1
 80002c4:	701a      	strb	r2, [r3, #0]
		switch (i){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	d023      	beq.n	8000314 <button_reading+0x6c>
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d82d      	bhi.n	800032e <button_reading+0x86>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d003      	beq.n	80002e0 <button_reading+0x38>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d00d      	beq.n	80002fa <button_reading+0x52>
			break ;
		case 2:
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_2_GPIO_Port , BUTTON_2_Pin);
			break ;
		default :
			break ;
 80002de:	e026      	b.n	800032e <button_reading+0x86>
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_0_GPIO_Port , BUTTON_0_Pin);
 80002e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e4:	4837      	ldr	r0, [pc, #220]	; (80003c4 <button_reading+0x11c>)
 80002e6:	f001 fa51 	bl	800178c <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	4619      	mov	r1, r3
 80002ee:	4a33      	ldr	r2, [pc, #204]	; (80003bc <button_reading+0x114>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4413      	add	r3, r2
 80002f4:	460a      	mov	r2, r1
 80002f6:	701a      	strb	r2, [r3, #0]
			break ;
 80002f8:	e01a      	b.n	8000330 <button_reading+0x88>
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_1_GPIO_Port , BUTTON_1_Pin);
 80002fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002fe:	4831      	ldr	r0, [pc, #196]	; (80003c4 <button_reading+0x11c>)
 8000300:	f001 fa44 	bl	800178c <HAL_GPIO_ReadPin>
 8000304:	4603      	mov	r3, r0
 8000306:	4619      	mov	r1, r3
 8000308:	4a2c      	ldr	r2, [pc, #176]	; (80003bc <button_reading+0x114>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	460a      	mov	r2, r1
 8000310:	701a      	strb	r2, [r3, #0]
			break ;
 8000312:	e00d      	b.n	8000330 <button_reading+0x88>
			debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin (BUTTON_2_GPIO_Port , BUTTON_2_Pin);
 8000314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000318:	482a      	ldr	r0, [pc, #168]	; (80003c4 <button_reading+0x11c>)
 800031a:	f001 fa37 	bl	800178c <HAL_GPIO_ReadPin>
 800031e:	4603      	mov	r3, r0
 8000320:	4619      	mov	r1, r3
 8000322:	4a26      	ldr	r2, [pc, #152]	; (80003bc <button_reading+0x114>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4413      	add	r3, r2
 8000328:	460a      	mov	r2, r1
 800032a:	701a      	strb	r2, [r3, #0]
			break ;
 800032c:	e000      	b.n	8000330 <button_reading+0x88>
			break ;
 800032e:	bf00      	nop
		}
		if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i]){
 8000330:	4a22      	ldr	r2, [pc, #136]	; (80003bc <button_reading+0x114>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	4921      	ldr	r1, [pc, #132]	; (80003c0 <button_reading+0x118>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	440b      	add	r3, r1
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d12f      	bne.n	80003a4 <button_reading+0xfc>
			buttonBuffer [i] = debounceButtonBuffer1 [i];
 8000344:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <button_reading+0x114>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	7819      	ldrb	r1, [r3, #0]
 800034c:	4a1e      	ldr	r2, [pc, #120]	; (80003c8 <button_reading+0x120>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4413      	add	r3, r2
 8000352:	460a      	mov	r2, r1
 8000354:	701a      	strb	r2, [r3, #0]
			// if a button is pressed , we start counting
			if( buttonBuffer [i] == BUTTON_IS_PRESSED ){
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <button_reading+0x120>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4413      	add	r3, r2
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d116      	bne.n	8000390 <button_reading+0xe8>
				if( counterForButtonPress1s [i] < DURATION_FOR_AUTO_INCREASING ){
 8000362:	4a1a      	ldr	r2, [pc, #104]	; (80003cc <button_reading+0x124>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800036a:	2b63      	cmp	r3, #99	; 0x63
 800036c:	d80a      	bhi.n	8000384 <button_reading+0xdc>
					counterForButtonPress1s [i]++;
 800036e:	4a17      	ldr	r2, [pc, #92]	; (80003cc <button_reading+0x124>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000376:	3301      	adds	r3, #1
 8000378:	b299      	uxth	r1, r3
 800037a:	4a14      	ldr	r2, [pc, #80]	; (80003cc <button_reading+0x124>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000382:	e00f      	b.n	80003a4 <button_reading+0xfc>
				}
				else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed.
					flagForButtonPress1s [i] = 1;
 8000384:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <button_reading+0x128>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
 800038e:	e009      	b.n	80003a4 <button_reading+0xfc>
				}
			}
			else {
				counterForButtonPress1s [i] = 0;
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <button_reading+0x124>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2100      	movs	r1, #0
 8000396:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s [i] = 0;
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <button_reading+0x128>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
	for (unsigned int i = 0; i < NO_OF_BUTTONS ; i++){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3301      	adds	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d981      	bls.n	80002b4 <button_reading+0xc>
			}
		}
	}
}
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000064 	.word	0x20000064
 80003c0:	20000068 	.word	0x20000068
 80003c4:	40010c00 	.word	0x40010c00
 80003c8:	20000060 	.word	0x20000060
 80003cc:	20000070 	.word	0x20000070
 80003d0:	2000006c 	.word	0x2000006c

080003d4 <is_button_pressed>:

unsigned char is_button_pressed ( uint8_t index ){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0;
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d901      	bls.n	80003e8 <is_button_pressed+0x14>
 80003e4:	2300      	movs	r3, #0
 80003e6:	e007      	b.n	80003f8 <is_button_pressed+0x24>
	return (buttonBuffer [index] == BUTTON_IS_PRESSED);
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	4a06      	ldr	r2, [pc, #24]	; (8000404 <is_button_pressed+0x30>)
 80003ec:	5cd3      	ldrb	r3, [r2, r3]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	bf0c      	ite	eq
 80003f2:	2301      	moveq	r3, #1
 80003f4:	2300      	movne	r3, #0
 80003f6:	b2db      	uxtb	r3, r3
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000060 	.word	0x20000060

08000408 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s ( unsigned char index ){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
	if( index >= NO_OF_BUTTONS ) return 0xff;
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d901      	bls.n	800041c <is_button_pressed_1s+0x14>
 8000418:	23ff      	movs	r3, #255	; 0xff
 800041a:	e007      	b.n	800042c <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s [index] == 1);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4a06      	ldr	r2, [pc, #24]	; (8000438 <is_button_pressed_1s+0x30>)
 8000420:	5cd3      	ldrb	r3, [r2, r3]
 8000422:	2b01      	cmp	r3, #1
 8000424:	bf0c      	ite	eq
 8000426:	2301      	moveq	r3, #1
 8000428:	2300      	movne	r3, #0
 800042a:	b2db      	uxtb	r3, r3
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	2000006c 	.word	0x2000006c

0800043c <display7SEG_0>:
 */

#include "main.h"
#include "led_processing.h"

void display7SEG_0 ( int num ){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b09      	cmp	r3, #9
 8000448:	d87f      	bhi.n	800054a <display7SEG_0+0x10e>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <display7SEG_0+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000479 	.word	0x08000479
 8000454:	0800048f 	.word	0x0800048f
 8000458:	080004a5 	.word	0x080004a5
 800045c:	080004bb 	.word	0x080004bb
 8000460:	080004d1 	.word	0x080004d1
 8000464:	080004e7 	.word	0x080004e7
 8000468:	080004fd 	.word	0x080004fd
 800046c:	08000513 	.word	0x08000513
 8000470:	08000529 	.word	0x08000529
 8000474:	08000535 	.word	0x08000535
	switch ( num ){
		case 0:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin, RESET );
 8000478:	2200      	movs	r2, #0
 800047a:	217e      	movs	r1, #126	; 0x7e
 800047c:	4835      	ldr	r0, [pc, #212]	; (8000554 <display7SEG_0+0x118>)
 800047e:	f001 f99c 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_6_Pin, SET );
 8000482:	2201      	movs	r2, #1
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	4833      	ldr	r0, [pc, #204]	; (8000554 <display7SEG_0+0x118>)
 8000488:	f001 f997 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 800048c:	e05e      	b.n	800054c <display7SEG_0+0x110>
		case 1:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin | LED7_0_6_Pin, SET );
 800048e:	2201      	movs	r2, #1
 8000490:	21f2      	movs	r1, #242	; 0xf2
 8000492:	4830      	ldr	r0, [pc, #192]	; (8000554 <display7SEG_0+0x118>)
 8000494:	f001 f991 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_1_Pin | LED7_0_2_Pin, RESET );
 8000498:	2200      	movs	r2, #0
 800049a:	210c      	movs	r1, #12
 800049c:	482d      	ldr	r0, [pc, #180]	; (8000554 <display7SEG_0+0x118>)
 800049e:	f001 f98c 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80004a2:	e053      	b.n	800054c <display7SEG_0+0x110>
		case 2:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_6_Pin, RESET );
 80004a4:	2200      	movs	r2, #0
 80004a6:	21b6      	movs	r1, #182	; 0xb6
 80004a8:	482a      	ldr	r0, [pc, #168]	; (8000554 <display7SEG_0+0x118>)
 80004aa:	f001 f986 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_2_Pin | LED7_0_5_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2148      	movs	r1, #72	; 0x48
 80004b2:	4828      	ldr	r0, [pc, #160]	; (8000554 <display7SEG_0+0x118>)
 80004b4:	f001 f981 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80004b8:	e048      	b.n	800054c <display7SEG_0+0x110>
		case 3:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_6_Pin, RESET );
 80004ba:	2200      	movs	r2, #0
 80004bc:	219e      	movs	r1, #158	; 0x9e
 80004be:	4825      	ldr	r0, [pc, #148]	; (8000554 <display7SEG_0+0x118>)
 80004c0:	f001 f97b 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_4_Pin | LED7_0_5_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2160      	movs	r1, #96	; 0x60
 80004c8:	4822      	ldr	r0, [pc, #136]	; (8000554 <display7SEG_0+0x118>)
 80004ca:	f001 f976 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80004ce:	e03d      	b.n	800054c <display7SEG_0+0x110>
		case 4:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_3_Pin | LED7_0_4_Pin, SET );
 80004d0:	2201      	movs	r2, #1
 80004d2:	2132      	movs	r1, #50	; 0x32
 80004d4:	481f      	ldr	r0, [pc, #124]	; (8000554 <display7SEG_0+0x118>)
 80004d6:	f001 f970 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 80004da:	2200      	movs	r2, #0
 80004dc:	21cc      	movs	r1, #204	; 0xcc
 80004de:	481d      	ldr	r0, [pc, #116]	; (8000554 <display7SEG_0+0x118>)
 80004e0:	f001 f96b 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80004e4:	e032      	b.n	800054c <display7SEG_0+0x110>
		case 5:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 80004e6:	2200      	movs	r2, #0
 80004e8:	21da      	movs	r1, #218	; 0xda
 80004ea:	481a      	ldr	r0, [pc, #104]	; (8000554 <display7SEG_0+0x118>)
 80004ec:	f001 f965 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_1_Pin | LED7_0_4_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2124      	movs	r1, #36	; 0x24
 80004f4:	4817      	ldr	r0, [pc, #92]	; (8000554 <display7SEG_0+0x118>)
 80004f6:	f001 f960 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80004fa:	e027      	b.n	800054c <display7SEG_0+0x110>
		case 6:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 80004fc:	2200      	movs	r2, #0
 80004fe:	21fa      	movs	r1, #250	; 0xfa
 8000500:	4814      	ldr	r0, [pc, #80]	; (8000554 <display7SEG_0+0x118>)
 8000502:	f001 f95a 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_1_Pin, SET );
 8000506:	2201      	movs	r2, #1
 8000508:	2104      	movs	r1, #4
 800050a:	4812      	ldr	r0, [pc, #72]	; (8000554 <display7SEG_0+0x118>)
 800050c:	f001 f955 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 8000510:	e01c      	b.n	800054c <display7SEG_0+0x110>
		case 7:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin, RESET );
 8000512:	2200      	movs	r2, #0
 8000514:	210e      	movs	r1, #14
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <display7SEG_0+0x118>)
 8000518:	f001 f94f 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin | LED7_0_6_Pin, SET );
 800051c:	2201      	movs	r2, #1
 800051e:	21f0      	movs	r1, #240	; 0xf0
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <display7SEG_0+0x118>)
 8000522:	f001 f94a 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 8000526:	e011      	b.n	800054c <display7SEG_0+0x110>
		case 8:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_4_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 8000528:	2200      	movs	r2, #0
 800052a:	21fe      	movs	r1, #254	; 0xfe
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <display7SEG_0+0x118>)
 800052e:	f001 f944 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 8000532:	e00b      	b.n	800054c <display7SEG_0+0x110>
		case 9:
			HAL_GPIO_WritePin (GPIOA, LED7_0_0_Pin | LED7_0_1_Pin | LED7_0_2_Pin | LED7_0_3_Pin | LED7_0_5_Pin | LED7_0_6_Pin, RESET );
 8000534:	2200      	movs	r2, #0
 8000536:	21de      	movs	r1, #222	; 0xde
 8000538:	4806      	ldr	r0, [pc, #24]	; (8000554 <display7SEG_0+0x118>)
 800053a:	f001 f93e 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_0_4_Pin, SET );
 800053e:	2201      	movs	r2, #1
 8000540:	2120      	movs	r1, #32
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <display7SEG_0+0x118>)
 8000544:	f001 f939 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 8000548:	e000      	b.n	800054c <display7SEG_0+0x110>
		default:
			break;
 800054a:	bf00      	nop
	}
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40010800 	.word	0x40010800

08000558 <display7SEG_1>:

void display7SEG_1 ( int num ){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b09      	cmp	r3, #9
 8000564:	f200 8094 	bhi.w	8000690 <display7SEG_1+0x138>
 8000568:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <display7SEG_1+0x18>)
 800056a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056e:	bf00      	nop
 8000570:	08000599 	.word	0x08000599
 8000574:	080005b3 	.word	0x080005b3
 8000578:	080005cd 	.word	0x080005cd
 800057c:	080005e7 	.word	0x080005e7
 8000580:	08000601 	.word	0x08000601
 8000584:	0800061b 	.word	0x0800061b
 8000588:	08000635 	.word	0x08000635
 800058c:	0800064f 	.word	0x0800064f
 8000590:	08000669 	.word	0x08000669
 8000594:	08000677 	.word	0x08000677
	switch ( num ){
		case 0:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin, RESET );
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800059e:	483f      	ldr	r0, [pc, #252]	; (800069c <display7SEG_1+0x144>)
 80005a0:	f001 f90b 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_6_Pin, SET );
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005aa:	483c      	ldr	r0, [pc, #240]	; (800069c <display7SEG_1+0x144>)
 80005ac:	f001 f905 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80005b0:	e06f      	b.n	8000692 <display7SEG_1+0x13a>
		case 1:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin | LED7_1_6_Pin, SET );
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 41f2 	mov.w	r1, #30976	; 0x7900
 80005b8:	4838      	ldr	r0, [pc, #224]	; (800069c <display7SEG_1+0x144>)
 80005ba:	f001 f8fe 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_1_Pin | LED7_1_2_Pin, RESET );
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80005c4:	4835      	ldr	r0, [pc, #212]	; (800069c <display7SEG_1+0x144>)
 80005c6:	f001 f8f8 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80005ca:	e062      	b.n	8000692 <display7SEG_1+0x13a>
		case 2:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_6_Pin, RESET );
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80005d2:	4832      	ldr	r0, [pc, #200]	; (800069c <display7SEG_1+0x144>)
 80005d4:	f001 f8f1 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_2_Pin | LED7_1_5_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80005de:	482f      	ldr	r0, [pc, #188]	; (800069c <display7SEG_1+0x144>)
 80005e0:	f001 f8eb 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80005e4:	e055      	b.n	8000692 <display7SEG_1+0x13a>
		case 3:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_6_Pin, RESET );
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 419e 	mov.w	r1, #20224	; 0x4f00
 80005ec:	482b      	ldr	r0, [pc, #172]	; (800069c <display7SEG_1+0x144>)
 80005ee:	f001 f8e4 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_4_Pin | LED7_1_5_Pin, SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <display7SEG_1+0x144>)
 80005fa:	f001 f8de 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 80005fe:	e048      	b.n	8000692 <display7SEG_1+0x13a>
		case 4:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_3_Pin | LED7_1_4_Pin, SET );
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000606:	4825      	ldr	r0, [pc, #148]	; (800069c <display7SEG_1+0x144>)
 8000608:	f001 f8d7 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 41cc 	mov.w	r1, #26112	; 0x6600
 8000612:	4822      	ldr	r0, [pc, #136]	; (800069c <display7SEG_1+0x144>)
 8000614:	f001 f8d1 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 8000618:	e03b      	b.n	8000692 <display7SEG_1+0x13a>
		case 5:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 41da 	mov.w	r1, #27904	; 0x6d00
 8000620:	481e      	ldr	r0, [pc, #120]	; (800069c <display7SEG_1+0x144>)
 8000622:	f001 f8ca 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_1_Pin | LED7_1_4_Pin, SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <display7SEG_1+0x144>)
 800062e:	f001 f8c4 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 8000632:	e02e      	b.n	8000692 <display7SEG_1+0x13a>
		case 6:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 800063a:	4818      	ldr	r0, [pc, #96]	; (800069c <display7SEG_1+0x144>)
 800063c:	f001 f8bd 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_1_Pin, SET );
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000646:	4815      	ldr	r0, [pc, #84]	; (800069c <display7SEG_1+0x144>)
 8000648:	f001 f8b7 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 800064c:	e021      	b.n	8000692 <display7SEG_1+0x13a>
		case 7:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin, RESET );
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000654:	4811      	ldr	r0, [pc, #68]	; (800069c <display7SEG_1+0x144>)
 8000656:	f001 f8b0 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin | LED7_1_6_Pin, SET );
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <display7SEG_1+0x144>)
 8000662:	f001 f8aa 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 8000666:	e014      	b.n	8000692 <display7SEG_1+0x13a>
		case 8:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_4_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <display7SEG_1+0x144>)
 8000670:	f001 f8a3 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 8000674:	e00d      	b.n	8000692 <display7SEG_1+0x13a>
		case 9:
			HAL_GPIO_WritePin (GPIOA, LED7_1_0_Pin | LED7_1_1_Pin | LED7_1_2_Pin | LED7_1_3_Pin | LED7_1_5_Pin | LED7_1_6_Pin, RESET );
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <display7SEG_1+0x144>)
 800067e:	f001 f89c 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, LED7_1_4_Pin, SET );
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <display7SEG_1+0x144>)
 800068a:	f001 f896 	bl	80017ba <HAL_GPIO_WritePin>
			break;
 800068e:	e000      	b.n	8000692 <display7SEG_1+0x13a>
		default:
			break;
 8000690:	bf00      	nop
	}
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40010800 	.word	0x40010800

080006a0 <updateTrafficLED>:

void updateTrafficLED(int trafficLed0, int trafficLed1){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	switch (trafficLed0){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d029      	beq.n	8000704 <updateTrafficLED+0x64>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	dc36      	bgt.n	8000724 <updateTrafficLED+0x84>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d003      	beq.n	80006c4 <updateTrafficLED+0x24>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d010      	beq.n	80006e4 <updateTrafficLED+0x44>
		HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_0_Pin, RESET);
		break;
	default:
		break;
 80006c2:	e02f      	b.n	8000724 <updateTrafficLED+0x84>
		HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	4838      	ldr	r0, [pc, #224]	; (80007ac <updateTrafficLED+0x10c>)
 80006ca:	f001 f876 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2102      	movs	r1, #2
 80006d2:	4836      	ldr	r0, [pc, #216]	; (80007ac <updateTrafficLED+0x10c>)
 80006d4:	f001 f871 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_0_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2104      	movs	r1, #4
 80006dc:	4833      	ldr	r0, [pc, #204]	; (80007ac <updateTrafficLED+0x10c>)
 80006de:	f001 f86c 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 80006e2:	e020      	b.n	8000726 <updateTrafficLED+0x86>
		HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2101      	movs	r1, #1
 80006e8:	4830      	ldr	r0, [pc, #192]	; (80007ac <updateTrafficLED+0x10c>)
 80006ea:	f001 f866 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2102      	movs	r1, #2
 80006f2:	482e      	ldr	r0, [pc, #184]	; (80007ac <updateTrafficLED+0x10c>)
 80006f4:	f001 f861 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_0_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2104      	movs	r1, #4
 80006fc:	482b      	ldr	r0, [pc, #172]	; (80007ac <updateTrafficLED+0x10c>)
 80006fe:	f001 f85c 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 8000702:	e010      	b.n	8000726 <updateTrafficLED+0x86>
		HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	4828      	ldr	r0, [pc, #160]	; (80007ac <updateTrafficLED+0x10c>)
 800070a:	f001 f856 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2102      	movs	r1, #2
 8000712:	4826      	ldr	r0, [pc, #152]	; (80007ac <updateTrafficLED+0x10c>)
 8000714:	f001 f851 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_0_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2104      	movs	r1, #4
 800071c:	4823      	ldr	r0, [pc, #140]	; (80007ac <updateTrafficLED+0x10c>)
 800071e:	f001 f84c 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 8000722:	e000      	b.n	8000726 <updateTrafficLED+0x86>
		break;
 8000724:	bf00      	nop
	}
	switch (trafficLed1){
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d029      	beq.n	8000780 <updateTrafficLED+0xe0>
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2b02      	cmp	r3, #2
 8000730:	dc36      	bgt.n	80007a0 <updateTrafficLED+0x100>
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <updateTrafficLED+0xa0>
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d010      	beq.n	8000760 <updateTrafficLED+0xc0>
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, RESET);
		break;
	default:
		break;
 800073e:	e02f      	b.n	80007a0 <updateTrafficLED+0x100>
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2108      	movs	r1, #8
 8000744:	4819      	ldr	r0, [pc, #100]	; (80007ac <updateTrafficLED+0x10c>)
 8000746:	f001 f838 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2110      	movs	r1, #16
 800074e:	4817      	ldr	r0, [pc, #92]	; (80007ac <updateTrafficLED+0x10c>)
 8000750:	f001 f833 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2120      	movs	r1, #32
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <updateTrafficLED+0x10c>)
 800075a:	f001 f82e 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 800075e:	e020      	b.n	80007a2 <updateTrafficLED+0x102>
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2108      	movs	r1, #8
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <updateTrafficLED+0x10c>)
 8000766:	f001 f828 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2110      	movs	r1, #16
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <updateTrafficLED+0x10c>)
 8000770:	f001 f823 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2120      	movs	r1, #32
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <updateTrafficLED+0x10c>)
 800077a:	f001 f81e 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 800077e:	e010      	b.n	80007a2 <updateTrafficLED+0x102>
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2108      	movs	r1, #8
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <updateTrafficLED+0x10c>)
 8000786:	f001 f818 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2110      	movs	r1, #16
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <updateTrafficLED+0x10c>)
 8000790:	f001 f813 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2120      	movs	r1, #32
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <updateTrafficLED+0x10c>)
 800079a:	f001 f80e 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 800079e:	e000      	b.n	80007a2 <updateTrafficLED+0x102>
		break;
 80007a0:	bf00      	nop
	}
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010c00 	.word	0x40010c00

080007b0 <toggleTrafficLed>:

void toggleTrafficLed(int trafficLed0, int trafficLed1){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	switch (trafficLed0){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d027      	beq.n	8000810 <toggleTrafficLed+0x60>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	dc33      	bgt.n	800082e <toggleTrafficLed+0x7e>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <toggleTrafficLed+0x24>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d00f      	beq.n	80007f2 <toggleTrafficLed+0x42>
		HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin, SET);
		HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_0_Pin);
		break;
	default:
		break;
 80007d2:	e02c      	b.n	800082e <toggleTrafficLed+0x7e>
		HAL_GPIO_TogglePin(GPIOB, LED_RED_0_Pin);
 80007d4:	2101      	movs	r1, #1
 80007d6:	4836      	ldr	r0, [pc, #216]	; (80008b0 <toggleTrafficLed+0x100>)
 80007d8:	f001 f807 	bl	80017ea <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin (GPIOB, LED_GREEN_0_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2102      	movs	r1, #2
 80007e0:	4833      	ldr	r0, [pc, #204]	; (80008b0 <toggleTrafficLed+0x100>)
 80007e2:	f000 ffea 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, LED_YELLOW_0_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2104      	movs	r1, #4
 80007ea:	4831      	ldr	r0, [pc, #196]	; (80008b0 <toggleTrafficLed+0x100>)
 80007ec:	f000 ffe5 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 80007f0:	e01e      	b.n	8000830 <toggleTrafficLed+0x80>
		HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2101      	movs	r1, #1
 80007f6:	482e      	ldr	r0, [pc, #184]	; (80008b0 <toggleTrafficLed+0x100>)
 80007f8:	f000 ffdf 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_0_Pin);
 80007fc:	2102      	movs	r1, #2
 80007fe:	482c      	ldr	r0, [pc, #176]	; (80008b0 <toggleTrafficLed+0x100>)
 8000800:	f000 fff3 	bl	80017ea <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_0_Pin, SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2104      	movs	r1, #4
 8000808:	4829      	ldr	r0, [pc, #164]	; (80008b0 <toggleTrafficLed+0x100>)
 800080a:	f000 ffd6 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 800080e:	e00f      	b.n	8000830 <toggleTrafficLed+0x80>
		HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin, SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2101      	movs	r1, #1
 8000814:	4826      	ldr	r0, [pc, #152]	; (80008b0 <toggleTrafficLed+0x100>)
 8000816:	f000 ffd0 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_0_Pin, SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2102      	movs	r1, #2
 800081e:	4824      	ldr	r0, [pc, #144]	; (80008b0 <toggleTrafficLed+0x100>)
 8000820:	f000 ffcb 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_0_Pin);
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <toggleTrafficLed+0x100>)
 8000828:	f000 ffdf 	bl	80017ea <HAL_GPIO_TogglePin>
		break;
 800082c:	e000      	b.n	8000830 <toggleTrafficLed+0x80>
		break;
 800082e:	bf00      	nop
	}
	switch (trafficLed1){
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d027      	beq.n	8000886 <toggleTrafficLed+0xd6>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	dc33      	bgt.n	80008a4 <toggleTrafficLed+0xf4>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d003      	beq.n	800084a <toggleTrafficLed+0x9a>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d00f      	beq.n	8000868 <toggleTrafficLed+0xb8>
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, SET);
		HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_1_Pin);
		break;
	default:
		break;
 8000848:	e02c      	b.n	80008a4 <toggleTrafficLed+0xf4>
		HAL_GPIO_TogglePin(GPIOB, LED_RED_1_Pin);
 800084a:	2108      	movs	r1, #8
 800084c:	4818      	ldr	r0, [pc, #96]	; (80008b0 <toggleTrafficLed+0x100>)
 800084e:	f000 ffcc 	bl	80017ea <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2110      	movs	r1, #16
 8000856:	4816      	ldr	r0, [pc, #88]	; (80008b0 <toggleTrafficLed+0x100>)
 8000858:	f000 ffaf 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2120      	movs	r1, #32
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <toggleTrafficLed+0x100>)
 8000862:	f000 ffaa 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 8000866:	e01e      	b.n	80008a6 <toggleTrafficLed+0xf6>
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2108      	movs	r1, #8
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <toggleTrafficLed+0x100>)
 800086e:	f000 ffa4 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_1_Pin);
 8000872:	2110      	movs	r1, #16
 8000874:	480e      	ldr	r0, [pc, #56]	; (80008b0 <toggleTrafficLed+0x100>)
 8000876:	f000 ffb8 	bl	80017ea <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <toggleTrafficLed+0x100>)
 8000880:	f000 ff9b 	bl	80017ba <HAL_GPIO_WritePin>
		break;
 8000884:	e00f      	b.n	80008a6 <toggleTrafficLed+0xf6>
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2108      	movs	r1, #8
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <toggleTrafficLed+0x100>)
 800088c:	f000 ff95 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2110      	movs	r1, #16
 8000894:	4806      	ldr	r0, [pc, #24]	; (80008b0 <toggleTrafficLed+0x100>)
 8000896:	f000 ff90 	bl	80017ba <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_1_Pin);
 800089a:	2120      	movs	r1, #32
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <toggleTrafficLed+0x100>)
 800089e:	f000 ffa4 	bl	80017ea <HAL_GPIO_TogglePin>
		break;
 80008a2:	e000      	b.n	80008a6 <toggleTrafficLed+0xf6>
		break;
 80008a4:	bf00      	nop
	}
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <update7SEG>:

void update7SEG(int index, int counter_0, int counter_1){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
	switch(index){
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d003      	beq.n	80008ce <update7SEG+0x1a>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d02b      	beq.n	8000924 <update7SEG+0x70>
			//display7SEG(led_buffer[0]);
			display7SEG_0(counter_0 / 10);
			display7SEG_1(counter_1 / 10);
			break;
		default:
			break;
 80008cc:	e04b      	b.n	8000966 <update7SEG+0xb2>
			HAL_GPIO_WritePin (GPIOB, EN0_Pin | EN2_Pin, RESET );
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80008d4:	4826      	ldr	r0, [pc, #152]	; (8000970 <update7SEG+0xbc>)
 80008d6:	f000 ff70 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOB, EN1_Pin | EN3_Pin, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 7120 	mov.w	r1, #640	; 0x280
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <update7SEG+0xbc>)
 80008e2:	f000 ff6a 	bl	80017ba <HAL_GPIO_WritePin>
			display7SEG_0(counter_0 % 10);
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <update7SEG+0xc0>)
 80008ea:	fb83 1302 	smull	r1, r3, r3, r2
 80008ee:	1099      	asrs	r1, r3, #2
 80008f0:	17d3      	asrs	r3, r2, #31
 80008f2:	1ac9      	subs	r1, r1, r3
 80008f4:	460b      	mov	r3, r1
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	440b      	add	r3, r1
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	1ad1      	subs	r1, r2, r3
 80008fe:	4608      	mov	r0, r1
 8000900:	f7ff fd9c 	bl	800043c <display7SEG_0>
			display7SEG_1(counter_1 % 10);
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <update7SEG+0xc0>)
 8000908:	fb83 1302 	smull	r1, r3, r3, r2
 800090c:	1099      	asrs	r1, r3, #2
 800090e:	17d3      	asrs	r3, r2, #31
 8000910:	1ac9      	subs	r1, r1, r3
 8000912:	460b      	mov	r3, r1
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	440b      	add	r3, r1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	1ad1      	subs	r1, r2, r3
 800091c:	4608      	mov	r0, r1
 800091e:	f7ff fe1b 	bl	8000558 <display7SEG_1>
			break;
 8000922:	e020      	b.n	8000966 <update7SEG+0xb2>
			HAL_GPIO_WritePin (GPIOB, EN0_Pin | EN2_Pin, SET );
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <update7SEG+0xbc>)
 800092c:	f000 ff45 	bl	80017ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOB, EN1_Pin | EN3_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <update7SEG+0xbc>)
 8000938:	f000 ff3f 	bl	80017ba <HAL_GPIO_WritePin>
			display7SEG_0(counter_0 / 10);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <update7SEG+0xc0>)
 8000940:	fb82 1203 	smull	r1, r2, r2, r3
 8000944:	1092      	asrs	r2, r2, #2
 8000946:	17db      	asrs	r3, r3, #31
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fd76 	bl	800043c <display7SEG_0>
			display7SEG_1(counter_1 / 10);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <update7SEG+0xc0>)
 8000954:	fb82 1203 	smull	r1, r2, r2, r3
 8000958:	1092      	asrs	r2, r2, #2
 800095a:	17db      	asrs	r3, r3, #31
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fdfa 	bl	8000558 <display7SEG_1>
			break;
 8000964:	bf00      	nop
	}
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40010c00 	.word	0x40010c00
 8000974:	66666667 	.word	0x66666667

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 fc1c 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f848 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f000 f8ce 	bl	8000b24 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000988:	f000 f880 	bl	8000a8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <main+0x88>)
 800098e:	f001 fb7d 	bl	800208c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer2(100);
 8000992:	2064      	movs	r0, #100	; 0x64
 8000994:	f000 fb46 	bl	8001024 <setTimer2>
  setTimerBlinking(1000);
 8000998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099c:	f000 fb0e 	bl	8000fbc <setTimerBlinking>
  while (1)
  {
	  if (getTimerBlinkingFlag() == 1){
 80009a0:	f000 fb5a 	bl	8001058 <getTimerBlinkingFlag>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d108      	bne.n	80009bc <main+0x44>
		  HAL_GPIO_TogglePin(GPIOA, LED_BLINKING_Pin);
 80009aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <main+0x8c>)
 80009b0:	f000 ff1b 	bl	80017ea <HAL_GPIO_TogglePin>
		  setTimerBlinking(1000);
 80009b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b8:	f000 fb00 	bl	8000fbc <setTimerBlinking>
	  }
	  // Two couple LED 7SEG is display with frequency is 5Hz.
	  if( getTimer2Flag() == 1){
 80009bc:	f000 fb70 	bl	80010a0 <getTimer2Flag>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d117      	bne.n	80009f6 <main+0x7e>
		  update7SEG(index7SEG, counter0, counter1);
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <main+0x90>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <main+0x94>)
 80009cc:	6811      	ldr	r1, [r2, #0]
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <main+0x98>)
 80009d0:	6812      	ldr	r2, [r2, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff6e 	bl	80008b4 <update7SEG>
		  index7SEG++;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <main+0x90>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <main+0x90>)
 80009e0:	6013      	str	r3, [r2, #0]
		  if( index7SEG >= 2) index7SEG = 0;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <main+0x90>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	dd02      	ble.n	80009f0 <main+0x78>
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <main+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
		  setTimer2(100);
 80009f0:	2064      	movs	r0, #100	; 0x64
 80009f2:	f000 fb17 	bl	8001024 <setTimer2>
	  }
	  fsm_for_input_processing();
 80009f6:	f7ff fba9 	bl	800014c <fsm_for_input_processing>
	  mode_processing();
 80009fa:	f000 f8fd 	bl	8000bf8 <mode_processing>
	  if (getTimerBlinkingFlag() == 1){
 80009fe:	e7cf      	b.n	80009a0 <main+0x28>
 8000a00:	20000090 	.word	0x20000090
 8000a04:	40010800 	.word	0x40010800
 8000a08:	20000054 	.word	0x20000054
 8000a0c:	2000004c 	.word	0x2000004c
 8000a10:	20000050 	.word	0x20000050

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b090      	sub	sp, #64	; 0x40
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	2228      	movs	r2, #40	; 0x28
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 feea 	bl	80027fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fee6 	bl	800181c <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a56:	f000 f8c9 	bl	8000bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f952 	bl	8001d1c <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f8b5 	bl	8000bec <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3740      	adds	r7, #64	; 0x40
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000ab2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000ac0:	2209      	movs	r2, #9
 8000ac2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000ad2:	f001 fa8b 	bl	8001fec <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000adc:	f000 f886 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000aee:	f001 fc21 	bl	8002334 <HAL_TIM_ConfigClockSource>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000af8:	f000 f878 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000b0a:	f001 fde9 	bl	80026e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f000 f86a 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000090 	.word	0x20000090

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7_0_0_Pin|LED7_0_1_Pin|LED7_0_2_Pin|LED7_0_3_Pin
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000b6e:	481d      	ldr	r0, [pc, #116]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b70:	f000 fe23 	bl	80017ba <HAL_GPIO_WritePin>
                          |LED7_0_4_Pin|LED7_0_5_Pin|LED7_0_6_Pin|LED7_1_0_Pin
                          |LED7_1_1_Pin|LED7_1_2_Pin|LED7_1_3_Pin|LED7_1_4_Pin
                          |LED7_1_5_Pin|LED7_1_6_Pin|LED_BLINKING_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin|LED_GREEN_0_Pin|LED_YELLOW_0_Pin|LED_RED_1_Pin
 8000b74:	2200      	movs	r2, #0
 8000b76:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000b7a:	481b      	ldr	r0, [pc, #108]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000b7c:	f000 fe1d 	bl	80017ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED7_0_0_Pin LED7_0_1_Pin LED7_0_2_Pin LED7_0_3_Pin
                           LED7_0_4_Pin LED7_0_5_Pin LED7_0_6_Pin LED7_1_0_Pin
                           LED7_1_1_Pin LED7_1_2_Pin LED7_1_3_Pin LED7_1_4_Pin
                           LED7_1_5_Pin LED7_1_6_Pin LED_BLINKING_Pin */
  GPIO_InitStruct.Pin = LED7_0_0_Pin|LED7_0_1_Pin|LED7_0_2_Pin|LED7_0_3_Pin
 8000b80:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000b84:	60bb      	str	r3, [r7, #8]
                          |LED7_0_4_Pin|LED7_0_5_Pin|LED7_0_6_Pin|LED7_1_0_Pin
                          |LED7_1_1_Pin|LED7_1_2_Pin|LED7_1_3_Pin|LED7_1_4_Pin
                          |LED7_1_5_Pin|LED7_1_6_Pin|LED_BLINKING_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	4812      	ldr	r0, [pc, #72]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b9a:	f000 fc7d 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_0_Pin LED_GREEN_0_Pin LED_YELLOW_0_Pin LED_RED_1_Pin
                           LED_GREEN_1_Pin LED_YELLOW_1_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_0_Pin|LED_GREEN_0_Pin|LED_YELLOW_0_Pin|LED_RED_1_Pin
 8000b9e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000ba2:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN_1_Pin|LED_YELLOW_1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2302      	movs	r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000bb8:	f000 fc6e 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000bbc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_GPIO_Init+0xc4>)
 8000bd2:	f000 fc61 	bl	8001498 <HAL_GPIO_Init>

}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40010c00 	.word	0x40010c00

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <mode_processing>:
#include "global.h"
#include "mode_processing.h"
#include "led_processing.h"
#include "timer.h"

void mode_processing(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	switch(mode){
 8000bfc:	4b9f      	ldr	r3, [pc, #636]	; (8000e7c <mode_processing+0x284>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	f200 8137 	bhi.w	8000e76 <mode_processing+0x27e>
 8000c08:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <mode_processing+0x18>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000d07 	.word	0x08000d07
 8000c18:	08000d81 	.word	0x08000d81
 8000c1c:	08000dfb 	.word	0x08000dfb
	case 1: // Mode 01: The traffic light application is running normally.
		if (initState == 0){
 8000c20:	4b97      	ldr	r3, [pc, #604]	; (8000e80 <mode_processing+0x288>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d123      	bne.n	8000c70 <mode_processing+0x78>
			trafficLed0 = 0; // turn on red led on road 01
 8000c28:	4b96      	ldr	r3, [pc, #600]	; (8000e84 <mode_processing+0x28c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
			trafficLed1 = 1; // turn on green led on road 02
 8000c2e:	4b96      	ldr	r3, [pc, #600]	; (8000e88 <mode_processing+0x290>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
			counter0 = timeDurations[trafficLed0]; // set red time duration for counter
 8000c34:	4b93      	ldr	r3, [pc, #588]	; (8000e84 <mode_processing+0x28c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a94      	ldr	r2, [pc, #592]	; (8000e8c <mode_processing+0x294>)
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	4a94      	ldr	r2, [pc, #592]	; (8000e90 <mode_processing+0x298>)
 8000c40:	6013      	str	r3, [r2, #0]
			counter1 = timeDurations[trafficLed1]; // set green time duration for counter
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <mode_processing+0x290>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a91      	ldr	r2, [pc, #580]	; (8000e8c <mode_processing+0x294>)
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	4a91      	ldr	r2, [pc, #580]	; (8000e94 <mode_processing+0x29c>)
 8000c4e:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000c50:	4b8b      	ldr	r3, [pc, #556]	; (8000e80 <mode_processing+0x288>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1); // display Traffic LED on both roads
 8000c56:	4b8b      	ldr	r3, [pc, #556]	; (8000e84 <mode_processing+0x28c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a8b      	ldr	r2, [pc, #556]	; (8000e88 <mode_processing+0x290>)
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fd1d 	bl	80006a0 <updateTrafficLED>
			setTimer1(1000);
 8000c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6a:	f000 f9c1 	bl	8000ff0 <setTimer1>
				}
				updateTrafficLED(trafficLed0, trafficLed1);
				setTimer1(1000);
			}
		}
		break;
 8000c6e:	e101      	b.n	8000e74 <mode_processing+0x27c>
			if (getTimer1Flag() == 1){
 8000c70:	f000 fa04 	bl	800107c <getTimer1Flag>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	f040 80fc 	bne.w	8000e74 <mode_processing+0x27c>
				counter0--;
 8000c7c:	4b84      	ldr	r3, [pc, #528]	; (8000e90 <mode_processing+0x298>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	4a83      	ldr	r2, [pc, #524]	; (8000e90 <mode_processing+0x298>)
 8000c84:	6013      	str	r3, [r2, #0]
				counter1--;
 8000c86:	4b83      	ldr	r3, [pc, #524]	; (8000e94 <mode_processing+0x29c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a81      	ldr	r2, [pc, #516]	; (8000e94 <mode_processing+0x29c>)
 8000c8e:	6013      	str	r3, [r2, #0]
				if (counter0 <= 0){
 8000c90:	4b7f      	ldr	r3, [pc, #508]	; (8000e90 <mode_processing+0x298>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dc12      	bgt.n	8000cbe <mode_processing+0xc6>
					trafficLed0++;
 8000c98:	4b7a      	ldr	r3, [pc, #488]	; (8000e84 <mode_processing+0x28c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	4a79      	ldr	r2, [pc, #484]	; (8000e84 <mode_processing+0x28c>)
 8000ca0:	6013      	str	r3, [r2, #0]
					if (trafficLed0 >= 3)
 8000ca2:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <mode_processing+0x28c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	dd02      	ble.n	8000cb0 <mode_processing+0xb8>
						trafficLed0 = 0;
 8000caa:	4b76      	ldr	r3, [pc, #472]	; (8000e84 <mode_processing+0x28c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
					counter0 = timeDurations[trafficLed0];
 8000cb0:	4b74      	ldr	r3, [pc, #464]	; (8000e84 <mode_processing+0x28c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a75      	ldr	r2, [pc, #468]	; (8000e8c <mode_processing+0x294>)
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	4a75      	ldr	r2, [pc, #468]	; (8000e90 <mode_processing+0x298>)
 8000cbc:	6013      	str	r3, [r2, #0]
				if (counter1 <= 0){
 8000cbe:	4b75      	ldr	r3, [pc, #468]	; (8000e94 <mode_processing+0x29c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	dc12      	bgt.n	8000cec <mode_processing+0xf4>
					trafficLed1++;
 8000cc6:	4b70      	ldr	r3, [pc, #448]	; (8000e88 <mode_processing+0x290>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a6e      	ldr	r2, [pc, #440]	; (8000e88 <mode_processing+0x290>)
 8000cce:	6013      	str	r3, [r2, #0]
					if (trafficLed1 >= 3)
 8000cd0:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <mode_processing+0x290>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	dd02      	ble.n	8000cde <mode_processing+0xe6>
						trafficLed1 = 0;
 8000cd8:	4b6b      	ldr	r3, [pc, #428]	; (8000e88 <mode_processing+0x290>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
					counter1 = timeDurations[trafficLed1];
 8000cde:	4b6a      	ldr	r3, [pc, #424]	; (8000e88 <mode_processing+0x290>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a6a      	ldr	r2, [pc, #424]	; (8000e8c <mode_processing+0x294>)
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	4a6a      	ldr	r2, [pc, #424]	; (8000e94 <mode_processing+0x29c>)
 8000cea:	6013      	str	r3, [r2, #0]
				updateTrafficLED(trafficLed0, trafficLed1);
 8000cec:	4b65      	ldr	r3, [pc, #404]	; (8000e84 <mode_processing+0x28c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a65      	ldr	r2, [pc, #404]	; (8000e88 <mode_processing+0x290>)
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcd2 	bl	80006a0 <updateTrafficLED>
				setTimer1(1000);
 8000cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d00:	f000 f976 	bl	8000ff0 <setTimer1>
		break;
 8000d04:	e0b6      	b.n	8000e74 <mode_processing+0x27c>
	case 2: // Mode 2 - Modify time duration for the red LEDs
		if (initState == 0){
 8000d06:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <mode_processing+0x288>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d11d      	bne.n	8000d4a <mode_processing+0x152>
			trafficLed0 = 0;
 8000d0e:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <mode_processing+0x28c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
			trafficLed1 = 0;
 8000d14:	4b5c      	ldr	r3, [pc, #368]	; (8000e88 <mode_processing+0x290>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000d1a:	4b5a      	ldr	r3, [pc, #360]	; (8000e84 <mode_processing+0x28c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a5b      	ldr	r2, [pc, #364]	; (8000e8c <mode_processing+0x294>)
 8000d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d24:	4a5c      	ldr	r2, [pc, #368]	; (8000e98 <mode_processing+0x2a0>)
 8000d26:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000d28:	4b55      	ldr	r3, [pc, #340]	; (8000e80 <mode_processing+0x288>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000d2e:	4b55      	ldr	r3, [pc, #340]	; (8000e84 <mode_processing+0x28c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a55      	ldr	r2, [pc, #340]	; (8000e88 <mode_processing+0x290>)
 8000d34:	6812      	ldr	r2, [r2, #0]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcb1 	bl	80006a0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000d3e:	4b57      	ldr	r3, [pc, #348]	; (8000e9c <mode_processing+0x2a4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f954 	bl	8000ff0 <setTimer1>
 8000d48:	e011      	b.n	8000d6e <mode_processing+0x176>
		}
		else {
			if( getTimer1Flag() == 1){
 8000d4a:	f000 f997 	bl	800107c <getTimer1Flag>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10c      	bne.n	8000d6e <mode_processing+0x176>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000d54:	4b4b      	ldr	r3, [pc, #300]	; (8000e84 <mode_processing+0x28c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a4b      	ldr	r2, [pc, #300]	; (8000e88 <mode_processing+0x290>)
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fd26 	bl	80007b0 <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000d64:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <mode_processing+0x2a4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f941 	bl	8000ff0 <setTimer1>
			}
		}
		counter0 = duration;
 8000d6e:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <mode_processing+0x2a0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a47      	ldr	r2, [pc, #284]	; (8000e90 <mode_processing+0x298>)
 8000d74:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000d76:	4b41      	ldr	r3, [pc, #260]	; (8000e7c <mode_processing+0x284>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a46      	ldr	r2, [pc, #280]	; (8000e94 <mode_processing+0x29c>)
 8000d7c:	6013      	str	r3, [r2, #0]
		break;
 8000d7e:	e07a      	b.n	8000e76 <mode_processing+0x27e>
	case 3: // Mode 3 - Modify time duration for the amber LEDs
		if (initState == 0){
 8000d80:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <mode_processing+0x288>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d11d      	bne.n	8000dc4 <mode_processing+0x1cc>
			trafficLed0 = 2;
 8000d88:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <mode_processing+0x28c>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	601a      	str	r2, [r3, #0]
			trafficLed1 = 2;
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <mode_processing+0x290>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000d94:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <mode_processing+0x28c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a3c      	ldr	r2, [pc, #240]	; (8000e8c <mode_processing+0x294>)
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <mode_processing+0x2a0>)
 8000da0:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <mode_processing+0x288>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000da8:	4b36      	ldr	r3, [pc, #216]	; (8000e84 <mode_processing+0x28c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a36      	ldr	r2, [pc, #216]	; (8000e88 <mode_processing+0x290>)
 8000dae:	6812      	ldr	r2, [r2, #0]
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc74 	bl	80006a0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000db8:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <mode_processing+0x2a4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f917 	bl	8000ff0 <setTimer1>
 8000dc2:	e011      	b.n	8000de8 <mode_processing+0x1f0>
		}
		else {
			if( getTimer1Flag() == 1){
 8000dc4:	f000 f95a 	bl	800107c <getTimer1Flag>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10c      	bne.n	8000de8 <mode_processing+0x1f0>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <mode_processing+0x28c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a2d      	ldr	r2, [pc, #180]	; (8000e88 <mode_processing+0x290>)
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fce9 	bl	80007b0 <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <mode_processing+0x2a4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f904 	bl	8000ff0 <setTimer1>
			}
		}
		counter0 = duration;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <mode_processing+0x2a0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <mode_processing+0x298>)
 8000dee:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <mode_processing+0x284>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <mode_processing+0x29c>)
 8000df6:	6013      	str	r3, [r2, #0]
		break;
 8000df8:	e03d      	b.n	8000e76 <mode_processing+0x27e>
	case 4: // Mode 4 - Modify time duration for the green LEDs
		if (initState == 0){
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <mode_processing+0x288>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d11d      	bne.n	8000e3e <mode_processing+0x246>
			trafficLed0 = 1;
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <mode_processing+0x28c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
			trafficLed1 = 1;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <mode_processing+0x290>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
			duration = timeDurations[trafficLed0];
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <mode_processing+0x28c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <mode_processing+0x294>)
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <mode_processing+0x2a0>)
 8000e1a:	6013      	str	r3, [r2, #0]
			initState = 1;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <mode_processing+0x288>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
			updateTrafficLED(trafficLed0, trafficLed1);
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <mode_processing+0x28c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <mode_processing+0x290>)
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fc37 	bl	80006a0 <updateTrafficLED>
			setTimer1(timeBlinking);
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <mode_processing+0x2a4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f8da 	bl	8000ff0 <setTimer1>
 8000e3c:	e011      	b.n	8000e62 <mode_processing+0x26a>
		}
		else {
			if( getTimer1Flag() == 1){
 8000e3e:	f000 f91d 	bl	800107c <getTimer1Flag>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10c      	bne.n	8000e62 <mode_processing+0x26a>
				toggleTrafficLed(trafficLed0, trafficLed1);
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <mode_processing+0x28c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <mode_processing+0x290>)
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fcac 	bl	80007b0 <toggleTrafficLed>
				setTimer1 (timeBlinking);
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <mode_processing+0x2a4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f8c7 	bl	8000ff0 <setTimer1>
			}
		}
		counter0 = duration;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <mode_processing+0x2a0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <mode_processing+0x298>)
 8000e68:	6013      	str	r3, [r2, #0]
		counter1 = mode;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <mode_processing+0x284>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <mode_processing+0x29c>)
 8000e70:	6013      	str	r3, [r2, #0]
		break;
 8000e72:	e000      	b.n	8000e76 <mode_processing+0x27e>
		break;
 8000e74:	bf00      	nop
	}
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000003c 	.word	0x2000003c
 8000e80:	20000040 	.word	0x20000040
 8000e84:	20000044 	.word	0x20000044
 8000e88:	20000048 	.word	0x20000048
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	2000004c 	.word	0x2000004c
 8000e94:	20000050 	.word	0x20000050
 8000e98:	20000058 	.word	0x20000058
 8000e9c:	2000000c 	.word	0x2000000c

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_MspInit+0x5c>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a14      	ldr	r2, [pc, #80]	; (8000efc <HAL_MspInit+0x5c>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <HAL_MspInit+0x5c>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_MspInit+0x5c>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_MspInit+0x60>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_MspInit+0x60>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010000 	.word	0x40010000

08000f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f14:	d113      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_TIM_Base_MspInit+0x44>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201c      	movs	r0, #28
 8000f34:	f000 fa79 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f38:	201c      	movs	r0, #28
 8000f3a:	f000 fa92 	bl	8001462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 f957 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM2_IRQHandler+0x10>)
 8000fa2:	f001 f8bf 	bl	8002124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000090 	.word	0x20000090

08000fb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <setTimerBlinking>:
int timer1_flag = 0;

int timer2_counter = 0;
int timer2_flag = 0;

void setTimerBlinking(int duration){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	timerBlinking_counter = duration / TIME_CYCLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <setTimerBlinking+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <setTimerBlinking+0x2c>)
 8000fd0:	6013      	str	r3, [r2, #0]
	timerBlinking_flag = 0;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <setTimerBlinking+0x30>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000014 	.word	0x20000014
 8000fe8:	20000078 	.word	0x20000078
 8000fec:	2000007c 	.word	0x2000007c

08000ff0 <setTimer1>:

void setTimer1(int duration){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIME_CYCLE;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <setTimer1+0x28>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001002:	4a06      	ldr	r2, [pc, #24]	; (800101c <setTimer1+0x2c>)
 8001004:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <setTimer1+0x30>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000014 	.word	0x20000014
 800101c:	20000080 	.word	0x20000080
 8001020:	20000084 	.word	0x20000084

08001024 <setTimer2>:

void setTimer2(int duration){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIME_CYCLE;
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <setTimer2+0x28>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	fb92 f3f3 	sdiv	r3, r2, r3
 8001036:	4a06      	ldr	r2, [pc, #24]	; (8001050 <setTimer2+0x2c>)
 8001038:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <setTimer2+0x30>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000014 	.word	0x20000014
 8001050:	20000088 	.word	0x20000088
 8001054:	2000008c 	.word	0x2000008c

08001058 <getTimerBlinkingFlag>:

int getTimerBlinkingFlag(){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	if (timerBlinking_flag == 1){
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <getTimerBlinkingFlag+0x20>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d104      	bne.n	800106e <getTimerBlinkingFlag+0x16>
		timerBlinking_flag = 0;
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <getTimerBlinkingFlag+0x20>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
		return 1;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <getTimerBlinkingFlag+0x18>
	}
	return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	2000007c 	.word	0x2000007c

0800107c <getTimer1Flag>:

int getTimer1Flag(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	if (timer1_flag == 1){
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <getTimer1Flag+0x20>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d104      	bne.n	8001092 <getTimer1Flag+0x16>
		timer1_flag = 0;
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <getTimer1Flag+0x20>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
		return 1;
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <getTimer1Flag+0x18>
	}
	return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000084 	.word	0x20000084

080010a0 <getTimer2Flag>:

int getTimer2Flag(){
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	if (timer2_flag == 1){
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <getTimer2Flag+0x20>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d104      	bne.n	80010b6 <getTimer2Flag+0x16>
		timer2_flag = 0;
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <getTimer2Flag+0x20>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
		return 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <getTimer2Flag+0x18>
	}
	return 0;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	2000008c 	.word	0x2000008c

080010c4 <timerRun>:

void timerRun(){
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	if (timerBlinking_counter > 0){
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <timerRun+0x6c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dd0b      	ble.n	80010e8 <timerRun+0x24>
		timerBlinking_counter--;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <timerRun+0x6c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4a16      	ldr	r2, [pc, #88]	; (8001130 <timerRun+0x6c>)
 80010d8:	6013      	str	r3, [r2, #0]
		if (timerBlinking_counter <= 0){
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <timerRun+0x6c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	dc02      	bgt.n	80010e8 <timerRun+0x24>
			timerBlinking_flag = 1;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <timerRun+0x70>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer1_counter > 0){
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <timerRun+0x74>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dd0b      	ble.n	8001108 <timerRun+0x44>
		timer1_counter--;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <timerRun+0x74>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <timerRun+0x74>)
 80010f8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <timerRun+0x74>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dc02      	bgt.n	8001108 <timerRun+0x44>
			timer1_flag = 1;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <timerRun+0x78>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 8001108:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <timerRun+0x7c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dd0b      	ble.n	8001128 <timerRun+0x64>
		timer2_counter--;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <timerRun+0x7c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <timerRun+0x7c>)
 8001118:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <timerRun+0x7c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	dc02      	bgt.n	8001128 <timerRun+0x64>
			timer2_flag = 1;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <timerRun+0x80>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000078 	.word	0x20000078
 8001134:	2000007c 	.word	0x2000007c
 8001138:	20000080 	.word	0x20000080
 800113c:	20000084 	.word	0x20000084
 8001140:	20000088 	.word	0x20000088
 8001144:	2000008c 	.word	0x2000008c

08001148 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 ){
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001158:	d103      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800115a:	f7ff f8a5 	bl	80002a8 <button_reading>
		timerRun();
 800115e:	f7ff ffb1 	bl	80010c4 <timerRun>
	}
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001192:	f7ff ff0d 	bl	8000fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f001 fb0d 	bl	80027b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff fbed 	bl	8000978 <main>
  bx lr
 800119e:	4770      	bx	lr
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80011a8:	0800284c 	.word	0x0800284c
  ldr r2, =_sbss
 80011ac:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80011b0:	200000dc 	.word	0x200000dc

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_Init+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_Init+0x28>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f923 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fe64 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f93b 	bl	800147e <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f903 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000010 	.word	0x20000010
 800123c:	2000001c 	.word	0x2000001c
 8001240:	20000018 	.word	0x20000018

08001244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x1c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x20>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_IncTick+0x20>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	2000001c 	.word	0x2000001c
 8001264:	200000d8 	.word	0x200000d8

08001268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <HAL_GetTick+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	200000d8 	.word	0x200000d8

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4906      	ldr	r1, [pc, #24]	; (8001314 <__NVIC_EnableIRQ+0x34>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff90 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff2d 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff42 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff90 	bl	800136c <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5f 	bl	8001318 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff35 	bl	80012e0 <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	; 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e148      	b.n	800173e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ac:	2201      	movs	r2, #1
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8137 	bne.w	8001738 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4aa3      	ldr	r2, [pc, #652]	; (800175c <HAL_GPIO_Init+0x2c4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d05e      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014d4:	4aa1      	ldr	r2, [pc, #644]	; (800175c <HAL_GPIO_Init+0x2c4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d875      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014da:	4aa1      	ldr	r2, [pc, #644]	; (8001760 <HAL_GPIO_Init+0x2c8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d058      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014e0:	4a9f      	ldr	r2, [pc, #636]	; (8001760 <HAL_GPIO_Init+0x2c8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d86f      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014e6:	4a9f      	ldr	r2, [pc, #636]	; (8001764 <HAL_GPIO_Init+0x2cc>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d052      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014ec:	4a9d      	ldr	r2, [pc, #628]	; (8001764 <HAL_GPIO_Init+0x2cc>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d869      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014f2:	4a9d      	ldr	r2, [pc, #628]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d04c      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014f8:	4a9b      	ldr	r2, [pc, #620]	; (8001768 <HAL_GPIO_Init+0x2d0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d863      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014fe:	4a9b      	ldr	r2, [pc, #620]	; (800176c <HAL_GPIO_Init+0x2d4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d046      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 8001504:	4a99      	ldr	r2, [pc, #612]	; (800176c <HAL_GPIO_Init+0x2d4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d85d      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 800150a:	2b12      	cmp	r3, #18
 800150c:	d82a      	bhi.n	8001564 <HAL_GPIO_Init+0xcc>
 800150e:	2b12      	cmp	r3, #18
 8001510:	d859      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <HAL_GPIO_Init+0x80>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001593 	.word	0x08001593
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800157f 	.word	0x0800157f
 8001524:	080015c1 	.word	0x080015c1
 8001528:	080015c7 	.word	0x080015c7
 800152c:	080015c7 	.word	0x080015c7
 8001530:	080015c7 	.word	0x080015c7
 8001534:	080015c7 	.word	0x080015c7
 8001538:	080015c7 	.word	0x080015c7
 800153c:	080015c7 	.word	0x080015c7
 8001540:	080015c7 	.word	0x080015c7
 8001544:	080015c7 	.word	0x080015c7
 8001548:	080015c7 	.word	0x080015c7
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015c7 	.word	0x080015c7
 8001554:	080015c7 	.word	0x080015c7
 8001558:	080015c7 	.word	0x080015c7
 800155c:	08001575 	.word	0x08001575
 8001560:	08001589 	.word	0x08001589
 8001564:	4a82      	ldr	r2, [pc, #520]	; (8001770 <HAL_GPIO_Init+0x2d8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156a:	e02c      	b.n	80015c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e029      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e024      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e01f      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	330c      	adds	r3, #12
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e01a      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e013      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	611a      	str	r2, [r3, #16]
          break;
 80015b2:	e009      	b.n	80015c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	615a      	str	r2, [r3, #20]
          break;
 80015be:	e003      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          break;
 80015c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	d801      	bhi.n	80015d2 <HAL_GPIO_Init+0x13a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_Init+0x13e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3304      	adds	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	; 0xff
 80015dc:	d802      	bhi.n	80015e4 <HAL_GPIO_Init+0x14c>
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x152>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	3b08      	subs	r3, #8
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	210f      	movs	r1, #15
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	6a39      	ldr	r1, [r7, #32]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8090 	beq.w	8001738 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a55      	ldr	r2, [pc, #340]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_GPIO_Init+0x2dc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001630:	4a51      	ldr	r2, [pc, #324]	; (8001778 <HAL_GPIO_Init+0x2e0>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a49      	ldr	r2, [pc, #292]	; (800177c <HAL_GPIO_Init+0x2e4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d00d      	beq.n	8001678 <HAL_GPIO_Init+0x1e0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a48      	ldr	r2, [pc, #288]	; (8001780 <HAL_GPIO_Init+0x2e8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d007      	beq.n	8001674 <HAL_GPIO_Init+0x1dc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_GPIO_Init+0x2ec>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d101      	bne.n	8001670 <HAL_GPIO_Init+0x1d8>
 800166c:	2302      	movs	r3, #2
 800166e:	e004      	b.n	800167a <HAL_GPIO_Init+0x1e2>
 8001670:	2303      	movs	r3, #3
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x1e2>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_GPIO_Init+0x1e2>
 8001678:	2300      	movs	r3, #0
 800167a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	4093      	lsls	r3, r2
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800168a:	493b      	ldr	r1, [pc, #236]	; (8001778 <HAL_GPIO_Init+0x2e0>)
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016a4:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4937      	ldr	r1, [pc, #220]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b2:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4933      	ldr	r1, [pc, #204]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016cc:	4b2e      	ldr	r3, [pc, #184]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	492d      	ldr	r1, [pc, #180]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4929      	ldr	r1, [pc, #164]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4923      	ldr	r1, [pc, #140]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	491f      	ldr	r1, [pc, #124]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 800170c:	4013      	ands	r3, r2
 800170e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	4919      	ldr	r1, [pc, #100]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	60cb      	str	r3, [r1, #12]
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	4915      	ldr	r1, [pc, #84]	; (8001788 <HAL_GPIO_Init+0x2f0>)
 8001734:	4013      	ands	r3, r2
 8001736:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3301      	adds	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f aeaf 	bne.w	80014ac <HAL_GPIO_Init+0x14>
  }
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	372c      	adds	r7, #44	; 0x2c
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	10320000 	.word	0x10320000
 8001760:	10310000 	.word	0x10310000
 8001764:	10220000 	.word	0x10220000
 8001768:	10210000 	.word	0x10210000
 800176c:	10120000 	.word	0x10120000
 8001770:	10110000 	.word	0x10110000
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	40010800 	.word	0x40010800
 8001780:	40010c00 	.word	0x40010c00
 8001784:	40011000 	.word	0x40011000
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	807b      	strh	r3, [r7, #2]
 80017c6:	4613      	mov	r3, r2
 80017c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ca:	787b      	ldrb	r3, [r7, #1]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017d6:	e003      	b.n	80017e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	041a      	lsls	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	611a      	str	r2, [r3, #16]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017fc:	887a      	ldrh	r2, [r7, #2]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	041a      	lsls	r2, r3, #16
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43d9      	mvns	r1, r3
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	400b      	ands	r3, r1
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e26c      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8087 	beq.w	800194a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800183c:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b04      	cmp	r3, #4
 8001846:	d00c      	beq.n	8001862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001848:	4b8f      	ldr	r3, [pc, #572]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d112      	bne.n	800187a <HAL_RCC_OscConfig+0x5e>
 8001854:	4b8c      	ldr	r3, [pc, #560]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d10b      	bne.n	800187a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001862:	4b89      	ldr	r3, [pc, #548]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d06c      	beq.n	8001948 <HAL_RCC_OscConfig+0x12c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d168      	bne.n	8001948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e246      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x76>
 8001884:	4b80      	ldr	r3, [pc, #512]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a7f      	ldr	r2, [pc, #508]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e02e      	b.n	80018f0 <HAL_RCC_OscConfig+0xd4>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x98>
 800189a:	4b7b      	ldr	r3, [pc, #492]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7a      	ldr	r2, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b78      	ldr	r3, [pc, #480]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a77      	ldr	r2, [pc, #476]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0xd4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0xbc>
 80018be:	4b72      	ldr	r3, [pc, #456]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a71      	ldr	r2, [pc, #452]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a6e      	ldr	r2, [pc, #440]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0xd4>
 80018d8:	4b6b      	ldr	r3, [pc, #428]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6a      	ldr	r2, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a67      	ldr	r2, [pc, #412]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fcb6 	bl	8001268 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fcb2 	bl	8001268 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1fa      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b5d      	ldr	r3, [pc, #372]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0xe4>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fca2 	bl	8001268 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fc9e 	bl	8001268 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1e6      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x10c>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d063      	beq.n	8001a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001956:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b08      	cmp	r3, #8
 800196c:	d11c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x18c>
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x176>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e1ba      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4939      	ldr	r1, [pc, #228]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	e03a      	b.n	8001a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff fc57 	bl	8001268 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fc53 	bl	8001268 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e19b      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4927      	ldr	r1, [pc, #156]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_RCC_OscConfig+0x270>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fc36 	bl	8001268 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a00:	f7ff fc32 	bl	8001268 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e17a      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d03a      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d019      	beq.n	8001a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_RCC_OscConfig+0x274>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a38:	f7ff fc16 	bl	8001268 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a40:	f7ff fc12 	bl	8001268 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e15a      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 faa6 	bl	8001fb0 <RCC_Delay>
 8001a64:	e01c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_RCC_OscConfig+0x274>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fbfc 	bl	8001268 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a72:	e00f      	b.n	8001a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a74:	f7ff fbf8 	bl	8001268 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d908      	bls.n	8001a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e140      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	42420000 	.word	0x42420000
 8001a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b9e      	ldr	r3, [pc, #632]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e9      	bne.n	8001a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a6 	beq.w	8001bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b97      	ldr	r3, [pc, #604]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10d      	bne.n	8001ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b94      	ldr	r3, [pc, #592]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a93      	ldr	r2, [pc, #588]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	4b8e      	ldr	r3, [pc, #568]	; (8001d14 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a8a      	ldr	r2, [pc, #552]	; (8001d14 <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af2:	f7ff fbb9 	bl	8001268 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afa:	f7ff fbb5 	bl	8001268 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0fd      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b81      	ldr	r3, [pc, #516]	; (8001d14 <HAL_RCC_OscConfig+0x4f8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x312>
 8001b20:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4a7a      	ldr	r2, [pc, #488]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6213      	str	r3, [r2, #32]
 8001b2c:	e02d      	b.n	8001b8a <HAL_RCC_OscConfig+0x36e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x334>
 8001b36:	4b76      	ldr	r3, [pc, #472]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a75      	ldr	r2, [pc, #468]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6213      	str	r3, [r2, #32]
 8001b42:	4b73      	ldr	r3, [pc, #460]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a72      	ldr	r2, [pc, #456]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	e01c      	b.n	8001b8a <HAL_RCC_OscConfig+0x36e>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d10c      	bne.n	8001b72 <HAL_RCC_OscConfig+0x356>
 8001b58:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a6c      	ldr	r2, [pc, #432]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6213      	str	r3, [r2, #32]
 8001b64:	4b6a      	ldr	r3, [pc, #424]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a69      	ldr	r2, [pc, #420]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e00b      	b.n	8001b8a <HAL_RCC_OscConfig+0x36e>
 8001b72:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a66      	ldr	r2, [pc, #408]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a63      	ldr	r2, [pc, #396]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d015      	beq.n	8001bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb69 	bl	8001268 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fb65 	bl	8001268 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0ab      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ee      	beq.n	8001b9a <HAL_RCC_OscConfig+0x37e>
 8001bbc:	e014      	b.n	8001be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fb53 	bl	8001268 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff fb4f 	bl	8001268 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e095      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bdc:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bee:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8081 	beq.w	8001d06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c04:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d061      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d146      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c18:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <HAL_RCC_OscConfig+0x4fc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fb23 	bl	8001268 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fb1f 	bl	8001268 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e067      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f0      	bne.n	8001c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d108      	bne.n	8001c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c4e:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	492d      	ldr	r1, [pc, #180]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c60:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a19      	ldr	r1, [r3, #32]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	430b      	orrs	r3, r1
 8001c72:	4927      	ldr	r1, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_RCC_OscConfig+0x4fc>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff faf3 	bl	8001268 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff faef 	bl	8001268 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e037      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x46a>
 8001ca4:	e02f      	b.n	8001d06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <HAL_RCC_OscConfig+0x4fc>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fadc 	bl	8001268 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff fad8 	bl	8001268 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e020      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x498>
 8001cd2:	e018      	b.n	8001d06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e013      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42420060 	.word	0x42420060

08001d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0d0      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d910      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 0207 	bic.w	r2, r3, #7
 8001d46:	4965      	ldr	r1, [pc, #404]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0b8      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d78:	4b59      	ldr	r3, [pc, #356]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d90:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	494d      	ldr	r1, [pc, #308]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d040      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d115      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e07f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e073      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e06b      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4936      	ldr	r1, [pc, #216]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e0c:	f7ff fa2c 	bl	8001268 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f7ff fa28 	bl	8001268 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e053      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1eb      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d210      	bcs.n	8001e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 0207 	bic.w	r2, r3, #7
 8001e52:	4922      	ldr	r1, [pc, #136]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e032      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4916      	ldr	r1, [pc, #88]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	490e      	ldr	r1, [pc, #56]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eaa:	f000 f821 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	490a      	ldr	r1, [pc, #40]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebc:	5ccb      	ldrb	r3, [r1, r3]
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_ClockConfig+0x1d0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f98a 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08002834 	.word	0x08002834
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	20000018 	.word	0x20000018

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	b490      	push	{r4, r7}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ef8:	1d3c      	adds	r4, r7, #4
 8001efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f00:	f240 2301 	movw	r3, #513	; 0x201
 8001f04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d002      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x40>
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x46>
 8001f2e:	e02d      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	623b      	str	r3, [r7, #32]
      break;
 8001f34:	e02d      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	0c9b      	lsrs	r3, r3, #18
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f42:	4413      	add	r3, r2
 8001f44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	0c5b      	lsrs	r3, r3, #17
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f62:	4413      	add	r3, r2
 8001f64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f6e:	fb02 f203 	mul.w	r2, r2, r3
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	e004      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	623b      	str	r3, [r7, #32]
      break;
 8001f8a:	e002      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8e:	623b      	str	r3, [r7, #32]
      break;
 8001f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f92:	6a3b      	ldr	r3, [r7, #32]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc90      	pop	{r4, r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	08002824 	.word	0x08002824
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	007a1200 	.word	0x007a1200
 8001fac:	003d0900 	.word	0x003d0900

08001fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <RCC_Delay+0x34>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <RCC_Delay+0x38>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fcc:	bf00      	nop
  }
  while (Delay --);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	60fa      	str	r2, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <RCC_Delay+0x1c>
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000010 	.word	0x20000010
 8001fe8:	10624dd3 	.word	0x10624dd3

08001fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e041      	b.n	8002082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe ff76 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f000 fa6a 	bl	8002504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d001      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e035      	b.n	8002110 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_TIM_Base_Start_IT+0x90>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_TIM_Base_Start_IT+0x4e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ce:	d004      	beq.n	80020da <HAL_TIM_Base_Start_IT+0x4e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_TIM_Base_Start_IT+0x94>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d111      	bne.n	80020fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d010      	beq.n	800210e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fc:	e007      	b.n	800210e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40012c00 	.word	0x40012c00
 8002120:	40000400 	.word	0x40000400

08002124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d122      	bne.n	8002180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b02      	cmp	r3, #2
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0202 	mvn.w	r2, #2
 8002150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f9b1 	bl	80024ce <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f9a4 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f9b3 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d122      	bne.n	80021d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b04      	cmp	r3, #4
 800219a:	d11b      	bne.n	80021d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0204 	mvn.w	r2, #4
 80021a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f987 	bl	80024ce <HAL_TIM_IC_CaptureCallback>
 80021c0:	e005      	b.n	80021ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f97a 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f989 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d122      	bne.n	8002228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d11b      	bne.n	8002228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0208 	mvn.w	r2, #8
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2204      	movs	r2, #4
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f95d 	bl	80024ce <HAL_TIM_IC_CaptureCallback>
 8002214:	e005      	b.n	8002222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f950 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f95f 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b10      	cmp	r3, #16
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b10      	cmp	r3, #16
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0210 	mvn.w	r2, #16
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2208      	movs	r2, #8
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f933 	bl	80024ce <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f926 	bl	80024bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f935 	bl	80024e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d107      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0201 	mvn.w	r2, #1
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe ff50 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d107      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa67 	bl	80027a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d107      	bne.n	8002300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8f9 	bl	80024f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b20      	cmp	r3, #32
 800230c:	d10e      	bne.n	800232c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b20      	cmp	r3, #32
 800231a:	d107      	bne.n	800232c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0220 	mvn.w	r2, #32
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fa32 	bl	8002790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_TIM_ConfigClockSource+0x18>
 8002348:	2302      	movs	r3, #2
 800234a:	e0b3      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x180>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800236a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002372:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002384:	d03e      	beq.n	8002404 <HAL_TIM_ConfigClockSource+0xd0>
 8002386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238a:	f200 8087 	bhi.w	800249c <HAL_TIM_ConfigClockSource+0x168>
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	f000 8085 	beq.w	80024a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	d87f      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 800239c:	2b70      	cmp	r3, #112	; 0x70
 800239e:	d01a      	beq.n	80023d6 <HAL_TIM_ConfigClockSource+0xa2>
 80023a0:	2b70      	cmp	r3, #112	; 0x70
 80023a2:	d87b      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023a4:	2b60      	cmp	r3, #96	; 0x60
 80023a6:	d050      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x116>
 80023a8:	2b60      	cmp	r3, #96	; 0x60
 80023aa:	d877      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023ac:	2b50      	cmp	r3, #80	; 0x50
 80023ae:	d03c      	beq.n	800242a <HAL_TIM_ConfigClockSource+0xf6>
 80023b0:	2b50      	cmp	r3, #80	; 0x50
 80023b2:	d873      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d058      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x136>
 80023b8:	2b40      	cmp	r3, #64	; 0x40
 80023ba:	d86f      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023bc:	2b30      	cmp	r3, #48	; 0x30
 80023be:	d064      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x156>
 80023c0:	2b30      	cmp	r3, #48	; 0x30
 80023c2:	d86b      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d060      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x156>
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d867      	bhi.n	800249c <HAL_TIM_ConfigClockSource+0x168>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d05c      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x156>
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d05a      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023d4:	e062      	b.n	800249c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f000 f95c 	bl	80026a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	609a      	str	r2, [r3, #8]
      break;
 8002402:	e04e      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6899      	ldr	r1, [r3, #8]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f000 f945 	bl	80026a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002426:	609a      	str	r2, [r3, #8]
      break;
 8002428:	e03b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f000 f8bc 	bl	80025b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2150      	movs	r1, #80	; 0x50
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f913 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002448:	e02b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 f8da 	bl	8002610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2160      	movs	r1, #96	; 0x60
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f903 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002468:	e01b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6859      	ldr	r1, [r3, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	461a      	mov	r2, r3
 8002478:	f000 f89c 	bl	80025b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2140      	movs	r1, #64	; 0x40
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f8f3 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 8002488:	e00b      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f000 f8ea 	bl	800266e <TIM_ITRx_SetConfig>
        break;
 800249a:	e002      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800249c:	bf00      	nop
 800249e:	e000      	b.n	80024a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a25      	ldr	r2, [pc, #148]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <TIM_Base_SetConfig+0x28>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0x28>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <TIM_Base_SetConfig+0xac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0x52>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0x52>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <TIM_Base_SetConfig+0xac>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <TIM_Base_SetConfig+0xa8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d103      	bne.n	800259c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	615a      	str	r2, [r3, #20]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400

080025b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0201 	bic.w	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f023 030a 	bic.w	r3, r3, #10
 80025f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	621a      	str	r2, [r3, #32]
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f023 0210 	bic.w	r2, r3, #16
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800263a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	031b      	lsls	r3, r3, #12
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800264c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	621a      	str	r2, [r3, #32]
}
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	f043 0307 	orr.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b087      	sub	sp, #28
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	609a      	str	r2, [r3, #8]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e041      	b.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d004      	beq.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10c      	bne.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002756:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	4313      	orrs	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400

08002790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <__libc_init_array>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	2600      	movs	r6, #0
 80027b8:	4d0c      	ldr	r5, [pc, #48]	; (80027ec <__libc_init_array+0x38>)
 80027ba:	4c0d      	ldr	r4, [pc, #52]	; (80027f0 <__libc_init_array+0x3c>)
 80027bc:	1b64      	subs	r4, r4, r5
 80027be:	10a4      	asrs	r4, r4, #2
 80027c0:	42a6      	cmp	r6, r4
 80027c2:	d109      	bne.n	80027d8 <__libc_init_array+0x24>
 80027c4:	f000 f822 	bl	800280c <_init>
 80027c8:	2600      	movs	r6, #0
 80027ca:	4d0a      	ldr	r5, [pc, #40]	; (80027f4 <__libc_init_array+0x40>)
 80027cc:	4c0a      	ldr	r4, [pc, #40]	; (80027f8 <__libc_init_array+0x44>)
 80027ce:	1b64      	subs	r4, r4, r5
 80027d0:	10a4      	asrs	r4, r4, #2
 80027d2:	42a6      	cmp	r6, r4
 80027d4:	d105      	bne.n	80027e2 <__libc_init_array+0x2e>
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027dc:	4798      	blx	r3
 80027de:	3601      	adds	r6, #1
 80027e0:	e7ee      	b.n	80027c0 <__libc_init_array+0xc>
 80027e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e6:	4798      	blx	r3
 80027e8:	3601      	adds	r6, #1
 80027ea:	e7f2      	b.n	80027d2 <__libc_init_array+0x1e>
 80027ec:	08002844 	.word	0x08002844
 80027f0:	08002844 	.word	0x08002844
 80027f4:	08002844 	.word	0x08002844
 80027f8:	08002848 	.word	0x08002848

080027fc <memset>:
 80027fc:	4603      	mov	r3, r0
 80027fe:	4402      	add	r2, r0
 8002800:	4293      	cmp	r3, r2
 8002802:	d100      	bne.n	8002806 <memset+0xa>
 8002804:	4770      	bx	lr
 8002806:	f803 1b01 	strb.w	r1, [r3], #1
 800280a:	e7f9      	b.n	8002800 <memset+0x4>

0800280c <_init>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr

08002818 <_fini>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr
